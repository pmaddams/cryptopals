OPENSSL(1)                  General Commands Manual                 OPENSSL(1)

NNAAMMEE
     ooppeennssssll - OpenSSL command line tool

SSYYNNOOPPSSIISS
     ooppeennssssll ccoommmmaanndd [_c_o_m_m_a_n_d___o_p_t_s] [_c_o_m_m_a_n_d___a_r_g_s]

     ooppeennssssll lliisstt--ssttaannddaarrdd--ccoommmmaannddss | lliisstt--mmeessssaaggee--ddiiggeesstt--ccoommmmaannddss |
             lliisstt--cciipphheerr--ccoommmmaannddss | lliisstt--cciipphheerr--aallggoorriitthhmmss |
             lliisstt--mmeessssaaggee--ddiiggeesstt--aallggoorriitthhmmss | lliisstt--ppuubblliicc--kkeeyy--aallggoorriitthhmmss

     ooppeennssssll nnoo--_c_o_m_m_a_n_d

DDEESSCCRRIIPPTTIIOONN
     OOppeennSSSSLL is a cryptography toolkit implementing the Transport Layer
     Security (TLS v1) network protocol, as well as related cryptography
     standards.

     The ooppeennssssll program is a command line tool for using the various
     cryptography functions of ooppeennssssll's crypto library from the shell.

     The pseudo-commands lliisstt--ssttaannddaarrdd--ccoommmmaannddss, lliisstt--mmeessssaaggee--ddiiggeesstt--ccoommmmaannddss,
     and lliisstt--cciipphheerr--ccoommmmaannddss output a list (one entry per line) of the names
     of all standard commands, message digest commands, or cipher commands,
     respectively, that are available in the present ooppeennssssll utility.

     The pseudo-commands lliisstt--cciipphheerr--aallggoorriitthhmmss and
     lliisstt--mmeessssaaggee--ddiiggeesstt--aallggoorriitthhmmss list all cipher and message digest names,
     one entry per line.  Aliases are listed as:

           from => to

     The pseudo-command lliisstt--ppuubblliicc--kkeeyy--aallggoorriitthhmmss lists all supported public
     key algorithms.

     The pseudo-command nnoo--_c_o_m_m_a_n_d tests whether a command of the specified
     name is available.  If _c_o_m_m_a_n_d does not exist, it returns 0 and prints
     nnoo--_c_o_m_m_a_n_d; otherwise it returns 1 and prints _c_o_m_m_a_n_d.  In both cases,
     the output goes to stdout and nothing is printed to stderr.  Additional
     command line arguments are always ignored.  Since for each cipher there
     is a command of the same name, this provides an easy way for shell
     scripts to test for the availability of ciphers in the ooppeennssssll program.

     NNoottee: nnoo--_c_o_m_m_a_n_d is not able to detect pseudo-commands such as qquuiitt,
     lliisstt--_._._.--ccoommmmaannddss, or nnoo--_c_o_m_m_a_n_d itself.

AASSNN11PPAARRSSEE
     ooppeennssssll aassnn11ppaarrssee [--ii] [--ddlliimmiitt _n_u_m_b_e_r] [--dduummpp] [--ggeennccoonnff _f_i_l_e]
                       [--ggeennssttrr _s_t_r] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm | ttxxtt]
                       [--lleennggtthh _n_u_m_b_e_r] [--nnoooouutt] [--ooffffsseett _n_u_m_b_e_r] [--ooiidd _f_i_l_e]
                       [--oouutt _f_i_l_e] [--ssttrrppaarrssee _o_f_f_s_e_t]

     The aassnn11ppaarrssee command is a diagnostic utility that can parse ASN.1
     structures.  It can also be used to extract data from ASN.1 formatted
     data.

     The options are as follows:

     --ddlliimmiitt _n_u_m_b_e_r
             Dump the first _n_u_m_b_e_r bytes of unknown data in hex form.

     --dduummpp   Dump unknown data in hex form.

     --ggeennccoonnff _f_i_l_e, --ggeennssttrr _s_t_r
             Generate encoded data based on string _s_t_r, file _f_i_l_e, or both,
             using the format described in ASN1_generate_nconf(3).  If only
             _f_i_l_e is present then the string is obtained from the default
             section using the name ``asn1''.  The encoded data is passed
             through the ASN1 parser and printed out as though it came from a
             file; the contents can thus be examined and written to a file
             using the --oouutt option.

     --ii      Indent the output according to the "depth" of the structures.

     --iinn _f_i_l_e
             The input file; the default is standard input.

     --iinnffoorrmm ddeerr | ppeemm | ttxxtt
             The input format.

     --lleennggtthh _n_u_m_b_e_r
             Number of bytes to parse; the default is until end of file.

     --nnoooouutt  Don't output the parsed version of the input file.

     --ooffffsseett _n_u_m_b_e_r
             Starting offset to begin parsing; the default is start of file.

     --ooiidd _f_i_l_e
             A file containing additional object identifiers (OIDs).  If an
             OID (object identifier) is not part of ooppeennssssll's internal table
             it will be represented in numerical form (for example 1.2.3.4).

             Each line consists of three columns: the first column is the OID
             in numerical format and should be followed by whitespace.  The
             second column is the "short name", which is a single word
             followed by whitespace.  The final column is the rest of the line
             and is the "long name".  aassnn11ppaarrssee displays the long name.

     --oouutt _f_i_l_e
             The DER-encoded output file; the default is no encoded output
             (useful when combined with --ssttrrppaarrssee).

     --ssttrrppaarrssee _o_f_f_s_e_t
             Parse the content octets of the ASN.1 object starting at _o_f_f_s_e_t.
             This option can be used multiple times to "drill down" into a
             nested structure.

CCAA
     ooppeennssssll ccaa [--bbaattcchh] [--cceerrtt _f_i_l_e] [--ccoonnffiigg _f_i_l_e] [--ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e]
                [--ccrrll__ccoommpprroommiissee _t_i_m_e] [--ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n]
                [--ccrrll__rreeaassoonn _r_e_a_s_o_n] [--ccrrllddaayyss _d_a_y_s] [--ccrrlleexxttss _s_e_c_t_i_o_n]
                [--ccrrllhhoouurrss _h_o_u_r_s] [--ddaayyss _a_r_g] [--eennddddaattee _d_a_t_e]
                [--eexxtteennssiioonnss _s_e_c_t_i_o_n] [--eexxttffiillee _s_e_c_t_i_o_n] [--ggeennccrrll] [--iinn _f_i_l_e]
                [--iinnffiilleess] [--kkeeyy _k_e_y_f_i_l_e] [--kkeeyyffiillee _a_r_g] [--kkeeyyffoorrmm _P_E_M]
                [--mmdd _a_r_g] [--mmssiiee__hhaacckk] [--nnaammee _s_e_c_t_i_o_n] [--nnooeemmaaiillDDNN] [--nnootteexxtt]
                [--oouutt _f_i_l_e] [--oouuttddiirr _d_i_r] [--ppaassssiinn _a_r_g] [--ppoolliiccyy _a_r_g]
                [--pprreesseerrvveeDDNN] [--rreevvookkee _f_i_l_e] [--ssppkkaacc _f_i_l_e] [--ssss__cceerrtt _f_i_l_e]
                [--ssttaarrttddaattee _d_a_t_e] [--ssttaattuuss _s_e_r_i_a_l] [--ssuubbjj _a_r_g] [--uuppddaatteeddbb]
                [--vveerrbboossee]

     The ccaa command is a minimal certificate authority (CA) application.  It
     can be used to sign certificate requests in a variety of forms and
     generate certificate revocation lists (CRLs).  It also maintains a text
     database of issued certificates and their status.

     The options relevant to CAs are as follows:

     --bbaattcchh
           This sets the batch mode.  In this mode no questions will be asked
           and all certificates will be certified automatically.

     --cceerrtt _f_i_l_e
           The CA certificate file.

     --ccoonnffiigg _f_i_l_e
           Specifies the configuration file to use.

     --ddaayyss _a_r_g
           The number of days to certify the certificate for.

     --eennddddaattee _d_a_t_e
           This allows the expiry date to be explicitly set.  The format of
           the date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure).

     --eexxtteennssiioonnss _s_e_c_t_i_o_n
           The section of the configuration file containing certificate
           extensions to be added when a certificate is issued (defaults to
           xx550099__eexxtteennssiioonnss unless the --eexxttffiillee option is used).  If no
           extension section is present, a V1 certificate is created.  If the
           extension section is present (even if it is empty), then a V3
           certificate is created.

     --eexxttffiillee _f_i_l_e
           An additional configuration _f_i_l_e to read certificate extensions
           from (using the default section unless the --eexxtteennssiioonnss option is
           also used).

     --iinn _f_i_l_e
           An input _f_i_l_e containing a single certificate request to be signed
           by the CA.

     --iinnffiilleess
           If present, this should be the last option; all subsequent
           arguments are assumed to be the names of files containing
           certificate requests.

     --kkeeyy _k_e_y_f_i_l_e
           The password used to encrypt the private key.  Since on some
           systems the command line arguments are visible, this option should
           be used with caution.

     --kkeeyyffiillee _f_i_l_e
           The private key to sign requests with.

     --kkeeyyffoorrmm _P_E_M
           Private key file format.

     --mmdd _a_l_g
           The message digest to use.  Possible values include _m_d_5 and _s_h_a_1.
           This option also applies to CRLs.

     --mmssiiee__hhaacckk
           This is a legacy option to make ccaa work with very old versions of
           the IE certificate enrollment control "certenr3".  It used
           UniversalStrings for almost everything.  Since the old control has
           various security bugs, its use is strongly discouraged.  The newer
           control "Xenroll" does not need this option.

     --nnaammee _s_e_c_t_i_o_n
           Specifies the configuration file _s_e_c_t_i_o_n to use (overrides
           ddeeffaauulltt__ccaa in the ccaa section).

     --nnooeemmaaiillDDNN
           The DN of a certificate can contain the EMAIL field if present in
           the request DN, however it is good policy just having the email set
           into the aallttNNaammee extension of the certificate.  When this option is
           set, the EMAIL field is removed from the certificate's subject and
           set only in the, eventually present, extensions.  The _e_m_a_i_l___i_n___d_n
           keyword can be used in the configuration file to enable this
           behaviour.

     --nnootteexxtt
           Don't output the text form of a certificate to the output file.

     --oouutt _f_i_l_e
           The output file to output certificates to.  The default is standard
           output.  The certificate details will also be printed out to this
           file.

     --oouuttddiirr _d_i_r_e_c_t_o_r_y
           The _d_i_r_e_c_t_o_r_y to output certificates to.  The certificate will be
           written to a file consisting of the serial number in hex with
           ".pem" appended.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppoolliiccyy _a_r_g
           This option defines the CA "policy" to use.  The policy section in
           the configuration file consists of a set of variables corresponding
           to certificate DN fields.  The values may be one of "match" (the
           value must match the same field in the CA certificate), "supplied"
           (the value must be present), or "optional" (the value may be
           present).  Any fields not mentioned in the policy section are
           silently deleted, unless the --pprreesseerrvveeDDNN option is set, but this
           can be regarded more of a quirk than intended behaviour.

     --pprreesseerrvveeDDNN
           Normally, the DN order of a certificate is the same as the order of
           the fields in the relevant policy section.  When this option is
           set, the order is the same as the request.  This is largely for
           compatibility with the older IE enrollment control which would only
           accept certificates if their DNs matched the order of the request.
           This is not needed for Xenroll.

     --ssppkkaacc _f_i_l_e
           A file containing a single Netscape signed public key and
           challenge, and additional field values to be signed by the CA.
           This will usually come from the KEYGEN tag in an HTML form to
           create a new private key.  It is, however, possible to create
           SPKACs using the ssppkkaacc utility.

           The file should contain the variable SPKAC set to the value of the
           SPKAC and also the required DN components as name value pairs.  If
           it's necessary to include the same component twice, then it can be
           preceded by a number and a `.'.

     --ssss__cceerrtt _f_i_l_e
           A single self-signed certificate to be signed by the CA.

     --ssttaarrttddaattee _d_a_t_e
           This allows the start date to be explicitly set.  The format of the
           date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure).

     --ssttaattuuss _s_e_r_i_a_l
           Show the status of the certificate with serial number _s_e_r_i_a_l.

     --uuppddaatteeddbb
           Update database for expired certificates.

     --vveerrbboossee
           This prints extra details about the operations being performed.

     The options relevant to CRLs are as follows:

     --ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e
           This is the same as --ccrrll__ccoommpprroommiissee, except the revocation reason
           is set to CACompromise.

     --ccrrll__ccoommpprroommiissee _t_i_m_e
           This sets the revocation reason to keyCompromise and the compromise
           time to _t_i_m_e.  _t_i_m_e should be in GeneralizedTime format, i.e.
           YYYYMMDDHHMMSSZ.

     --ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n
           This sets the CRL revocation reason code to certificateHold and the
           hold instruction to _i_n_s_t_r_u_c_t_i_o_n which must be an OID.  Although any
           OID can be used, only holdInstructionNone (the use of which is
           discouraged by RFC 2459), holdInstructionCallIssuer or
           holdInstructionReject will normally be used.

     --ccrrll__rreeaassoonn _r_e_a_s_o_n
           Revocation reason, where _r_e_a_s_o_n is one of: unspecified,
           keyCompromise, CACompromise, affiliationChanged, superseded,
           cessationOfOperation, certificateHold or removeFromCRL.  The
           matching of _r_e_a_s_o_n is case insensitive.  Setting any revocation
           reason will make the CRL v2.  In practice, removeFromCRL is not
           particularly useful because it is only used in delta CRLs which are
           not currently implemented.

     --ccrrllddaayyss _n_u_m
           The number of days before the next CRL is due.  This is the days
           from now to place in the CRL nneexxttUUppddaattee field.

     --ccrrlleexxttss _s_e_c_t_i_o_n
           The _s_e_c_t_i_o_n of the configuration file containing CRL extensions to
           include.  If no CRL extension section is present then a V1 CRL is
           created; if the CRL extension section is present (even if it is
           empty) then a V2 CRL is created.  The CRL extensions specified are
           CRL extensions and _n_o_t CRL entry extensions.  It should be noted
           that some software (for example Netscape) can't handle V2 CRLs.

     --ccrrllhhoouurrss _n_u_m
           The number of hours before the next CRL is due.

     --ggeennccrrll
           This option generates a CRL based on information in the index file.

     --rreevvookkee _f_i_l_e
           A _f_i_l_e containing a certificate to revoke.

     --ssuubbjj _a_r_g
           Supersedes the subject name given in the request.  The _a_r_g must be
           formatted as _/_t_y_p_e_0_=_v_a_l_u_e_0_/_t_y_p_e_1_=_v_a_l_u_e_1_/_t_y_p_e_2_=_._._.; characters may
           be escaped by `\' (backslash), no spaces are skipped.

     Many of the options can be set in the ccaa section of the configuration
     file (or in the default section of the configuration file), specified
     using ddeeffaauulltt__ccaa or --nnaammee.  The options pprreesseerrvvee and mmssiiee__hhaacckk are read
     directly from the ccaa section.

     Many of the configuration file options are identical to command line
     options.  Where the option is present in the configuration file and the
     command line, the command line value is used.  Where an option is
     described as mandatory, then it must be present in the configuration file
     or the command line equivalent (if any) used.

     cceerrttiiffiiccaattee
           The same as --cceerrtt.  It gives the file containing the CA
           certificate.  Mandatory.

     ccooppyy__eexxtteennssiioonnss
           Determines how extensions in certificate requests should be
           handled.  If set to nnoonnee or this option is not present, then
           extensions are ignored and not copied to the certificate.  If set
           to ccooppyy, then any extensions present in the request that are not
           already present are copied to the certificate.  If set to ccooppyyaallll,
           then all extensions in the request are copied to the certificate:
           if the extension is already present in the certificate it is
           deleted first.

           The ccooppyy__eexxtteennssiioonnss option should be used with caution.  If care is
           not taken, it can be a security risk.  For example, if a
           certificate request contains a bbaassiiccCCoonnssttrraaiinnttss extension with
           CA:TRUE and the ccooppyy__eexxtteennssiioonnss value is set to ccooppyyaallll and the
           user does not spot this when the certificate is displayed, then
           this will hand the requestor a valid CA certificate.

           This situation can be avoided by setting ccooppyy__eexxtteennssiioonnss to ccooppyy
           and including bbaassiiccCCoonnssttrraaiinnttss with CA:FALSE in the configuration
           file.  Then if the request contains a bbaassiiccCCoonnssttrraaiinnttss extension,
           it will be ignored.

           The main use of this option is to allow a certificate request to
           supply values for certain extensions such as ssuubbjjeeccttAAllttNNaammee.

     ccrrll__eexxtteennssiioonnss
           The same as --ccrrlleexxttss.

     ccrrllnnuummbbeerr
           A text file containing the next CRL number to use in hex.  The CRL
           number will be inserted in the CRLs only if this file exists.  If
           this file is present, it must contain a valid CRL number.

     ddaattaabbaassee
           The text database file to use.  Mandatory.  This file must be
           present, though initially it will be empty.

     ddeeffaauulltt__ccrrll__hhoouurrss, ddeeffaauulltt__ccrrll__ddaayyss
           The same as the --ccrrllhhoouurrss and --ccrrllddaayyss options.  These will only be
           used if neither command line option is present.  At least one of
           these must be present to generate a CRL.

     ddeeffaauulltt__ddaayyss
           The same as the --ddaayyss option.  The number of days to certify a
           certificate for.

     ddeeffaauulltt__eennddddaattee
           The same as the --eennddddaattee option.  Either this option or
           ddeeffaauulltt__ddaayyss (or the command line equivalents) must be present.

     ddeeffaauulltt__mmdd
           The same as the --mmdd option.  The message digest to use.  Mandatory.

     ddeeffaauulltt__ssttaarrttddaattee
           The same as the --ssttaarrttddaattee option.  The start date to certify a
           certificate for.  If not set, the current time is used.

     eemmaaiill__iinn__ddnn
           The same as --nnooeemmaaiillDDNN.  If the EMAIL field is to be removed from
           the DN of the certificate, simply set this to "no".  If not
           present, the default is to allow for the EMAIL field in the
           certificate's DN.

     mmssiiee__hhaacckk
           The same as --mmssiiee__hhaacckk.

     nnaammee__oopptt, cceerrtt__oopptt
           These options allow the format used to display the certificate
           details when asking the user to confirm signing.  All the options
           supported by the xx550099 utilities' --nnaammeeoopptt and --cceerrttoopptt switches can
           be used here, except that nnoo__ssiiggnnaammee and nnoo__ssiiggdduummpp are permanently
           set and cannot be disabled (this is because the certificate
           signature cannot be displayed because the certificate has not been
           signed at this point).

           For convenience, the value ccaa__ddeeffaauulltt is accepted by both to
           produce a reasonable output.

           If neither option is present, the format used in earlier versions
           of ooppeennssssll is used.  Use of the old format is _s_t_r_o_n_g_l_y discouraged
           because it only displays fields mentioned in the ppoolliiccyy section,
           mishandles multicharacter string types and does not display
           extensions.

     nneeww__cceerrttss__ddiirr
           The same as the --oouuttddiirr command line option.  It specifies the
           directory where new certificates will be placed.  Mandatory.

     ooiidd__ffiillee
           This specifies a file containing additional object identifiers.
           Each line of the file should consist of the numerical form of the
           object identifier followed by whitespace, then the short name
           followed by whitespace and finally the long name.

     ooiidd__sseeccttiioonn
           This specifies a section in the configuration file containing extra
           object identifiers.  Each line should consist of the short name of
           the object identifier followed by `=' and the numerical form.  The
           short and long names are the same when this option is used.

     ppoolliiccyy
           The same as --ppoolliiccyy.  Mandatory.

     pprreesseerrvvee
           The same as --pprreesseerrvveeDDNN.

     pprriivvaattee__kkeeyy
           Same as the --kkeeyyffiillee option.  The file containing the CA private
           key.  Mandatory.

     sseerriiaall
           A text file containing the next serial number to use in hex.
           Mandatory.  This file must be present and contain a valid serial
           number.

     uunniiqquuee__ssuubbjjeecctt
           If the value yyeess is given, the valid certificate entries in the
           database must have unique subjects.  If the value nnoo is given,
           several valid certificate entries may have the exact same subject.
           The default value is yyeess.

     xx550099__eexxtteennssiioonnss
           The same as --eexxtteennssiioonnss.

CCIIPPHHEERRSS
     ooppeennssssll cciipphheerrss [--hhVVvv] [--ttllss11] [_c_i_p_h_e_r_l_i_s_t]

     The cciipphheerrss command converts ooppeennssssll cipher lists into ordered SSL cipher
     preference lists.  It can be used as a test tool to determine the
     appropriate cipherlist.

     The options are as follows:

     --hh, --??  Print a brief usage message.

     --ttllss11   Only include TLS v1 ciphers.

     --VV      Verbose.  List ciphers with a complete description of protocol
             version, key exchange, authentication, encryption and mac
             algorithms, any key size restrictions, and cipher suite codes
             (hex format).

     --vv      Like --VV, but without cipher suite codes.

     _c_i_p_h_e_r_l_i_s_t
             A cipher list to convert to a cipher preference list.  If it is
             not included, the default cipher list will be used.

             The cipher list consists of one or more cipher strings separated
             by colons.  Commas or spaces are also acceptable separators, but
             colons are normally used.

             The actual cipher string can take several different forms:

             It can consist of a single cipher suite, such as RC4-SHA.

             It can represent a list of cipher suites containing a certain
             algorithm, or cipher suites of a certain type.  For example SHA1
             represents all cipher suites using the digest algorithm SHA1.

             Lists of cipher suites can be combined in a single cipher string
             using the `+' character (logical AND operation).  For example,
             SHA1+DES represents all cipher suites containing the SHA1 and DES
             algorithms.

             Each cipher string can be optionally preceded by the characters
             `!', `-', or `+'.  If `!' is used, then the ciphers are
             permanently deleted from the list.  The ciphers deleted can never
             reappear in the list even if they are explicitly stated.  If `-'
             is used, then the ciphers are deleted from the list, but some or
             all of the ciphers can be added again by later options.  If `+'
             is used, then the ciphers are moved to the end of the list.  This
             option doesn't add any new ciphers, it just moves matching
             existing ones.

             If none of these characters is present, the string is just
             interpreted as a list of ciphers to be appended to the current
             preference list.  If the list includes any ciphers already
             present, they will be ignored; that is, they will not be moved to
             the end of the list.

             Additionally, the cipher string @@SSTTRREENNGGTTHH can be used at any
             point to sort the current cipher list in order of encryption
             algorithm key length.

     The following is a list of all permitted cipher strings and their
     meanings.

     DDEEFFAAUULLTT
           The default cipher list.  This is determined at compile time and is
           currently AALLLL::!!aaNNUULLLL::!!eeNNUULLLL::!!SSSSLLvv22.  This must be the first cipher
           string specified.

     CCOOMMPPLLEEMMEENNTTOOFFDDEEFFAAUULLTT
           The ciphers included in AALLLL, but not enabled by default.  Currently
           this is AADDHH.  Note that this rule does not cover eeNNUULLLL, which is
           not included by AALLLL (use CCOOMMPPLLEEMMEENNTTOOFFAALLLL if necessary).

     AALLLL   All cipher suites except the eeNNUULLLL ciphers, which must be
           explicitly enabled.

     CCOOMMPPLLEEMMEENNTTOOFFAALLLL
           The cipher suites not enabled by AALLLL, currently being eeNNUULLLL.

     HHIIGGHH  "High" encryption cipher suites.  This currently means those with
           key lengths larger than 128 bits.

     MMEEDDIIUUMM
           "Medium" encryption cipher suites, currently those using 128-bit
           encryption.

     LLOOWW   "Low" encryption cipher suites, currently those using 64- or 56-bit
           encryption algorithms.

     eeNNUULLLL, NNUULLLL
           The "NULL" ciphers; that is, those offering no encryption.  Because
           these offer no encryption at all and are a security risk, they are
           disabled unless explicitly included.

     aaNNUULLLL
           The cipher suites offering no authentication.  This is currently
           the anonymous DH algorithms.  These cipher suites are vulnerable to
           a "man in the middle" attack, so their use is normally discouraged.

     kkRRSSAA, RRSSAA
           Cipher suites using RSA key exchange.

     kkEEDDHH  Cipher suites using ephemeral DH key agreement.

     aaRRSSAA  Cipher suites using RSA authentication, i.e. the certificates carry
           RSA keys.

     aaDDSSSS, DDSSSS
           Cipher suites using DSS authentication, i.e. the certificates carry
           DSS keys.

     TTLLSSvv11
           TLS v1.0 cipher suites.

     DDHH    Cipher suites using DH, including anonymous DH.

     AADDHH   Anonymous DH cipher suites.

     AAEESS   Cipher suites using AES.

     33DDEESS  Cipher suites using triple DES.

     DDEESS   Cipher suites using DES (not triple DES).

     RRCC44   Cipher suites using RC4.

     CCAAMMEELLLLIIAA
           Cipher suites using Camellia.

     CCHHAACCHHAA2200
           Cipher suites using ChaCha20.

     IIDDEEAA  Cipher suites using IDEA.

     MMDD55   Cipher suites using MD5.

     SSHHAA11, SSHHAA
           Cipher suites using SHA1.

CCRRLL
     ooppeennssssll ccrrll [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r] [--ffiinnggeerrpprriinntt] [--hhaasshh]
                 [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--iissssuueerr] [--llaassttuuppddaattee]
                 [--nneexxttuuppddaattee] [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm]
                 [--tteexxtt]

     The ccrrll command processes CRL files in DER or PEM format.  The PEM CRL
     format uses the header and footer lines:

           -----BEGIN X509 CRL-----
           -----END X509 CRL-----

     The options are as follows:

     --CCAAffiillee _f_i_l_e
             Verify the signature on a CRL by looking up the issuing
             certificate in _f_i_l_e.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             Verify the signature on a CRL by looking up the issuing
             certificate in _d_i_r.  This directory must be a standard
             certificate directory, i.e. a hash of each subject name (using
             xx550099 --hhaasshh) should be linked to each certificate.

     --ffiinnggeerrpprriinntt
             Print the CRL fingerprint.

     --hhaasshh   Output a hash of the issuer name.  This can be used to look up
             CRLs in a directory by issuer name.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --iissssuueerr
             Output the issuer name.

     --llaassttuuppddaattee
             Output the llaassttUUppddaattee field.

     --nneexxttuuppddaattee
             Output the nneexxttUUppddaattee field.

     --nnoooouutt  Don't output the encoded version of the CRL.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --tteexxtt   Print out the CRL in text form.

CCRRLL22PPKKCCSS77
     ooppeennssssll ccrrll22ppkkccss77 [--cceerrttffiillee _f_i_l_e] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm]
                       [--nnooccrrll] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm]

     The ccrrll22ppkkccss77 command takes an optional CRL and one or more certificates
     and converts them into a PKCS#7 degenerate "certificates only" structure.

     The options are as follows:

     --cceerrttffiillee _f_i_l_e
             Add the certificates in PEM _f_i_l_e to the PKCS#7 structure.  This
             option can be used more than once to read certificates from
             multiple files.

     --iinn _f_i_l_e
             Read the CRL from _f_i_l_e, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             Specify the CRL input format.

     --nnooccrrll  Normally, a CRL is included in the output file.  With this
             option, no CRL is included in the output file and a CRL is not
             read from the input file.

     --oouutt _f_i_l_e
             Write the PKCS#7 structure to _f_i_l_e, or standard output if not
             specified.

     --oouuttffoorrmm ddeerr | ppeemm
             Specify the PKCS#7 structure output format.

DDGGSSTT
     ooppeennssssll ddggsstt [--ggoosstt--mmaacc | --ssttrreeeebboogg225566 | --ssttrreeeebboogg551122 | --mmdd__ggoosstt9944 |
                  --mmdd44 | --mmdd55 | --rriippeemmdd116600 | --sshhaa11 |
                  --sshhaa222244 | --sshhaa225566 | --sshhaa338844 | --sshhaa551122 | --wwhhiirrllppooooll]
                  [--bbiinnaarryy] [--ccdd] [--hheexx] [--hhmmaacc _k_e_y] [--kkeeyyffoorrmm _P_E_M]
                  [--mmaacc _a_l_g_o_r_i_t_h_m] [--mmaaccoopptt _n_m:_v] [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g]
                  [--pprrvveerriiffyy _f_i_l_e] [--ssiiggnn _f_i_l_e] [--ssiiggnnaattuurree _f_i_l_e]
                  [--ssiiggoopptt _n_m:_v] [--vveerriiffyy _f_i_l_e] [_f_i_l_e _._._.]

     ooppeennssssll ggoosstt--mmaacc | ssttrreeeebboogg225566 | ssttrreeeebboogg551122 | mmdd__ggoosstt9944 | mmdd44 | mmdd55 |
     rriippeemmdd116600 | sshhaa11 | sshhaa222244 | sshhaa225566 | sshhaa338844 | sshhaa551122 | wwhhiirrllppooooll [--cc]
     [--dd] [_f_i_l_e _._._.]

     The digest functions output the message digest of a supplied _f_i_l_e or
     _f_i_l_e_s in hexadecimal form.  They can also be used for digital signing and
     verification.

     The options are as follows:

     --bbiinnaarryy
             Output the digest or signature in binary form.

     --cc      Print out the digest in two-digit groups separated by colons;
             only relevant if _h_e_x format output is used.

     --dd      Print out BIO debugging information.

     --hheexx    Digest is to be output as a hex dump.  This is the default case
             for a "normal" digest as opposed to a digital signature.

     --hhmmaacc _k_e_y
             Create a hashed MAC using _k_e_y.

     --kkeeyyffoorrmm _P_E_M
             Specifies the key format to sign the digest with.

     --mmaacc _a_l_g_o_r_i_t_h_m
             Create a keyed Message Authentication Code (MAC).  The most
             popular MAC algorithm is HMAC (hash-based MAC), but there are
             other MAC algorithms which are not based on hash.  MAC keys and
             other options should be set via the --mmaaccoopptt parameter.

     --mmaaccoopptt _n_m:_v
             Passes options to the MAC algorithm, specified by --mmaacc.  The
             following options are supported by HMAC:

             _k_e_y:_s_t_r_i_n_g
                     Specifies the MAC key as an alphanumeric string (use if
                     the key contain printable characters only).  String
                     length must conform to any restrictions of the MAC
                     algorithm.

             _h_e_x_k_e_y:_s_t_r_i_n_g
                     Specifies the MAC key in hexadecimal form (two hex digits
                     per byte).  Key length must conform to any restrictions
                     of the MAC algorithm.

     --oouutt _f_i_l_e
             The file to output to, or standard output by default.

     --ppaassssiinn _a_r_g
             The key password source.

     --pprrvveerriiffyy _f_i_l_e
             Verify the signature using the private key in _f_i_l_e.  The output
             is either "Verification OK" or "Verification Failure".

     --ssiiggnn _f_i_l_e
             Digitally sign the digest using the private key in _f_i_l_e.

     --ssiiggnnaattuurree _f_i_l_e
             The actual signature to verify.

     --ssiiggoopptt _n_m:_v
             Pass options to the signature algorithm during sign or verify
             operations.  The names and values of these options are algorithm-
             specific.

     --vveerriiffyy _f_i_l_e
             Verify the signature using the public key in _f_i_l_e.  The output is
             either "Verification OK" or "Verification Failure".

     _f_i_l_e _._._.
             File or files to digest.  If no files are specified then standard
             input is used.

DDGGSSTT NNOOTTEESS
     The digest of choice for all new applications is SHA1.  Other digests
     are, however, still widely used.

     If you wish to sign or verify data using the DSA algorithm, the dss1
     digest must be used.

     A source of random numbers is required for certain signing algorithms, in
     particular DSA.

     The signing and verify options should only be used if a single file is
     being signed or verified.

DDHH
     Diffie-Hellman Parameter Management.  The ddhh command has been replaced by
     ddhhppaarraamm.  See _D_H_P_A_R_A_M below.

DDHHPPAARRAAMM
     ooppeennssssll ddhhppaarraamm [--22 | --55] [--CC] [--cchheecckk] [--ddssaappaarraamm] [--iinn _f_i_l_e]
                     [--iinnffoorrmm _D_E_R | _P_E_M] [--nnoooouutt] [--oouutt _f_i_l_e]
                     [--oouuttffoorrmm _D_E_R | _P_E_M] [--tteexxtt] [_n_u_m_b_i_t_s]

     The ddhhppaarraamm command is used to manipulate DH parameter files.

     The options are as follows:

     --22, --55  The generator to use, either 2 or 5.  2 is the default.  If
             present, the input file is ignored and parameters are generated
             instead.

     --CC      This option converts the parameters into C code.  The parameters
             can then be loaded by calling the ggeett__ddhh_n_u_m_b_i_t_s() function.

     --cchheecckk  Check the DH parameters.

     --ddssaappaarraamm
             If this option is used, DSA rather than DH parameters are read or
             created; they are converted to DH format.  Otherwise, "strong"
             primes (such that (p-1)/2 is also prime) will be used for DH
             parameter generation.

             DH parameter generation with the --ddssaappaarraamm option is much faster,
             and the recommended exponent length is shorter, which makes DH
             key exchange more efficient.  Beware that with such DSA-style DH
             parameters, a fresh DH key should be created for each use to
             avoid small-subgroup attacks that may be possible otherwise.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read parameters from, or
             standard input if this option is not specified.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  The argument _D_E_R uses an ASN1
             DER-encoded form compatible with the PKCS#3 DHparameter
             structure.  The _P_E_M form is the default format: it consists of
             the DER format base64-encoded with additional header and footer
             lines.

     --nnoooouutt  This option inhibits the output of the encoded version of the
             parameters.

     _n_u_m_b_i_t_s
             This argument specifies that a parameter set should be generated
             of size _n_u_m_b_i_t_s.  It must be the last option.  If not present, a
             value of 2048 is used.  If this value is present, the input file
             is ignored and parameters are generated instead.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write parameters to.  Standard
             output is used if this option is not present.  The output
             filename should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --tteexxtt   This option prints out the DH parameters in human readable form.

DDHHPPAARRAAMM WWAARRNNIINNGGSS
     The program ddhhppaarraamm combines the functionality of the programs ddhh and
     ggeennddhh in previous versions of OOppeennSSSSLL and SSSSLLeeaayy.  The ddhh and ggeennddhh
     programs are retained for now, but may have different purposes in future
     versions of OOppeennSSSSLL.

DDHHPPAARRAAMM NNOOTTEESS
     PEM format DH parameters use the header and footer lines:

           -----BEGIN DH PARAMETERS-----
           -----END DH PARAMETERS-----

     OOppeennSSSSLL currently only supports the older PKCS#3 DH, not the newer X9.42
     DH.

     This program manipulates DH parameters not keys.

DDHHPPAARRAAMM BBUUGGSS
     There should be a way to generate and manipulate DH keys.

DDHHPPAARRAAMM HHIISSTTOORRYY
     The ddhhppaarraamm command was added in OOppeennSSSSLL 0.9.5.  The --ddssaappaarraamm option was
     added in OOppeennSSSSLL 0.9.6.

DDSSAA
     ooppeennssssll ddssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--iinn _f_i_l_e]
                 [--iinnffoorrmm _D_E_R | _P_E_M] [--mmoodduulluuss] [--nnoooouutt] [--oouutt _f_i_l_e]
                 [--oouuttffoorrmm _D_E_R | _P_E_M] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn]
                 [--ppuubboouutt] [--tteexxtt]

     The ddssaa command processes DSA keys.  They can be converted between
     various forms and their components printed out.

     NNoottee: This command uses the traditional SSSSLLeeaayy compatible format for
     private key encryption: newer applications should use the more secure
     PKCS#8 format using the ppkkccss88 command.

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options is specified,
             the key is written in plain text.  This means that using the ddssaa
             utility to read in an encrypted key with no encryption option can
             be used to remove the pass phrase from a key, or by setting the
             encryption options it can be use to add or change the pass
             phrase.  These options can only be used with PEM format output
             files.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read a key from, or standard
             input if this option is not specified.  If the key is encrypted,
             a pass phrase will be prompted for.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  The _D_E_R argument with a private
             key uses an ASN1 DER-encoded form of an ASN.1 SEQUENCE consisting
             of the values of version (currently zero), P, Q, G, and the
             public and private key components, respectively, as ASN.1
             INTEGERs.  When used with a public key it uses a
             _S_u_b_j_e_c_t_P_u_b_l_i_c_K_e_y_I_n_f_o structure: it is an error if the key is not
             DSA.

             The _P_E_M form is the default format: it consists of the DER format
             base64-encoded with additional header and footer lines.  In the
             case of a private key, PKCS#8 format is also accepted.

     --mmoodduulluuss
             This option prints out the value of the public key component of
             the key.

     --nnoooouutt  This option prevents output of the encoded version of the key.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write a key to, or standard
             output if not specified.  If any encryption options are set then
             a pass phrase will be prompted for.  The output filename should
             _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  By default, a private key is read from the input file.  With this
             option a public key is read instead.

     --ppuubboouutt
             By default, a private key is output.  With this option a public
             key will be output instead.  This option is automatically set if
             the input is a public key.

     --tteexxtt   Prints out the public/private key components and parameters.

DDSSAA NNOOTTEESS
     The PEM private key format uses the header and footer lines:

           -----BEGIN DSA PRIVATE KEY-----
           -----END DSA PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

DDSSAA EEXXAAMMPPLLEESS
     To remove the pass phrase on a DSA private key:

           $ openssl dsa -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl dsa -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl dsa -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl dsa -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl dsa -in key.pem -pubout -out pubkey.pem

DDSSAAPPAARRAAMM
     ooppeennssssll ddssaappaarraamm [--CC] [--ggeennkkeeyy] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M] [--nnoooouutt]
                      [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M] [--tteexxtt] [_n_u_m_b_i_t_s]

     The ddssaappaarraamm command is used to manipulate or generate DSA parameter
     files.

     The options are as follows:

     --CC      This option converts the parameters into C code.  The parameters
             can then be loaded by calling the ggeett__ddssaa_X_X_X() function.

     --ggeennkkeeyy
             This option will generate a DSA either using the specified or
             generated parameters.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read parameters from, or
             standard input if this option is not specified.  If the _n_u_m_b_i_t_s
             parameter is included, then this option will be ignored.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  The _D_E_R argument uses an ASN1
             DER-encoded form compatible with RFC 2459 (PKIX) DSS-Parms that
             is a SEQUENCE consisting of p, q and g, respectively.  The _P_E_M
             form is the default format: it consists of the DER format
             base64-encoded with additional header and footer lines.

     --nnoooouutt  This option inhibits the output of the encoded version of the
             parameters.

     _n_u_m_b_i_t_s
             This option specifies that a parameter set should be generated of
             size _n_u_m_b_i_t_s.  If this option is included, the input file (if
             any) is ignored.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write parameters to.  Standard
             output is used if this option is not present.  The output
             filename should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --tteexxtt   This option prints out the DSA parameters in human readable form.

DDSSAAPPAARRAAMM NNOOTTEESS
     PEM format DSA parameters use the header and footer lines:

           -----BEGIN DSA PARAMETERS-----
           -----END DSA PARAMETERS-----

     DSA parameter generation is a slow process and as a result the same set
     of DSA parameters is often used to generate several distinct keys.

EECC
     ooppeennssssll eecc [--ccoonnvv__ffoorrmm _a_r_g] [--ddeess] [--ddeess33] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M]
                [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M] [--ppaarraamm__eenncc _a_r_g]
                [--ppaarraamm__oouutt] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt]
                [--tteexxtt]

     The eecc command processes EC keys.  They can be converted between various
     forms and their components printed out.  Note: OOppeennSSSSLL uses the private
     key format specified in ``SEC 1: Elliptic Curve Cryptography''
     (hhttttpp::////wwwwww..sseeccgg..oorrgg//).  To convert an OOppeennSSSSLL EC private key into the
     PKCS#8 private key format use the ppkkccss88 command.

     The options are as follows:

     --ccoonnvv__ffoorrmm _a_r_g
             This specifies how the points on the elliptic curve are converted
             into octet strings.  Possible values are: ccoommpprreesssseedd (the default
             value), uunnccoommpprreesssseedd, and hhyybbrriidd.  For more information regarding
             the point conversion forms please read the X9.62 standard.  Note:
             Due to patent issues the ccoommpprreesssseedd option is disabled by default
             for binary curves and can be enabled by defining the preprocessor
             macro _O_P_E_N_S_S_L___E_C___B_I_N___P_T___C_O_M_P at compile time.

     --ddeess | --ddeess33
             These options encrypt the private key with the DES, triple DES,
             or any other cipher supported by OOppeennSSSSLL before outputting it.  A
             pass phrase is prompted for.  If none of these options is
             specified the key is written in plain text.  This means that
             using the eecc utility to read in an encrypted key with no
             encryption option can be used to remove the pass phrase from a
             key, or by setting the encryption options it can be use to add or
             change the pass phrase.  These options can only be used with PEM
             format output files.

     --iinn _f_i_l_e
             This specifies the input filename to read a key from, or standard
             input if this option is not specified.  If the key is encrypted a
             pass phrase will be prompted for.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  DER with a private key uses an
             ASN.1 DER-encoded SEC1 private key.  When used with a public key
             it uses the SubjectPublicKeyInfo structure as specified in RFC
             3280.  PEM is the default format: it consists of the DER format
             base64 encoded with additional header and footer lines.  In the
             case of a private key PKCS#8 format is also accepted.

     --nnoooouutt  Prevents output of the encoded version of the key.

     --oouutt _f_i_l_e
             Specifies the output filename to write a key to, or standard
             output if none is specified.  If any encryption options are set
             then a pass phrase will be prompted for.  The output filename
             should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format.  The options have the same
             meaning as the --iinnffoorrmm option.

     --ppaarraamm__eenncc _a_r_g
             This specifies how the elliptic curve parameters are encoded.
             Possible value are: nnaammeedd__ccuurrvvee, i.e. the EC parameters are
             specified by an OID; or eexxpplliicciitt, where the EC parameters are
             explicitly given (see RFC 3279 for the definition of the EC
             parameter structures).  The default value is nnaammeedd__ccuurrvvee.  Note:
             the iimmpplliicciittllyyCCAA alternative, as specified in RFC 3279, is
             currently not implemented in OOppeennSSSSLL.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  By default a private key is read from the input file; with this
             option a public key is read instead.

     --ppuubboouutt
             By default a private key is output; with this option a public key
             is output instead.  This option is automatically set if the input
             is a public key.

     --tteexxtt   Prints out the public/private key components and parameters.

EECC NNOOTTEESS
     The PEM private key format uses the header and footer lines:

           -----BEGIN EC PRIVATE KEY-----
           -----END EC PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

EECC EEXXAAMMPPLLEESS
     To encrypt a private key using triple DES:

           $ openssl ec -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl ec -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl ec -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl ec -in key.pem -pubout -out pubkey.pem

     To change the parameter encoding to eexxpplliicciitt:

           $ openssl ec -in key.pem -param_enc explicit -out keyout.pem

     To change the point conversion form to ccoommpprreesssseedd:

           $ openssl ec -in key.pem -conv_form compressed -out keyout.pem

EECC HHIISSTTOORRYY
     The eecc command was first introduced in OOppeennSSSSLL 0.9.8.

EECC AAUUTTHHOORRSS
     Nils Larsch.

EECCPPAARRAAMM
     ooppeennssssll eeccppaarraamm [--CC] [--cchheecckk] [--ccoonnvv__ffoorrmm _a_r_g] [--ggeennkkeeyy] [--iinn _f_i_l_e]
                     [--iinnffoorrmm _D_E_R | _P_E_M] [--lliisstt__ccuurrvveess] [--nnaammee _a_r_g] [--nnoo__sseeeedd]
                     [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M]
                     [--ppaarraamm__eenncc _a_r_g] [--tteexxtt]

     This command is used to manipulate or generate EC parameter files.

     The options are as follows:

     --CC      Convert the EC parameters into C code.  The parameters can then
             be loaded by calling the ggeett__eecc__ggrroouupp__XXXXXX() function.

     --cchheecckk  Validate the elliptic curve parameters.

     --ccoonnvv__ffoorrmm _a_r_g
             Specify how the points on the elliptic curve are converted into
             octet strings.  Possible values are: ccoommpprreesssseedd (the default
             value), uunnccoommpprreesssseedd, and hhyybbrriidd.  For more information regarding
             the point conversion forms please read the X9.62 standard.  Note:
             Due to patent issues the ccoommpprreesssseedd option is disabled by default
             for binary curves and can be enabled by defining the preprocessor
             macro _O_P_E_N_S_S_L___E_C___B_I_N___P_T___C_O_M_P at compile time.

     --ggeennkkeeyy
             Generate an EC private key using the specified parameters.

     --iinn _f_i_l_e
             Specify the input filename to read parameters from or standard
             input if this option is not specified.

     --iinnffoorrmm _D_E_R | _P_E_M
             Specify the input format.  DER uses an ASN.1 DER-encoded form
             compatible with RFC 3279 EcpkParameters.  PEM is the default
             format: it consists of the DER format base64 encoded with
             additional header and footer lines.

     --lliisstt__ccuurrvveess
             Print out a list of all currently implemented EC parameter names
             and exit.

     --nnaammee _a_r_g
             Use the EC parameters with the specified 'short' name.  Use
             --lliisstt__ccuurrvveess to get a list of all currently implemented EC
             parameters.

     --nnoo__sseeeedd
             Inhibit that the 'seed' for the parameter generation is included
             in the ECParameters structure (see RFC 3279).

     --nnoooouutt  Inhibit the output of the encoded version of the parameters.

     --oouutt _f_i_l_e
             Specify the output filename parameters are written to.  Standard
             output is used if this option is not present.  The output
             filename should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             Specify the output format; the parameters have the same meaning
             as the --iinnffoorrmm option.

     --ppaarraamm__eenncc _a_r_g
             This specifies how the elliptic curve parameters are encoded.
             Possible value are: nnaammeedd__ccuurrvvee, i.e. the EC parameters are
             specified by an OID, or eexxpplliicciitt, where the EC parameters are
             explicitly given (see RFC 3279 for the definition of the EC
             parameter structures).  The default value is nnaammeedd__ccuurrvvee.  Note:
             the iimmpplliicciittllyyCCAA alternative, as specified in RFC 3279, is
             currently not implemented in OOppeennSSSSLL.

     --tteexxtt   Print out the EC parameters in human readable form.

EECCPPAARRAAMM NNOOTTEESS
     PEM format EC parameters use the header and footer lines:

           -----BEGIN EC PARAMETERS-----
           -----END EC PARAMETERS-----

     OOppeennSSSSLL is currently not able to generate new groups and therefore
     eeccppaarraamm can only create EC parameters from known (named) curves.

EECCPPAARRAAMM EEXXAAMMPPLLEESS
     To create EC parameters with the group 'prime192v1':

           $ openssl ecparam -out ec_param.pem -name prime192v1

     To create EC parameters with explicit parameters:

           $ openssl ecparam -out ec_param.pem -name prime192v1 \
                   -param_enc explicit

     To validate given EC parameters:

           $ openssl ecparam -in ec_param.pem -check

     To create EC parameters and a private key:

           $ openssl ecparam -out ec_key.pem -name prime192v1 -genkey

     To change the point encoding to 'compressed':

           $ openssl ecparam -in ec_in.pem -out ec_out.pem \
                   -conv_form compressed

     To print out the EC parameters to standard output:

           $ openssl ecparam -in ec_param.pem -noout -text

EECCPPAARRAAMM HHIISSTTOORRYY
     The eeccppaarraamm command was first introduced in OOppeennSSSSLL 0.9.8.

EECCPPAARRAAMM AAUUTTHHOORRSS
     Nils Larsch.

EENNCC
     ooppeennssssll eenncc --cciipphheerrnnaammee [--AAaaddeePPpp] [--bbaassee6644] [--bbuuffssiizzee _n_u_m_b_e_r] [--ddeebbuugg]
                 [--iinn _f_i_l_e] [--iivv _I_V] [--KK _k_e_y] [--kk _p_a_s_s_w_o_r_d] [--kkffiillee _f_i_l_e]
                 [--mmdd _d_i_g_e_s_t] [--nnoonnee] [--nnooppaadd] [--nnoossaalltt] [--oouutt _f_i_l_e]
                 [--ppaassss _a_r_g] [--SS _s_a_l_t] [--ssaalltt]

     The symmetric cipher commands allow data to be encrypted or decrypted
     using various block and stream ciphers using keys based on passwords or
     explicitly provided.  Base64 encoding or decoding can also be performed
     either by itself or in addition to the encryption or decryption.

     The options are as follows:

     --AA      If the --aa option is set, then base64 process the data on one
             line.

     --aa, --bbaassee6644
             Base64 process the data.  This means that if encryption is taking
             place, the data is base64-encoded after encryption.  If
             decryption is set, the input data is base64 decoded before being
             decrypted.

     --bbuuffssiizzee _n_u_m_b_e_r
             Set the buffer size for I/O.

     --dd      Decrypt the input data.

     --ddeebbuugg  Debug the BIOs used for I/O.

     --ee      Encrypt the input data: this is the default.

     --iinn _f_i_l_e
             The input _f_i_l_e; standard input by default.

     --iivv _I_V  The actual _I_V (initialisation vector) to use: this must be
             represented as a string comprised only of hex digits.  When only
             the _k_e_y is specified using the --KK option, the _I_V must explicitly
             be defined.  When a password is being specified using one of the
             other options, the _I_V is generated from this password.

     --KK _k_e_y  The actual _k_e_y to use: this must be represented as a string
             comprised only of hex digits.  If only the key is specified, the
             _I_V must be additionally specified using the --iivv option.  When
             both a _k_e_y and a _p_a_s_s_w_o_r_d are specified, the _k_e_y given with the
             --KK option will be used and the _I_V generated from the password
             will be taken.  It probably does not make much sense to specify
             both _k_e_y and _p_a_s_s_w_o_r_d.

     --kk _p_a_s_s_w_o_r_d
             The _p_a_s_s_w_o_r_d to derive the key from.  This is for compatibility
             with previous versions of OOppeennSSSSLL.  Superseded by the --ppaassss
             option.

     --kkffiillee _f_i_l_e
             Read the password to derive the key from the first line of _f_i_l_e.
             This is for compatibility with previous versions of OOppeennSSSSLL.
             Superseded by the --ppaassss option.

     --mmdd _d_i_g_e_s_t
             Use _d_i_g_e_s_t to create a key from a pass phrase.  _d_i_g_e_s_t may be one
             of ``md5'' or ``sha1''.

     --nnoonnee   Use NULL cipher (no encryption or decryption of input).

     --nnooppaadd  Disable standard block padding.

     --nnoossaalltt
             Don't use a _s_a_l_t in the key derivation routines.  This option
             should _N_E_V_E_R be used unless compatibility with previous versions
             of OOppeennSSSSLL or SSSSLLeeaayy is required.

     --oouutt _f_i_l_e
             The output _f_i_l_e, standard output by default.

     --PP      Print out the _s_a_l_t, _k_e_y, and _I_V used, then immediately exit;
             don't do any encryption or decryption.

     --pp      Print out the _s_a_l_t, _k_e_y, and _I_V used.

     --ppaassss _a_r_g
             The password source.

     --SS _s_a_l_t
             The actual _s_a_l_t to use: this must be represented as a string
             comprised only of hex digits.

     --ssaalltt   Use a _s_a_l_t in the key derivation routines.  This is the default.

EENNCC NNOOTTEESS
     The program can be called either as ooppeennssssll cciipphheerrnnaammee or ooppeennssssll eenncc
     --cciipphheerrnnaammee.

     A password will be prompted for to derive the _k_e_y and _I_V if necessary.

     The --nnoossaalltt option should _N_E_V_E_R be used unless compatibility with
     previous versions of OOppeennSSSSLL or SSSSLLeeaayy is required.

     With the --nnoossaalltt option it is possible to perform efficient dictionary
     attacks on the password and to attack stream cipher encrypted data.  The
     reason for this is that without the salt the same password always
     generates the same encryption key.  When the salt is being used the first
     eight bytes of the encrypted data are reserved for the salt: it is
     generated at random when encrypting a file and read from the encrypted
     file when it is decrypted.

     Some of the ciphers do not have large keys and others have security
     implications if not used correctly.  A beginner is advised to just use a
     strong block cipher in CBC mode such as bf or des3.

     All the block ciphers normally use PKCS#5 padding also known as standard
     block padding: this allows a rudimentary integrity or password check to
     be performed.  However, since the chance of random data passing the test
     is better than 1 in 256, it isn't a very good test.

     If padding is disabled, the input data must be a multiple of the cipher
     block length.

     All RC2 ciphers have the same key and effective key length.

     Blowfish and RC5 algorithms use a 128-bit key.

EENNCC SSUUPPPPOORRTTEEDD CCIIPPHHEERRSS
           aes-[128|192|256]-cbc    128/192/256 bit AES in CBC mode
           aes-[128|192|256]   Alias for aes-[128|192|256]-cbc
           aes-[128|192|256]-cfb    128/192/256 bit AES in 128 bit CFB mode
           aes-[128|192|256]-cfb1   128/192/256 bit AES in 1 bit CFB mode
           aes-[128|192|256]-cfb8   128/192/256 bit AES in 8 bit CFB mode
           aes-[128|192|256]-ecb    128/192/256 bit AES in ECB mode
           aes-[128|192|256]-ofb    128/192/256 bit AES in OFB mode

           base64              Base 64

           bf             Alias for bf-cbc
           bf-cbc              Blowfish in CBC mode
           bf-cfb              Blowfish in CFB mode
           bf-ecb              Blowfish in ECB mode
           bf-ofb              Blowfish in OFB mode

           cast           Alias for cast-cbc
           cast-cbc       CAST in CBC mode
           cast5-cbc      CAST5 in CBC mode
           cast5-cfb      CAST5 in CFB mode
           cast5-ecb      CAST5 in ECB mode
           cast5-ofb      CAST5 in OFB mode

           des            Alias for des-cbc
           des-cbc             DES in CBC mode
           des-cfb             DES in CBC mode
           des-ecb             DES in ECB mode
           des-ofb             DES in OFB mode

           des-ede             Two key triple DES EDE in ECB mode
           des-ede-cbc         Two key triple DES EDE in CBC mode
           des-ede-cfb         Two key triple DES EDE in CFB mode
           des-ede-ofb         Two key triple DES EDE in OFB mode

           des3           Alias for des-ede3-cbc
           des-ede3       Three key triple DES EDE in ECB mode
           des-ede3-cbc        Three key triple DES EDE in CBC mode
           des-ede3-cfb        Three key triple DES EDE CFB mode
           des-ede3-ofb        Three key triple DES EDE in OFB mode

           desx           DESX algorithm

           rc2            Alias for rc2-cbc
           rc2-cbc             128-bit RC2 in CBC mode
           rc2-cfb             128-bit RC2 in CFB mode
           rc2-ecb             128-bit RC2 in ECB mode
           rc2-ofb             128-bit RC2 in OFB mode
           rc2-64-cbc          64-bit RC2 in CBC mode
           rc2-40-cbc          40-bit RC2 in CBC mode

           rc4            128-bit RC4
           rc4-40              40-bit RC4

EENNCC EEXXAAMMPPLLEESS
     Just base64 encode a binary file:

           $ openssl base64 -in file.bin -out file.b64

     Decode the same file:

           $ openssl base64 -d -in file.b64 -out file.bin

     Encrypt a file using triple DES in CBC mode using a prompted password:

           $ openssl des3 -salt -in file.txt -out file.des3

     Decrypt a file using a supplied password:

           $ openssl des3 -d -in file.des3 -out file.txt -k mypassword

     Encrypt a file then base64 encode it (so it can be sent via mail for
     example) using Blowfish in CBC mode:

           $ openssl bf -a -salt -in file.txt -out file.bf

     Base64 decode a file then decrypt it:

           $ openssl bf -d -a -in file.bf -out file.txt

EENNCC BBUUGGSS
     The --AA option when used with large files doesn't work properly.

     There should be an option to allow an iteration count to be included.

     The eenncc program only supports a fixed number of algorithms with certain
     parameters.  Therefore it is not possible to use RC2 with a 76-bit key or
     RC4 with an 84-bit key with this program.

EERRRRSSTTRR
     ooppeennssssll eerrrrssttrr [--ssttaattss] _e_r_r_n_o _._._.

     The eerrrrssttrr command performs error number to error string conversion,
     generating a human-readable string representing the error code _e_r_r_n_o.
     The string is obtained through the ERR_error_string_n(3) function and has
     the following format:

           error:[error code]:[library name]:[function name]:[reason string]

     [error code] is an 8-digit hexadecimal number.  The remaining fields
     [library name], [function name], and [reason string] are all ASCII text.

     The options are as follows:

     --ssttaattss  Print debugging statistics about various aspects of the hash
             table.

EERRRRSSTTRR EEXXAAMMPPLLEESS
     The following error code:

           27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:

     ...can be displayed with:

           $ openssl errstr 2006D080

     ...to produce the error message:

           error:2006D080:BIO routines:BIO_new_file:no such file

GGEENNDDHH
     Generation of Diffie-Hellman Parameters.  Replaced by ddhhppaarraamm.  See
     _D_H_P_A_R_A_M above.

GGEENNDDSSAA
     ooppeennssssll ggeennddssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--oouutt _f_i_l_e]
                    [_p_a_r_a_m_f_i_l_e]

     The ggeennddssaa command generates a DSA private key from a DSA parameter file
     (which will typically be generated by the ooppeennssssll ddssaappaarraamm command).

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options are specified,
             no encryption is used.

     --oouutt _f_i_l_e
             The output _f_i_l_e.  If this argument is not specified, standard
             output is used.

     _p_a_r_a_m_f_i_l_e
             This option specifies the DSA parameter file to use.  The
             parameters in this file determine the size of the private key.
             DSA parameters can be generated and examined using the ooppeennssssll
             ddssaappaarraamm command.

GGEENNDDSSAA NNOOTTEESS
     DSA key generation is little more than random number generation so it is
     much quicker than RSA key generation, for example.

GGEENNPPKKEEYY
     ooppeennssssll ggeennppkkeeyy [--aallggoorriitthhmm _a_l_g] [_c_i_p_h_e_r] [--ggeennppaarraamm] [--oouutt _f_i_l_e]
                     [--oouuttffoorrmm _D_E_R | _P_E_M] [--ppaarraammffiillee _f_i_l_e] [--ppaassss _a_r_g]
                     [--ppkkeeyyoopptt _o_p_t:_v_a_l_u_e] [--tteexxtt]

     The ggeennppkkeeyy command generates private keys.  The use of this program is
     encouraged over the algorithm specific utilities because additional
     algorithm options can be used.

     The options are as follows:

     --aallggoorriitthhmm _a_l_g
             The public key algorithm to use, such as RSA, DSA, or DH.  If
             used this option must precede any --ppkkeeyyoopptt options.  The options
             --ppaarraammffiillee and --aallggoorriitthhmm are mutually exclusive.

     _c_i_p_h_e_r  Encrypt the private key with the supplied cipher.  Any algorithm
             name accepted by EEVVPP__ggeett__cciipphheerrbbyynnaammee() is acceptable, such as
             ddeess33.

     --ggeennppaarraamm
             Generate a set of parameters instead of a private key.  If used
             this option must precede any --aallggoorriitthhmm, --ppaarraammffiillee, or --ppkkeeyyoopptt
             options.

     --oouutt _f_i_l_e
             The output filename.  If this argument is not specified then
             standard output is used.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format, DER or PEM.

     --ppaarraammffiillee _f_i_l_e
             Some public key algorithms generate a private key based on a set
             of parameters.  They can be supplied using this option.  If this
             option is used the public key algorithm used is determined by the
             parameters.  If used this option must precede any --ppkkeeyyoopptt
             options.  The options --ppaarraammffiillee and --aallggoorriitthhmm are mutually
             exclusive.

     --ppaassss _a_r_g
             The output file password source.

     --ppkkeeyyoopptt _o_p_t:_v_a_l_u_e
             Set the public key algorithm option _o_p_t to _v_a_l_u_e.  The precise
             set of options supported depends on the public key algorithm used
             and its implementation.  See _G_E_N_P_K_E_Y _K_E_Y _G_E_N_E_R_A_T_I_O_N _O_P_T_I_O_N_S below
             for more details.

     --tteexxtt   Print an (unencrypted) text representation of private and public
             keys and parameters along with the DER or PEM structure.

GGEENNPPKKEEYY KKEEYY GGEENNEERRAATTIIOONN OOPPTTIIOONNSS
     The options supported by each algorithm and indeed each implementation of
     an algorithm can vary.  The options for the OOppeennSSSSLL implementations are
     detailed below.

           rsa_keygen_bits:_n_u_m_b_i_t_s
                   (RSA) The number of bits in the generated key.  If not
                   specified 2048 is used.

           rsa_keygen_pubexp:_v_a_l_u_e
                   (RSA) The RSA public exponent value.  This can be a large
                   decimal or hexadecimal value if preceded by 0x.  The
                   default value is 65537.

           dsa_paramgen_bits:_n_u_m_b_i_t_s
                   (DSA) The number of bits in the generated parameters.  If
                   not specified 1024 is used.

           dh_paramgen_prime_len:_n_u_m_b_i_t_s
                   (DH) The number of bits in the prime parameter _p.

           dh_paramgen_generator:_v_a_l_u_e
                   (DH) The value to use for the generator _g.

           ec_paramgen_curve:_c_u_r_v_e
                   (EC) The EC curve to use.

GGEENNPPKKEEYY EEXXAAMMPPLLEESS
     Generate an RSA private key using default parameters:

           $ openssl genpkey -algorithm RSA -out key.pem

     Encrypt and output a private key using 128-bit AES and the passphrase
     "hello":

           $ openssl genpkey -algorithm RSA -out key.pem \
                   -aes-128-cbc -pass pass:hello

     Generate a 2048-bit RSA key using 3 as the public exponent:

           $ openssl genpkey -algorithm RSA -out key.pem \
                   -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:3

     Generate 1024-bit DSA parameters:

           $ openssl genpkey -genparam -algorithm DSA \
                   -out dsap.pem -pkeyopt dsa_paramgen_bits:1024

     Generate a DSA key from parameters:

           $ openssl genpkey -paramfile dsap.pem -out dsakey.pem

     Generate 1024-bit DH parameters:

           $ openssl genpkey -genparam -algorithm DH \
                   -out dhp.pem -pkeyopt dh_paramgen_prime_len:1024

     Generate a DH key from parameters:

           $ openssl genpkey -paramfile dhp.pem -out dhkey.pem

GGEENNRRSSAA
     ooppeennssssll ggeennrrssaa [--33 | --ff44] [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33]
                    [--oouutt _f_i_l_e] [--ppaassssoouutt _a_r_g] [_n_u_m_b_i_t_s]

     The ggeennrrssaa command generates an RSA private key.

     The options are as follows:

     --33 | --ff44
             The public exponent to use, either 3 or 65537.  The default is
             65537.

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  If none
             of these options are specified, no encryption is used.  If
             encryption is used, a pass phrase is prompted for, if it is not
             supplied via the --ppaassssoouutt option.

     --oouutt _f_i_l_e
             The output _f_i_l_e.  If this argument is not specified, standard
             output is used.

     --ppaassssoouutt _a_r_g
             The output file password source.

     _n_u_m_b_i_t_s
             The size of the private key to generate in bits.  This must be
             the last option specified.  The default is 2048.

GGEENNRRSSAA NNOOTTEESS
     RSA private key generation essentially involves the generation of two
     prime numbers.  When generating a private key, various symbols will be
     output to indicate the progress of the generation.  A `.' represents each
     number which has passed an initial sieve test; `+' means a number has
     passed a single round of the Miller-Rabin primality test.  A newline
     means that the number has passed all the prime tests (the actual number
     depends on the key size).

     Because key generation is a random process, the time taken to generate a
     key may vary somewhat.

GGEENNRRSSAA BBUUGGSS
     A quirk of the prime generation algorithm is that it cannot generate
     small primes.  Therefore the number of bits should not be less that 64.
     For typical private keys this will not matter because for security
     reasons they will be much larger (typically 2048 bits).

NNSSEEQQ
     ooppeennssssll nnsseeqq [--iinn _f_i_l_e] [--oouutt _f_i_l_e] [--ttoosseeqq]

     The nnsseeqq command takes a file containing a Netscape certificate sequence
     and prints out the certificates contained in it or takes a file of
     certificates and converts it into a Netscape certificate sequence.

     The options are as follows:

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read, or standard input if this
             option is not specified.

     --oouutt _f_i_l_e
             Specifies the output _f_i_l_e, or standard output by default.

     --ttoosseeqq  Normally, a Netscape certificate sequence will be input and the
             output is the certificates contained in it.  With the --ttoosseeqq
             option the situation is reversed: a Netscape certificate sequence
             is created from a file of certificates.

NNSSEEQQ EEXXAAMMPPLLEESS
     Output the certificates in a Netscape certificate sequence:

           $ openssl nseq -in nseq.pem -out certs.pem

     Create a Netscape certificate sequence:

           $ openssl nseq -in certs.pem -toseq -out nseq.pem

NNSSEEQQ NNOOTTEESS
     The PEM-encoded form uses the same headers and footers as a certificate:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

     A Netscape certificate sequence is a Netscape specific form that can be
     sent to browsers as an alternative to the standard PKCS#7 format when
     several certificates are sent to the browser: for example during
     certificate enrollment.  It is used by the Netscape certificate server,
     for example.

NNSSEEQQ BBUUGGSS
     This program needs a few more options, like allowing DER or PEM input and
     output files and allowing multiple certificate files to be used.

OOCCSSPP
     ooppeennssssll ooccsspp [--CCAA _f_i_l_e] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e]
                  [--ddggsstt _a_l_g] [--hhoosstt _h_o_s_t_n_a_m_e:_p_o_r_t] [--iinnddeexx _i_n_d_e_x_f_i_l_e]
                  [--iissssuueerr _f_i_l_e] [--nnddaayyss _d_a_y_s] [--nnmmiinn _m_i_n_u_t_e_s]
                  [--nnoo__cceerrtt__cchheecckkss] [--nnoo__cceerrtt__vveerriiffyy] [--nnoo__cceerrttss] [--nnoo__cchhaaiinn]
                  [--nnoo__iinntteerrnn] [--nnoo__nnoonnccee] [--nnoo__ssiiggnnaattuurree__vveerriiffyy] [--nnoonnccee]
                  [--nnoovveerriiffyy] [--nnrreeqquueesstt _n_u_m_b_e_r] [--oouutt _f_i_l_e] [--ppaatthh _p_a_t_h]
                  [--ppoorrtt _p_o_r_t_n_u_m] [--rreeqq__tteexxtt] [--rreeqqiinn _f_i_l_e] [--rreeqqoouutt _f_i_l_e]
                  [--rreesspp__kkeeyy__iidd] [--rreesspp__nnoo__cceerrttss] [--rreesspp__tteexxtt] [--rreessppiinn _f_i_l_e]
                  [--rreessppoouutt _f_i_l_e] [--rrkkeeyy _f_i_l_e] [--rrootthheerr _f_i_l_e] [--rrssiiggnneerr _f_i_l_e]
                  [--sseerriiaall _n_u_m_b_e_r] [--ssiiggnn__ootthheerr _f_i_l_e] [--ssiiggnneerr _f_i_l_e]
                  [--ssiiggnnkkeeyy _f_i_l_e] [--ssttaattuuss__aaggee _a_g_e] [--tteexxtt] [--ttrruusstt__ootthheerr]
                  [--uurrll _r_e_s_p_o_n_d_e_r___u_r_l] [--VVAAffiillee _f_i_l_e] [--vvaalliiddiittyy__ppeerriioodd _n_s_e_c]
                  [--vveerriiffyy__ootthheerr _f_i_l_e]

     The Online Certificate Status Protocol (OCSP) enables applications to
     determine the (revocation) state of an identified certificate (RFC 2560).

     The ooccsspp command performs many common OCSP tasks.  It can be used to
     print out requests and responses, create requests and send queries to an
     OCSP responder, and behave like a mini OCSP server itself.

     The options are as follows:

     --CCAAffiillee _f_i_l_e, --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             _f_i_l_e or _p_a_t_h containing trusted CA certificates.  These are used
             to verify the signature on the OCSP response.

     --cceerrtt _f_i_l_e
             Add the certificate _f_i_l_e to the request.  The issuer certificate
             is taken from the previous --iissssuueerr option, or an error occurs if
             no issuer certificate is specified.

     --ddggsstt _a_l_g
             Sets the digest algorithm to use for certificate identification
             in the OCSP request.  By default SHA-1 is used.

     --hhoosstt _h_o_s_t_n_a_m_e:_p_o_r_t, --ppaatthh _p_a_t_h
             If the --hhoosstt option is present, then the OCSP request is sent to
             the host _h_o_s_t_n_a_m_e on port _p_o_r_t.  --ppaatthh specifies the HTTP path
             name to use, or `/' by default.

     --iissssuueerr _f_i_l_e
             This specifies the current issuer certificate.  This option can
             be used multiple times.  The certificate specified in _f_i_l_e must
             be in PEM format.  This option _m_u_s_t come before any --cceerrtt
             options.

     --nnoo__cceerrtt__cchheecckkss
             Don't perform any additional checks on the OCSP response signer's
             certificate.  That is, do not make any checks to see if the
             signer's certificate is authorised to provide the necessary
             status information: as a result this option should only be used
             for testing purposes.

     --nnoo__cceerrtt__vveerriiffyy
             Don't verify the OCSP response signer's certificate at all.
             Since this option allows the OCSP response to be signed by any
             certificate, it should only be used for testing purposes.

     --nnoo__cceerrttss
             Don't include any certificates in signed request.

     --nnoo__cchhaaiinn
             Do not use certificates in the response as additional untrusted
             CA certificates.

     --nnoo__iinntteerrnn
             Ignore certificates contained in the OCSP response when searching
             for the signer's certificate.  With this option, the signer's
             certificate must be specified with either the --vveerriiffyy__ootthheerr or
             --VVAAffiillee options.

     --nnoo__ssiiggnnaattuurree__vveerriiffyy
             Don't check the signature on the OCSP response.  Since this
             option tolerates invalid signatures on OCSP responses, it will
             normally only be used for testing purposes.

     --nnoonnccee, --nnoo__nnoonnccee
             Add an OCSP _n_o_n_c_e extension to a request or disable an OCSP _n_o_n_c_e
             addition.  Normally, if an OCSP request is input using the
             --rreessppiinn option no _n_o_n_c_e is added: using the --nnoonnccee option will
             force addition of a _n_o_n_c_e.  If an OCSP request is being created
             (using the --cceerrtt and --sseerriiaall options) a _n_o_n_c_e is automatically
             added; specifying --nnoo__nnoonnccee overrides this.

     --nnoovveerriiffyy
             Don't attempt to verify the OCSP response signature or the _n_o_n_c_e
             values.  This option will normally only be used for debugging
             since it disables all verification of the responder's
             certificate.

     --oouutt _f_i_l_e
             Specify output _f_i_l_e; default is standard output.

     --rreeqq__tteexxtt, --rreesspp__tteexxtt, --tteexxtt
             Print out the text form of the OCSP request, response, or both,
             respectively.

     --rreeqqiinn _f_i_l_e, --rreessppiinn _f_i_l_e
             Read an OCSP request or response file from _f_i_l_e.  These options
             are ignored if an OCSP request or response creation is implied by
             other options (for example with the --sseerriiaall, --cceerrtt, and --hhoosstt
             options).

     --rreeqqoouutt _f_i_l_e, --rreessppoouutt _f_i_l_e
             Write out the DER-encoded certificate request or response to
             _f_i_l_e.

     --sseerriiaall _n_u_m
             Same as the --cceerrtt option except the certificate with serial
             number _n_u_m is added to the request.  The serial number is
             interpreted as a decimal integer unless preceded by `0x'.
             Negative integers can also be specified by preceding the value
             with a `-' sign.

     --ssiiggnn__ootthheerr _f_i_l_e
             Additional certificates to include in the signed request.

     --ssiiggnneerr _f_i_l_e, --ssiiggnnkkeeyy _f_i_l_e
             Sign the OCSP request using the certificate specified in the
             --ssiiggnneerr option and the private key specified by the --ssiiggnnkkeeyy
             option.  If the --ssiiggnnkkeeyy option is not present, then the private
             key is read from the same file as the certificate.  If neither
             option is specified, the OCSP request is not signed.

     --ttrruusstt__ootthheerr
             The certificates specified by the --vveerriiffyy__ootthheerr option should be
             explicitly trusted and no additional checks will be performed on
             them.  This is useful when the complete responder certificate
             chain is not available or trusting a root CA is not appropriate.

     --uurrll _r_e_s_p_o_n_d_e_r___u_r_l
             Specify the responder URL.  Both HTTP and HTTPS (SSL/TLS) URLs
             can be specified.

     --VVAAffiillee _f_i_l_e
             _f_i_l_e containing explicitly trusted responder certificates.
             Equivalent to the --vveerriiffyy__ootthheerr and --ttrruusstt__ootthheerr options.

     --vvaalliiddiittyy__ppeerriioodd _n_s_e_c, --ssttaattuuss__aaggee _a_g_e
             These options specify the range of times, in seconds, which will
             be tolerated in an OCSP response.  Each certificate status
             response includes a _n_o_t_B_e_f_o_r_e time and an optional _n_o_t_A_f_t_e_r time.
             The current time should fall between these two values, but the
             interval between the two times may be only a few seconds.  In
             practice the OCSP responder and clients' clocks may not be
             precisely synchronised and so such a check may fail.  To avoid
             this the --vvaalliiddiittyy__ppeerriioodd option can be used to specify an
             acceptable error range in seconds, the default value is 5
             minutes.

             If the _n_o_t_A_f_t_e_r time is omitted from a response, then this means
             that new status information is immediately available.  In this
             case the age of the _n_o_t_B_e_f_o_r_e field is checked to see it is not
             older than _a_g_e seconds old.  By default, this additional check is
             not performed.

     --vveerriiffyy__ootthheerr _f_i_l_e
             _f_i_l_e containing additional certificates to search when attempting
             to locate the OCSP response signing certificate.  Some responders
             omit the actual signer's certificate from the response; this
             option can be used to supply the necessary certificate in such
             cases.

OOCCSSPP SSEERRVVEERR OOPPTTIIOONNSS
     --CCAA _f_i_l_e
           CA certificate corresponding to the revocation information in
           _i_n_d_e_x_f_i_l_e.

     --iinnddeexx _i_n_d_e_x_f_i_l_e
           _i_n_d_e_x_f_i_l_e is a text index file in ccaa format containing certificate
           revocation information.

           If the --iinnddeexx option is specified, the ooccsspp utility is in _r_e_s_p_o_n_d_e_r
           mode, otherwise it is in _c_l_i_e_n_t mode.  The request(s) the responder
           processes can be either specified on the command line (using the
           --iissssuueerr and --sseerriiaall options), supplied in a file (using the --rreessppiinn
           option) or via external OCSP clients (if _p_o_r_t or _u_r_l is specified).

           If the --iinnddeexx option is present, then the --CCAA and --rrssiiggnneerr options
           must also be present.

     --nnmmiinn _m_i_n_u_t_e_s, --nnddaayyss _d_a_y_s
           Number of _m_i_n_u_t_e_s or _d_a_y_s when fresh revocation information is
           available: used in the _n_e_x_t_U_p_d_a_t_e field.  If neither option is
           present, the _n_e_x_t_U_p_d_a_t_e field is omitted, meaning fresh revocation
           information is immediately available.

     --nnrreeqquueesstt _n_u_m_b_e_r
           The OCSP server will exit after receiving _n_u_m_b_e_r requests, default
           unlimited.

     --ppoorrtt _p_o_r_t_n_u_m
           Port to listen for OCSP requests on.  The port may also be
           specified using the --uurrll option.

     --rreesspp__kkeeyy__iidd
           Identify the signer certificate using the key ID; default is to use
           the subject name.

     --rreesspp__nnoo__cceerrttss
           Don't include any certificates in the OCSP response.

     --rrkkeeyy _f_i_l_e
           The private key to sign OCSP responses with; if not present, the
           file specified in the --rrssiiggnneerr option is used.

     --rrootthheerr _f_i_l_e
           Additional certificates to include in the OCSP response.

     --rrssiiggnneerr _f_i_l_e
           The certificate to sign OCSP responses with.

OOCCSSPP RREESSPPOONNSSEE VVEERRIIFFIICCAATTIIOONN
     OCSP Response follows the rules specified in RFC 2560.

     Initially the OCSP responder certificate is located and the signature on
     the OCSP request checked using the responder certificate's public key.

     Then a normal certificate verify is performed on the OCSP responder
     certificate building up a certificate chain in the process.  The
     locations of the trusted certificates used to build the chain can be
     specified by the --CCAAffiillee and --CCAAppaatthh options or they will be looked for
     in the standard OOppeennSSSSLL certificates directory.

     If the initial verify fails, the OCSP verify process halts with an error.

     Otherwise the issuing CA certificate in the request is compared to the
     OCSP responder certificate: if there is a match then the OCSP verify
     succeeds.

     Otherwise the OCSP responder certificate's CA is checked against the
     issuing CA certificate in the request.  If there is a match and the
     OCSPSigning extended key usage is present in the OCSP responder
     certificate, then the OCSP verify succeeds.

     Otherwise the root CA of the OCSP responder's CA is checked to see if it
     is trusted for OCSP signing.  If it is, the OCSP verify succeeds.

     If none of these checks is successful, the OCSP verify fails.

     What this effectively means is that if the OCSP responder certificate is
     authorised directly by the CA it is issuing revocation information about
     (and it is correctly configured), then verification will succeed.

     If the OCSP responder is a _g_l_o_b_a_l _r_e_s_p_o_n_d_e_r which can give details about
     multiple CAs and has its own separate certificate chain, then its root CA
     can be trusted for OCSP signing.  For example:

           $ openssl x509 -in ocspCA.pem -addtrust OCSPSigning \
                   -out trustedCA.pem

     Alternatively, the responder certificate itself can be explicitly trusted
     with the --VVAAffiillee option.

OOCCSSPP NNOOTTEESS
     As noted, most of the verify options are for testing or debugging
     purposes.  Normally, only the --CCAAppaatthh, --CCAAffiillee and (if the responder is a
     `global VA') --VVAAffiillee options need to be used.

     The OCSP server is only useful for test and demonstration purposes: it is
     not really usable as a full OCSP responder.  It contains only a very
     simple HTTP request handling and can only handle the POST form of OCSP
     queries.  It also handles requests serially, meaning it cannot respond to
     new requests until it has processed the current one.  The text index file
     format of revocation is also inefficient for large quantities of
     revocation data.

     It is possible to run the ooccsspp application in _r_e_s_p_o_n_d_e_r mode via a CGI
     script using the --rreessppiinn and --rreessppoouutt options.

OOCCSSPP EEXXAAMMPPLLEESS
     Create an OCSP request and write it to a file:

           $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \
                   -reqout req.der

     Send a query to an OCSP responder with URL _h_t_t_p_:_/_/_o_c_s_p_._m_y_h_o_s_t_._c_o_m_/, save
     the response to a file and print it out in text form:

           $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \
                   -url http://ocsp.myhost.com/ -resp_text -respout resp.der

     Read in an OCSP response and print out in text form:

           $ openssl ocsp -respin resp.der -text

     OCSP server on port 8888 using a standard ccaa configuration, and a
     separate responder certificate.  All requests and responses are printed
     to a file:

           $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \
                   rcert.pem -CA demoCA/cacert.pem -text -out log.txt

     As above, but exit after processing one request:

           $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \
                   rcert.pem -CA demoCA/cacert.pem -nrequest 1

     Query status information using internally generated request:

           $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \
                   demoCA/cacert.pem -issuer demoCA/cacert.pem -serial 1

     Query status information using request read from a file and write the
     response to a second file:

           $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \
                   demoCA/cacert.pem -reqin req.der -respout resp.der

PPAASSSSWWDD
     ooppeennssssll ppaasssswwdd [--11 | --aapprr11 | --ccrryypptt] [--iinn _f_i_l_e] [--nnoovveerriiffyy] [--qquuiieett]
                    [--rreevveerrssee] [--ssaalltt _s_t_r_i_n_g] [--ssttddiinn] [--ttaabbllee] [_p_a_s_s_w_o_r_d]

     The ppaasssswwdd command computes the hash of a password typed at run-time or
     the hash of each password in a list.  The password list is taken from the
     named _f_i_l_e for option --iinn, from stdin for option --ssttddiinn, or from the
     command line, or from the terminal otherwise.  The UNIX standard
     algorithm _c_r_y_p_t and the MD5-based BSD password algorithm _1 and its Apache
     variant _a_p_r_1 are available.

     The options are as follows:

     --11      Use the MD5 based BSD password algorithm _1.

     --aapprr11   Use the _a_p_r_1 algorithm (Apache variant of the) BSD algorithm.

     --ccrryypptt  Use the _c_r_y_p_t algorithm (default).

     --iinn _f_i_l_e
             Read passwords from _f_i_l_e.

     --nnoovveerriiffyy
             Don't verify when reading a password from the terminal.

     --qquuiieett  Don't output warnings when passwords given on the command line
             are truncated.

     --rreevveerrssee
             Switch table columns.  This only makes sense in conjunction with
             the --ttaabbllee option.

     --ssaalltt _s_t_r_i_n_g
             Use the specified _s_a_l_t.  When reading a password from the
             terminal, this implies --nnoovveerriiffyy.

     --ssttddiinn  Read passwords from _s_t_d_i_n.

     --ttaabbllee  In the output list, prepend the cleartext password and a TAB
             character to each password hash.

PPAASSSSWWDD EEXXAAMMPPLLEESS
           $ openssl passwd -crypt -salt xx password
     prints "xxj31ZMTZzkVA".

           $ openssl passwd -1 -salt xxxxxxxx password
     prints "$1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a.".

           $ openssl passwd -apr1 -salt xxxxxxxx password
     prints "$apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0".

PPKKCCSS77
     ooppeennssssll ppkkccss77 [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M] [--nnoooouutt] [--oouutt _f_i_l_e]
                   [--oouuttffoorrmm _D_E_R | _P_E_M] [--pprriinntt__cceerrttss] [--tteexxtt]

     The ppkkccss77 command processes PKCS#7 files in DER or PEM format.

     The options are as follows:

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read from, or standard input if
             this option is not specified.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  _D_E_R format is a DER-encoded
             PKCS#7 v1.5 structure.  _P_E_M (the default) is a base64-encoded
             version of the DER form with header and footer lines.

     --nnoooouutt  Don't output the encoded version of the PKCS#7 structure (or
             certificates if --pprriinntt__cceerrttss is set).

     --oouutt _f_i_l_e
             Specifies the output _f_i_l_e to write to, or standard output by
             default.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --pprriinntt__cceerrttss
             Prints out any certificates or CRLs contained in the file.  They
             are preceded by their subject and issuer names in a one-line
             format.

     --tteexxtt   Prints out certificate details in full rather than just subject
             and issuer names.

PPKKCCSS77 EEXXAAMMPPLLEESS
     Convert a PKCS#7 file from PEM to DER:

           $ openssl pkcs7 -in file.pem -outform DER -out file.der

     Output all certificates in a file:

           $ openssl pkcs7 -in file.pem -print_certs -out certs.pem

PPKKCCSS77 NNOOTTEESS
     The PEM PKCS#7 format uses the header and footer lines:

           -----BEGIN PKCS7-----
           -----END PKCS7-----

     For compatibility with some CAs it will also accept:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

PPKKCCSS77 RREESSTTRRIICCTTIIOONNSS
     There is no option to print out all the fields of a PKCS#7 file.

     The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC
     2315.  They cannot currently parse, for example, the new CMS as described
     in RFC 2630.

PPKKCCSS88
     ooppeennssssll ppkkccss88 [--eemmbbeedd] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M] [--nnooccrryypptt]
                   [--nnooiitteerr] [--nnoooocctt] [--nnssddbb] [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M]
                   [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ttooppkk88] [--vv11 _a_l_g] [--vv22 _a_l_g]

     The ppkkccss88 command processes private keys in PKCS#8 format.  It can handle
     both unencrypted PKCS#8 PrivateKeyInfo format and EncryptedPrivateKeyInfo
     format with a variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 algorithms.

     The options are as follows:

     --eemmbbeedd  This option generates DSA keys in a broken format.  The DSA
             parameters are embedded inside the _P_r_i_v_a_t_e_K_e_y structure.  In this
             form the OCTET STRING contains an ASN1 SEQUENCE consisting of two
             structures: a SEQUENCE containing the parameters and an ASN1
             INTEGER containing the private key.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read a key from, or standard
             input if this option is not specified.  If the key is encrypted,
             a pass phrase will be prompted for.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  If a PKCS#8 format key is
             expected on input, then either a DER- or PEM-encoded version of a
             PKCS#8 key will be expected.  Otherwise the DER or PEM format of
             the traditional format private key is used.

     --nnooccrryypptt
             PKCS#8 keys generated or input are normally PKCS#8
             _E_n_c_r_y_p_t_e_d_P_r_i_v_a_t_e_K_e_y_I_n_f_o structures using an appropriate password-
             based encryption algorithm.  With this option, an unencrypted
             _P_r_i_v_a_t_e_K_e_y_I_n_f_o structure is expected or output.  This option does
             not encrypt private keys at all and should only be used when
             absolutely necessary.  Certain software such as some versions of
             Java code signing software use unencrypted private keys.

     --nnooiitteerr
             Use an iteration count of 1.  See the _P_K_C_S_1_2 section below for a
             detailed explanation of this option.

     --nnoooocctt  This option generates RSA private keys in a broken format that
             some software uses.  Specifically the private key should be
             enclosed in an OCTET STRING, but some software just includes the
             structure itself without the surrounding OCTET STRING.

     --nnssddbb   This option generates DSA keys in a broken format compatible with
             Netscape private key databases.  The _P_r_i_v_a_t_e_K_e_y contains a
             SEQUENCE consisting of the public and private keys, respectively.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write a key to, or standard
             output by default.  If any encryption options are set, a pass
             phrase will be prompted for.  The output filename should _n_o_t be
             the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ttooppkk88  Normally, a PKCS#8 private key is expected on input and a
             traditional format private key will be written.  With the --ttooppkk88
             option the situation is reversed: it reads a traditional format
             private key and writes a PKCS#8 format key.

     --vv11 _a_l_g
             This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to use.
             A complete list of possible algorithms is included below.

     --vv22 _a_l_g
             This option enables the use of PKCS#5 v2.0 algorithms.  Normally,
             PKCS#8 private keys are encrypted with the password-based
             encryption algorithm called _p_b_e_W_i_t_h_M_D_5_A_n_d_D_E_S_-_C_B_C; this uses
             56-bit DES encryption but it was the strongest encryption
             algorithm supported in PKCS#5 v1.5.  Using the --vv22 option PKCS#5
             v2.0 algorithms are used which can use any encryption algorithm
             such as 168-bit triple DES or 128-bit RC2, however not many
             implementations support PKCS#5 v2.0 yet.  If using private keys
             with OOppeennSSSSLL then this doesn't matter.

             The _a_l_g argument is the encryption algorithm to use; valid values
             include _d_e_s, _d_e_s_3, and _r_c_2.  It is recommended that _d_e_s_3 is used.

PPKKCCSS88 NNOOTTEESS
     The encrypted form of a PEM-encoded PKCS#8 file uses the following
     headers and footers:

           -----BEGIN ENCRYPTED PRIVATE KEY-----
           -----END ENCRYPTED PRIVATE KEY-----

     The unencrypted form uses:

           -----BEGIN PRIVATE KEY-----
           -----END PRIVATE KEY-----

     Private keys encrypted using PKCS#5 v2.0 algorithms and high iteration
     counts are more secure than those encrypted using the traditional SSSSLLeeaayy
     compatible formats.  So if additional security is considered important,
     the keys should be converted.

     The default encryption is only 56 bits because this is the encryption
     that most current implementations of PKCS#8 support.

     Some software may use PKCS#12 password-based encryption algorithms with
     PKCS#8 format private keys: these are handled automatically but there is
     no option to produce them.

     It is possible to write out DER-encoded encrypted private keys in PKCS#8
     format because the encryption details are included at an ASN1 level
     whereas the traditional format includes them at a PEM level.

PPKKCCSS##55 VV11..55 AANNDD PPKKCCSS##1122 AALLGGOORRIITTHHMMSS
     Various algorithms can be used with the --vv11 command line option,
     including PKCS#5 v1.5 and PKCS#12.  These are described in more detail
     below.

     _P_B_E_-_M_D_5_-_D_E_S
           These algorithms were included in the original PKCS#5 v1.5
           specification.  They only offer 56 bits of protection since they
           both use DES.

     _P_B_E_-_S_H_A_1_-_R_C_2_-_6_4 | _P_B_E_-_M_D_5_-_R_C_2_-_6_4 | _P_B_E_-_S_H_A_1_-_D_E_S
           These algorithms are not mentioned in the original PKCS#5 v1.5
           specification but they use the same key derivation algorithm and
           are supported by some software.  They are mentioned in PKCS#5 v2.0.
           They use either 64-bit RC2 or 56-bit DES.

     _P_B_E_-_S_H_A_1_-_R_C_4_-_1_2_8 | _P_B_E_-_S_H_A_1_-_R_C_4_-_4_0 | _P_B_E_-_S_H_A_1_-_3_D_E_S | _P_B_E_-_S_H_A_1_-_2_D_E_S
     _P_B_E_-_S_H_A_1_-_R_C_2_-_1_2_8 | _P_B_E_-_S_H_A_1_-_R_C_2_-_4_0
           These algorithms use the PKCS#12 password-based encryption
           algorithm and allow strong encryption algorithms like triple DES or
           128-bit RC2 to be used.

PPKKCCSS88 EEXXAAMMPPLLEESS
     Convert a private key from traditional to PKCS#5 v2.0 format using triple
     DES:

           $ openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem

     Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm
     (DES):

           $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem

     Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm
     (3DES):

           $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem \
                   -v1 PBE-SHA1-3DES

     Read a DER-unencrypted PKCS#8 format private key:

           $ openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem

     Convert a private key from any PKCS#8 format to traditional format:

           $ openssl pkcs8 -in pk8.pem -out key.pem

PPKKCCSS88 SSTTAANNDDAARRDDSS
     Test vectors from this PKCS#5 v2.0 implementation were posted to the
     pkcs-tng mailing list using triple DES, DES and RC2 with high iteration
     counts; several people confirmed that they could decrypt the private keys
     produced and therefore it can be assumed that the PKCS#5 v2.0
     implementation is reasonably accurate at least as far as these algorithms
     are concerned.

     The format of PKCS#8 DSA (and other) private keys is not well documented:
     it is hidden away in PKCS#11 v2.01, section 11.9; OOppeennSSSSLL's default DSA
     PKCS#8 private key format complies with this standard.

PPKKCCSS88 BBUUGGSS
     There should be an option that prints out the encryption algorithm in use
     and other details such as the iteration count.

     PKCS#8 using triple DES and PKCS#5 v2.0 should be the default private key
     format; for OOppeennSSSSLL compatibility, several of the utilities use the old
     format at present.

PPKKCCSS1122
     ooppeennssssll ppkkccss1122 [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--ccaacceerrttss]
                    [--CCAAffiillee _f_i_l_e] [--ccaannaammee _n_a_m_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y]
                    [--cceerrttffiillee _f_i_l_e] [--cceerrttppbbee _a_l_g] [--cchhaaiinn] [--ccllcceerrttss]
                    [--CCSSPP _n_a_m_e] [--ddeesscceerrtt] [--eexxppoorrtt] [--iinn _f_i_l_e] [--iinnffoo]
                    [--iinnkkeeyy _f_i_l_e] [--kkeeyyeexx] [--kkeeyyppbbee _a_l_g] [--kkeeyyssiigg]
                    [--mmaaccaallgg _a_l_g] [--mmaacciitteerr] [--nnaammee _n_a_m_e] [--nnoocceerrttss] [--nnooddeess]
                    [--nnooiitteerr] [--nnookkeeyyss] [--nnoommaacc] [--nnoommaacciitteerr] [--nnoommaaccvveerr]
                    [--nnoooouutt] [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g]
                    [--ttwwooppaassss]

     The ppkkccss1122 command allows PKCS#12 files (sometimes referred to as PFX
     files) to be created and parsed.  PKCS#12 files are used by several
     programs including Netscape, MSIE and MS Outlook.

     There are a lot of options; the meaning of some depends on whether a
     PKCS#12 file is being created or parsed.  By default, a PKCS#12 file is
     parsed; a PKCS#12 file can be created by using the --eexxppoorrtt option (see
     below).

PPKKCCSS1122 PPAARRSSIINNGG OOPPTTIIOONNSS
     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
           Use AES, DES, or triple DES, respectively, to encrypt private keys
           before outputting.  The default is triple DES.

     --ccaacceerrttss
           Only output CA certificates (not client certificates).

     --ccllcceerrttss
           Only output client certificates (not CA certificates).

     --iinn _f_i_l_e
           This specifies the _f_i_l_e of the PKCS#12 file to be parsed.  Standard
           input is used by default.

     --iinnffoo
           Output additional information about the PKCS#12 file structure,
           algorithms used, and iteration counts.

     --nnoocceerrttss
           No certificates at all will be output.

     --nnooddeess
           Don't encrypt the private keys at all.

     --nnookkeeyyss
           No private keys will be output.

     --nnoommaaccvveerr
           Don't attempt to verify the integrity MAC before reading the file.

     --nnoooouutt
           This option inhibits output of the keys and certificates to the
           output file version of the PKCS#12 file.

     --oouutt _f_i_l_e
           The _f_i_l_e to write certificates and private keys to, standard output
           by default.  They are all written in PEM format.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppaassssoouutt _a_r_g
           The output file password source.

     --ttwwooppaassss
           Prompt for separate integrity and encryption passwords: most
           software always assumes these are the same so this option will
           render such PKCS#12 files unreadable.

PPKKCCSS1122 FFIILLEE CCRREEAATTIIOONN OOPPTTIIOONNSS
     --CCAAffiillee _f_i_l_e
           CA storage as a file.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
           CA storage as a directory.  This directory must be a standard
           certificate directory: that is, a hash of each subject name (using
           xx550099 --hhaasshh) should be linked to each certificate.

     --ccaannaammee _n_a_m_e
           This specifies the "friendly name" for other certificates.  This
           option may be used multiple times to specify names for all
           certificates in the order they appear.  Netscape ignores friendly
           names on other certificates, whereas MSIE displays them.

     --cceerrttffiillee _f_i_l_e
           A file to read additional certificates from.

     --cceerrttppbbee _a_l_g, --kkeeyyppbbee _a_l_g
           These options allow the algorithm used to encrypt the private key
           and certificates to be selected.  Any PKCS#5 v1.5 or PKCS#12 PBE
           algorithm name can be used (see the _P_K_C_S_1_2 _N_O_T_E_S section for more
           information).  If a cipher name (as output by the
           lliisstt--cciipphheerr--aallggoorriitthhmmss command) is specified then it is used with
           PKCS#5 v2.0.  For interoperability reasons it is advisable to only
           use PKCS#12 algorithms.

     --cchhaaiinn
           If this option is present, an attempt is made to include the entire
           certificate chain of the user certificate.  The standard CA store
           is used for this search.  If the search fails, it is considered a
           fatal error.

     --CCSSPP _n_a_m_e
           Write _n_a_m_e as a Microsoft CSP name.

     --ddeesscceerrtt
           Encrypt the certificate using triple DES; this may render the
           PKCS#12 file unreadable by some "export grade" software.  By
           default, the private key is encrypted using triple DES and the
           certificate using 40-bit RC2.

     --eexxppoorrtt
           This option specifies that a PKCS#12 file will be created rather
           than parsed.

     --iinn _f_i_l_e
           The _f_i_l_e to read certificates and private keys from, standard input
           by default.  They must all be in PEM format.  The order doesn't
           matter but one private key and its corresponding certificate should
           be present.  If additional certificates are present, they will also
           be included in the PKCS#12 file.

     --iinnkkeeyy _f_i_l_e
           File to read private key from.  If not present, a private key must
           be present in the input file.

     --kkeeyyeexx | --kkeeyyssiigg
           Specifies that the private key is to be used for key exchange or
           just signing.  This option is only interpreted by MSIE and similar
           MS software.  Normally, "export grade" software will only allow
           512-bit RSA keys to be used for encryption purposes, but arbitrary
           length keys for signing.  The --kkeeyyssiigg option marks the key for
           signing only.  Signing only keys can be used for S/MIME signing,
           authenticode (ActiveX control signing) and SSL client
           authentication; however, due to a bug only MSIE 5.0 and later
           support the use of signing only keys for SSL client authentication.

     --mmaaccaallgg _a_l_g
           Specify the MAC digest algorithm.  If not included then SHA1 is
           used.

     --mmaacciitteerr
           This option is included for compatibility with previous versions;
           it used to be needed to use MAC iterations counts but they are now
           used by default.

     --nnaammee _n_a_m_e
           This specifies the "friendly name" for the certificate and private
           key.  This name is typically displayed in list boxes by software
           importing the file.

     --nnoommaacc
           Don't attempt to provide the MAC integrity.

     --nnoommaacciitteerr, --nnooiitteerr
           These options affect the iteration counts on the MAC and key
           algorithms.  Unless you wish to produce files compatible with MSIE
           4.0, you should leave these options alone.

           To discourage attacks by using large dictionaries of common
           passwords, the algorithm that derives keys from passwords can have
           an iteration count applied to it: this causes a certain part of the
           algorithm to be repeated and slows it down.  The MAC is used to
           check the file integrity but since it will normally have the same
           password as the keys and certificates it could also be attacked.
           By default, both MAC and encryption iteration counts are set to
           2048; using these options the MAC and encryption iteration counts
           can be set to 1.  Since this reduces the file security you should
           not use these options unless you really have to.  Most software
           supports both MAC and key iteration counts.  MSIE 4.0 doesn't
           support MAC iteration counts, so it needs the --nnoommaacciitteerr option.

     --oouutt _f_i_l_e
           This specifies _f_i_l_e to write the PKCS#12 file to.  Standard output
           is used by default.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppaassssoouutt _a_r_g
           The output file password source.

PPKKCCSS1122 NNOOTTEESS
     Although there are a large number of options, most of them are very
     rarely used.  For PKCS#12 file parsing, only --iinn and --oouutt need to be used
     for PKCS#12 file creation.  --eexxppoorrtt and --nnaammee are also used.

     If none of the --ccllcceerrttss, --ccaacceerrttss, or --nnoocceerrttss options are present, then
     all certificates will be output in the order they appear in the input
     PKCS#12 files.  There is no guarantee that the first certificate present
     is the one corresponding to the private key.  Certain software which
     requires a private key and certificate and assumes the first certificate
     in the file is the one corresponding to the private key: this may not
     always be the case.  Using the --ccllcceerrttss option will solve this problem by
     only outputting the certificate corresponding to the private key.  If the
     CA certificates are required, they can be output to a separate file using
     the --nnookkeeyyss and --ccaacceerrttss options to just output CA certificates.

     The --kkeeyyppbbee and --cceerrttppbbee algorithms allow the precise encryption
     algorithms for private keys and certificates to be specified.  Normally,
     the defaults are fine but occasionally software can't handle triple DES
     encrypted private keys; then the option --kkeeyyppbbee _P_B_E_-_S_H_A_1_-_R_C_2_-_4_0 can be
     used to reduce the private key encryption to 40-bit RC2.  A complete
     description of all algorithms is contained in the _P_K_C_S_8 section above.

PPKKCCSS1122 EEXXAAMMPPLLEESS
     Parse a PKCS#12 file and output it to a file:

           $ openssl pkcs12 -in file.p12 -out file.pem

     Output only client certificates to a file:

           $ openssl pkcs12 -in file.p12 -clcerts -out file.pem

     Don't encrypt the private key:

           $ openssl pkcs12 -in file.p12 -out file.pem -nodes

     Print some info about a PKCS#12 file:

           $ openssl pkcs12 -in file.p12 -info -noout

     Create a PKCS#12 file:

           $ openssl pkcs12 -export -in file.pem -out file.p12 \
                   -name "My Certificate"

     Include some extra certificates:

           $ openssl pkcs12 -export -in file.pem -out file.p12 \
                   -name "My Certificate" -certfile othercerts.pem

PPKKCCSS1122 BBUUGGSS
     Some would argue that the PKCS#12 standard is one big bug :-)

     Versions of OOppeennSSSSLL before 0.9.6a had a bug in the PKCS#12 key generation
     routines.  Under rare circumstances this could produce a PKCS#12 file
     encrypted with an invalid key.  As a result some PKCS#12 files which
     triggered this bug from other implementations (MSIE or Netscape) could
     not be decrypted by OOppeennSSSSLL and similarly OOppeennSSSSLL could produce PKCS#12
     files which could not be decrypted by other implementations.  The chances
     of producing such a file are relatively small: less than 1 in 256.

     A side effect of fixing this bug is that any old invalidly encrypted
     PKCS#12 files can no longer be parsed by the fixed version.  Under such
     circumstances the ppkkccss1122 utility will report that the MAC is OK but fail
     with a decryption error when extracting private keys.

     This problem can be resolved by extracting the private keys and
     certificates from the PKCS#12 file using an older version of OOppeennSSSSLL and
     recreating the PKCS#12 file from the keys and certificates using a newer
     version of OOppeennSSSSLL.  For example:

           $ old-openssl -in bad.p12 -out keycerts.pem
           $ openssl -in keycerts.pem -export -name "My PKCS#12 file" \
                   -out fixed.p12

PPKKEEYY
     ooppeennssssll ppkkeeyy [_c_i_p_h_e_r] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M] [--nnoooouutt] [--oouutt _f_i_l_e]
                  [--oouuttffoorrmm _D_E_R | _P_E_M] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn]
                  [--ppuubboouutt] [--tteexxtt] [--tteexxtt__ppuubb]

     The ppkkeeyy command processes public or private keys.  They can be converted
     between various forms and their components printed out.

     The options are as follows:

     _c_i_p_h_e_r  These options encrypt the private key with the supplied cipher.
             Any algorithm name accepted by EEVVPP__ggeett__cciipphheerrbbyynnaammee() is
             acceptable, such as ddeess33.

     --iinn _f_i_l_e
             This specifies the input filename to read a key from, or standard
             input if this option is not specified.  If the key is encrypted a
             pass phrase will be prompted for.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format, DER or PEM.

     --nnoooouutt  Do not output the encoded version of the key.

     --oouutt _f_i_l_e
             This specifies the output filename to write a key to, or standard
             output if this option is not specified.  If any encryption
             options are set then a pass phrase will be prompted for.  The
             output filename should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  By default a private key is read from the input file: with this
             option a public key is read instead.

     --ppuubboouutt
             By default a private key is output: with this option a public key
             will be output instead.  This option is automatically set if the
             input is a public key.

     --tteexxtt   Print out the various public or private key components in plain
             text in addition to the encoded version.

     --tteexxtt__ppuubb
             Print out only public key components even if a private key is
             being processed.

PPKKEEYY EEXXAAMMPPLLEESS
     To remove the pass phrase on an RSA private key:

           $ openssl pkey -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl pkey -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl pkey -in key.pem -outform DER -out keyout.der

     To print the components of a private key to standard output:

           $ openssl pkey -in key.pem -text -noout

     To print the public components of a private key to standard output:

           $ openssl pkey -in key.pem -text_pub -noout

     To just output the public part of a private key:

           $ openssl pkey -in key.pem -pubout -out pubkey.pem

PPKKEEYYPPAARRAAMM
     ooppeennssssll ppkkeeyyppaarraamm [--iinn _f_i_l_e] [--nnoooouutt] [--oouutt _f_i_l_e] [--tteexxtt]

     The ppkkeeyy command processes public or private keys.  They can be converted
     between various forms and their components printed out.

     The options are as follows:

     --iinn _f_i_l_e
             This specifies the input filename to read parameters from, or
             standard input if this option is not specified.

     --nnoooouutt  Do not output the encoded version of the parameters.

     --oouutt _f_i_l_e
             This specifies the output filename to write parameters to, or
             standard output if this option is not specified.

     --tteexxtt   Prints out the parameters in plain text in addition to the
             encoded version.

PPKKEEYYPPAARRAAMM EEXXAAMMPPLLEESS
     Print out text version of parameters:

           $ openssl pkeyparam -in param.pem -text

PPKKEEYYPPAARRAAMM NNOOTTEESS
     There are no --iinnffoorrmm or --oouuttffoorrmm options for this command because only
     PEM format is supported because the key type is determined by the PEM
     headers.

PPKKEEYYUUTTLL
     ooppeennssssll ppkkeeyyuuttll [--aassnn11ppaarrssee] [--cceerrttiinn] [--ddeeccrryypptt] [--ddeerriivvee] [--eennccrryypptt]
                     [--hheexxdduummpp] [--iinn _f_i_l_e] [--iinnkkeeyy _f_i_l_e] [--kkeeyyffoorrmm _D_E_R | _P_E_M]
                     [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g] [--ppeeeerrffoorrmm _D_E_R | _P_E_M]
                     [--ppeeeerrkkeeyy _f_i_l_e] [--ppkkeeyyoopptt _o_p_t:_v_a_l_u_e] [--ppuubbiinn] [--rreevv]
                     [--ssiiggffiillee _f_i_l_e] [--ssiiggnn] [--vveerriiffyy] [--vveerriiffyyrreeccoovveerr]

     The ppkkeeyyuuttll command can be used to perform public key operations using
     any supported algorithm.

     The options are as follows:

     --aassnn11ppaarrssee
             ASN1parse the output data.  This is useful when combined with the
             --vveerriiffyyrreeccoovveerr option when an ASN1 structure is signed.

     --cceerrttiinn
             The input is a certificate containing a public key.

     --ddeeccrryypptt
             Decrypt the input data using a private key.

     --ddeerriivvee
             Derive a shared secret using the peer key.

     --eennccrryypptt
             Encrypt the input data using a public key.

     --hheexxdduummpp
             Hex dump the output data.

     --iinn _f_i_l_e
             Specify the input filename to read data from, or standard input
             if this option is not specified.

     --iinnkkeeyy _f_i_l_e
             The input key file.  By default it should be a private key.

     --kkeeyyffoorrmm _D_E_R | _P_E_M
             The key format DER or PEM.

     --oouutt _f_i_l_e
             Specify the output filename to write to, or standard output by
             default.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppeeeerrffoorrmm _D_E_R | _P_E_M
             The peer key format DER or PEM.

     --ppeeeerrkkeeyy _f_i_l_e
             The peer key file, used by key derivation (agreement) operations.

     --ppkkeeyyoopptt _o_p_t:_v_a_l_u_e
             Public key options.

     --ppuubbiinn  The input file is a public key.

     --rreevv    Reverse the order of the input buffer.  This is useful for some
             libraries (such as CryptoAPI) which represent the buffer in
             little endian format.

     --ssiiggffiillee _f_i_l_e
             Signature file (verify operation only).

     --ssiiggnn   Sign the input data and output the signed result.  This requires
             a private key.

     --vveerriiffyy
             Verify the input data against the signature file and indicate if
             the verification succeeded or failed.

     --vveerriiffyyrreeccoovveerr
             Verify the input data and output the recovered data.

PPKKEEYYUUTTLL NNOOTTEESS
     The operations and options supported vary according to the key algorithm
     and its implementation.  The OOppeennSSSSLL operations and options are indicated
     below.

     Unless otherwise mentioned all algorithms support the _d_i_g_e_s_t:_a_l_g option
     which specifies the digest in use for sign, verify, and verifyrecover
     operations.  The value _a_l_g should represent a digest name as used in the
     EEVVPP__ggeett__ddiiggeessttbbyynnaammee() function, for example sshhaa11.

   RRSSAA aallggoorriitthhmm
     The RSA algorithm supports the encrypt, decrypt, sign, verify, and
     verifyrecover operations in general.  Some padding modes only support
     some of these operations however.

     rsa_padding_mode:_m_o_d_e
             This sets the RSA padding mode.  Acceptable values for _m_o_d_e are
             ppkkccss11 for PKCS#1 padding; nnoonnee for no padding; ooaaeepp for OAEP
             mode; xx993311 for X9.31 mode; and ppssss for PSS.

             In PKCS#1 padding if the message digest is not set then the
             supplied data is signed or verified directly instead of using a
             DigestInfo structure.  If a digest is set then a DigestInfo
             structure is used and its length must correspond to the digest
             type.

             For oeap mode only encryption and decryption is supported.

             For x931 if the digest type is set it is used to format the block
             data; otherwise the first byte is used to specify the X9.31
             digest ID.  Sign, verify, and verifyrecover can be performed in
             this mode.

             For pss mode only sign and verify are supported and the digest
             type must be specified.

     rsa_pss_saltlen:_l_e_n
             For pss mode only this option specifies the salt length.  Two
             special values are supported: -1 sets the salt length to the
             digest length.  When signing -2 sets the salt length to the
             maximum permissible value.  When verifying -2 causes the salt
             length to be automatically determined based on the PSS block
             structure.

   DDSSAA aallggoorriitthhmm
     The DSA algorithm supports the sign and verify operations.  Currently
     there are no additional options other than _d_i_g_e_s_t.  Only the SHA1 digest
     can be used and this digest is assumed by default.

   DDHH aallggoorriitthhmm
     The DH algorithm supports the derive operation and no additional options.

   EECC aallggoorriitthhmm
     The EC algorithm supports the sign, verify, and derive operations.  The
     sign and verify operations use ECDSA and derive uses ECDH.  Currently
     there are no additional options other than _d_i_g_e_s_t.  Only the SHA1 digest
     can be used and this digest is assumed by default.

PPKKEEYYUUTTLL EEXXAAMMPPLLEESS
     Sign some data using a private key:

           $ openssl pkeyutl -sign -in file -inkey key.pem -out sig

     Recover the signed data (e.g. if an RSA key is used):

           $ openssl pkeyutl -verifyrecover -in sig -inkey key.pem

     Verify the signature (e.g. a DSA key):

           $ openssl pkeyutl -verify -in file -sigfile sig \
                   -inkey key.pem

     Sign data using a message digest value (this is currently only valid for
     RSA):

           $ openssl pkeyutl -sign -in file -inkey key.pem \
                   -out sig -pkeyopt digest:sha256

     Derive a shared secret value:

           $ openssl pkeyutl -derive -inkey key.pem \
                   -peerkey pubkey.pem -out secret

PPRRIIMMEE
     ooppeennssssll pprriimmee [--bbiittss _n] [--cchheecckkss _n] [--ggeenneerraattee] [--hheexx] [--ssaaffee] _p

     The pprriimmee command is used to generate prime numbers, or to check numbers
     for primality.  Results are probabilistic: they have an exceedingly high
     likelihood of being correct, but are not guaranteed.

     The options are as follows:

     --bbiittss _n
             Specify the number of bits in the generated prime number.  Must
             be used in conjunction with --ggeenneerraattee.

     --cchheecckkss _n
             Perform a Miller-Rabin probabilistic primality test with _n
             iterations.  The default is 20.

     --ggeenneerraattee
             Generate a pseudo-random prime number.  Must be used in
             conjunction with --bbiittss.

     --hheexx    Output in hex format.

     --ssaaffee   Generate only "safe" prime numbers (i.e. a prime p so that
             (p-1)/2 is also prime).

     _p       Test if number _p is prime.

RRAANNDD
     ooppeennssssll rraanndd [--bbaassee6644] [--hheexx] [--oouutt _f_i_l_e] _n_u_m

     The rraanndd command outputs _n_u_m pseudo-random bytes.

     The options are as follows:

     --bbaassee6644
             Perform _b_a_s_e_6_4 encoding on the output.

     --hheexx    Specify hexadecimal output.

     --oouutt _f_i_l_e
             Write to _f_i_l_e instead of standard output.

RREEQQ
     ooppeennssssll rreeqq [--aassnn11--kklluuddggee] [--bbaattcchh] [--ccoonnffiigg _f_i_l_e] [--ddaayyss _n]
                 [--eexxtteennssiioonnss _s_e_c_t_i_o_n] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M]
                 [--kkeeyy _k_e_y_f_i_l_e] [--kkeeyyffoorrmm _D_E_R | _P_E_M] [--kkeeyyoouutt _f_i_l_e]
                 [--mmdd44 | --mmdd55 | --sshhaa11] [--mmoodduulluuss] [--nnaammeeoopptt _o_p_t_i_o_n] [--nneeww]
                 [--nneewwhhddrr] [--nneewwkkeeyy _a_r_g] [--nnoo--aassnn11--kklluuddggee] [--nnooddeess] [--nnoooouutt]
                 [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g]
                 [--ppuubbkkeeyy] [--rreeqqeexxttss _s_e_c_t_i_o_n] [--rreeqqoopptt _o_p_t_i_o_n] [--sseett__sseerriiaall _n]
                 [--ssuubbjj _a_r_g] [--ssuubbjjeecctt] [--tteexxtt] [--uuttff88] [--vveerrbboossee] [--vveerriiffyy]
                 [--xx550099]

     The rreeqq command primarily creates and processes certificate requests in
     PKCS#10 format.  It can additionally create self-signed certificates, for
     use as root CAs, for example.

     The options are as follows:

     --aassnn11--kklluuddggee
             By default, the rreeqq command outputs certificate requests
             containing no attributes in the correct PKCS#10 format.  However
             certain CAs will only accept requests containing no attributes in
             an invalid form: this option produces this invalid format.

             More precisely, the _A_t_t_r_i_b_u_t_e_s in a PKCS#10 certificate request
             are defined as a SET OF Attribute.  They are _n_o_t optional, so if
             no attributes are present then they should be encoded as an empty
             SET OF.  The invalid form does not include the empty SET OF,
             whereas the correct form does.

             It should be noted that very few CAs still require the use of
             this option.

     --bbaattcchh  Non-interactive mode.

     --ccoonnffiigg _f_i_l_e
             This allows an alternative configuration file to be specified;
             this overrides the compile time filename or any specified in the
             OPENSSL_CONF environment variable.

     --ddaayyss _n
             When the --xx550099 option is being used, this specifies the number of
             days to certify the certificate for.  The default is 30 days.

     --eexxtteennssiioonnss _s_e_c_t_i_o_n, --rreeqqeexxttss _s_e_c_t_i_o_n
             These options specify alternative sections to include certificate
             extensions (if the --xx550099 option is present) or certificate
             request extensions.  This allows several different sections to be
             used in the same configuration file to specify requests for a
             variety of purposes.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read a request from, or standard
             input if this option is not specified.  A request is only read if
             the creation options --nneeww and --nneewwkkeeyy are not specified.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  The _D_E_R argument uses an ASN1
             DER-encoded form compatible with the PKCS#10.  The _P_E_M form is
             the default format: it consists of the DER format base64-encoded
             with additional header and footer lines.

     --kkeeyy _k_e_y_f_i_l_e
             This specifies the file to read the private key from.  It also
             accepts PKCS#8 format private keys for PEM format files.

     --kkeeyyffoorrmm _D_E_R | _P_E_M
             The format of the private key file specified in the --kkeeyy
             argument.  _P_E_M is the default.

     --kkeeyyoouutt _f_i_l_e
             This gives the _f_i_l_e to write the newly created private key to.
             If this option is not specified, the filename present in the
             configuration file is used.

     --mmdd55 | --sshhaa11 | --sshhaa225566
             This specifies the message digest to sign the request with.  This
             overrides the digest algorithm specified in the configuration
             file.

             Some public key algorithms may override this choice.  For
             instance, DSA signatures always use SHA1.

     --mmoodduulluuss
             This option prints out the value of the modulus of the public key
             contained in the request.

     --nnaammeeoopptt _o_p_t_i_o_n, --rreeqqoopptt _o_p_t_i_o_n
             These options determine how the subject or issuer names are
             displayed.  The _o_p_t_i_o_n argument can be a single option or
             multiple options separated by commas.  Alternatively, these
             options may be used more than once to set multiple options.  See
             the _X_5_0_9 section below for details.

     --nneeww    This option generates a new certificate request.  It will prompt
             the user for the relevant field values.  The actual fields
             prompted for and their maximum and minimum sizes are specified in
             the configuration file and any requested extensions.

             If the --kkeeyy option is not used, it will generate a new RSA
             private key using information specified in the configuration
             file.

     --nneewwhhddrr
             Adds the word NEW to the PEM file header and footer lines on the
             outputed request.  Some software (Netscape certificate server)
             and some CAs need this.

     --nneewwkkeeyy _a_r_g
             This option creates a new certificate request and a new private
             key.  The argument takes one of several forms.  _r_s_a:_n_b_i_t_s, where
             _n_b_i_t_s is the number of bits, generates an RSA key _n_b_i_t_s in size.
             If _n_b_i_t_s is omitted, i.e. --nneewwkkeeyy rrssaa specified, the default key
             size, specified in the configuration file, is used.

             All other algorithms support the _a_l_g:_f_i_l_e form, where file may be
             an algorithm parameter file, created by the ggeennppkkeeyy --ggeennppaarraamm
             command or an X.509 certificate for a key with appropriate
             algorithm.

             _p_a_r_a_m:_f_i_l_e generates a key using the parameter file or
             certificate _f_i_l_e; the algorithm is determined by the parameters.
             _a_l_g_n_a_m_e:_f_i_l_e use algorithm _a_l_g_n_a_m_e and parameter file _f_i_l_e: the
             two algorithms must match or an error occurs.  _a_l_g_n_a_m_e just uses
             algorithm _a_l_g_n_a_m_e, and parameters, if necessary, should be
             specified via the --ppkkeeyyoopptt option.

             _d_s_a:_f_i_l_e generates a DSA key using the parameters in the file
             _f_i_l_e.

     --nnoo--aassnn11--kklluuddggee
             Reverses the effect of --aassnn11--kklluuddggee.

     --nnooddeess  If this option is specified and a private key is created, it will
             not be encrypted.

     --nnoooouutt  This option prevents output of the encoded version of the
             request.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write to, or standard output by
             default.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbkkeeyy
             Outputs the public key.

     --rreeqqoopptt _o_p_t_i_o_n
             Customise the output format used with --tteexxtt.  The _o_p_t_i_o_n argument
             can be a single option or multiple options separated by commas.

             See the discussion of the --cceerrttoopptt option in the xx550099 command.

     --sseett__sseerriiaall _n
             Serial number to use when outputting a self-signed certificate.
             This may be specified as a decimal value or a hex value if
             preceded by `0x'.  It is possible to use negative serial numbers
             but this is not recommended.

     --ssuubbjj _a_r_g
             Replaces subject field of input request with specified data and
             outputs modified request.  The arg must be formatted as
             _/_t_y_p_e_0_=_v_a_l_u_e_0_/_t_y_p_e_1_=_v_a_l_u_e_1_/_t_y_p_e_2_=_._._.; characters may be escaped
             by `\' (backslash); no spaces are skipped.

     --ssuubbjjeecctt
             Prints out the request subject (or certificate subject if --xx550099
             is specified.

     --tteexxtt   Prints out the certificate request in text form.

     --uuttff88   This option causes field values to be interpreted as UTF8
             strings; by default they are interpreted as ASCII.  This means
             that the field values, whether prompted from a terminal or
             obtained from a configuration file, must be valid UTF8 strings.

     --vveerrbboossee
             Print extra details about the operations being performed.

     --vveerriiffyy
             Verifies the signature on the request.

     --xx550099   This option outputs a self-signed certificate instead of a
             certificate request.  This is typically used to generate a test
             certificate or a self-signed root CA.  The extensions added to
             the certificate (if any) are specified in the configuration file.
             Unless specified using the --sseett__sseerriiaall option, 0 will be used for
             the serial number.

RREEQQ CCOONNFFIIGGUURRAATTIIOONN FFIILLEE FFOORRMMAATT
     The configuration options are specified in the _r_e_q section of the
     configuration file.  As with all configuration files, if no value is
     specified in the specific section (i.e. _r_e_q) then the initial unnamed or
     _d_e_f_a_u_l_t section is searched too.

     The options available are described in detail below.

     _a_t_t_r_i_b_u_t_e_s
           This specifies the section containing any request attributes: its
           format is the same as _d_i_s_t_i_n_g_u_i_s_h_e_d___n_a_m_e.  Typically these may
           contain the _c_h_a_l_l_e_n_g_e_P_a_s_s_w_o_r_d or _u_n_s_t_r_u_c_t_u_r_e_d_N_a_m_e types.  They are
           currently ignored by OOppeennSSSSLL's request signing utilities, but some
           CAs might want them.

     _d_e_f_a_u_l_t___b_i_t_s
           This specifies the default key size in bits.  If not specified,
           2048 is used.  It is used if the --nneeww option is used.  It can be
           overridden by using the --nneewwkkeeyy option.

     _d_e_f_a_u_l_t___k_e_y_f_i_l_e
           This is the default file to write a private key to.  If not
           specified, the key is written to standard output.  This can be
           overridden by the --kkeeyyoouutt option.

     _d_e_f_a_u_l_t___m_d
           This option specifies the digest algorithm to use.  Possible values
           include _m_d_5, _s_h_a_1 and _s_h_a_2_5_6.  If not present, SHA256 is used.
           This option can be overridden on the command line.

     _d_i_s_t_i_n_g_u_i_s_h_e_d___n_a_m_e
           This specifies the section containing the distinguished name fields
           to prompt for when generating a certificate or certificate request.
           The format is described in the next section.

     _e_n_c_r_y_p_t___k_e_y
           If this is set to _n_o and a private key is generated, it is _n_o_t
           encrypted.  This is equivalent to the --nnooddeess command line option.
           For compatibility, _e_n_c_r_y_p_t___r_s_a___k_e_y is an equivalent option.

     _i_n_p_u_t___p_a_s_s_w_o_r_d | _o_u_t_p_u_t___p_a_s_s_w_o_r_d
           The passwords for the input private key file (if present) and the
           output private key file (if one will be created).  The command line
           options --ppaassssiinn and --ppaassssoouutt override the configuration file
           values.

     _o_i_d___f_i_l_e
           This specifies a file containing additional OBJECT IDENTIFIERS.
           Each line of the file should consist of the numerical form of the
           object identifier, followed by whitespace, then the short name
           followed by whitespace and finally the long name.

     _o_i_d___s_e_c_t_i_o_n
           This specifies a section in the configuration file containing extra
           object identifiers.  Each line should consist of the short name of
           the object identifier followed by `=' and the numerical form.  The
           short and long names are the same when this option is used.

     _p_r_o_m_p_t
           If set to the value _n_o, this disables prompting of certificate
           fields and just takes values from the config file directly.  It
           also changes the expected format of the _d_i_s_t_i_n_g_u_i_s_h_e_d___n_a_m_e and
           _a_t_t_r_i_b_u_t_e_s sections.

     _r_e_q___e_x_t_e_n_s_i_o_n_s
           This specifies the configuration file section containing a list of
           extensions to add to the certificate request.  It can be overridden
           by the --rreeqqeexxttss command line switch.

     _s_t_r_i_n_g___m_a_s_k
           This option limits the string types for encoding certain fields.
           The following values may be used, limiting strings to the indicated
           types:

           _u_t_f_8_o_n_l_y     _U_T_F_8_S_t_r_i_n_g_. This is the default, as recommended by
                        PKIX in RFC 2459.

           _d_e_f_a_u_l_t      _P_r_i_n_t_a_b_l_e_S_t_r_i_n_g, _I_A_5_S_t_r_i_n_g, _T_6_1_S_t_r_i_n_g, _B_M_P_S_t_r_i_n_g,
                        _U_T_F_8_S_t_r_i_n_g.

           _p_k_i_x         _P_r_i_n_t_a_b_l_e_S_t_r_i_n_g, _I_A_5_S_t_r_i_n_g, _B_M_P_S_t_r_i_n_g, _U_T_F_8_S_t_r_i_n_g.
                        This was inspired by the PKIX recommendation in RFC
                        2459 for certificates generated before 2004, but
                        differs by also permitting _I_A_5_S_t_r_i_n_g.

           _n_o_m_b_s_t_r      _P_r_i_n_t_a_b_l_e_S_t_r_i_n_g, _I_A_5_S_t_r_i_n_g, _T_6_1_S_t_r_i_n_g,
                        _U_n_i_v_e_r_s_a_l_S_t_r_i_n_g.  This was a workaround for some
                        ancient software that had problems with the variable-
                        sized _B_M_P_S_t_r_i_n_g and _U_T_F_8_S_t_r_i_n_g types.

           MMAASSKK:_n_u_m_b_e_r  This is an explicit bitmask of permitted types, where
                        _n_u_m_b_e_r is a C-style hex, decimal, or octal number
                        that's a bit-wise OR of B_ASN1_* values from
                        <_o_p_e_n_s_s_l_/_a_s_n_1_._h>.

     _u_t_f_8  If set to the value _y_e_s, then field values are interpreted as UTF8
           strings; by default they are interpreted as ASCII.  This means that
           the field values, whether prompted from a terminal or obtained from
           a configuration file, must be valid UTF8 strings.

     _x_5_0_9___e_x_t_e_n_s_i_o_n_s
           This specifies the configuration file section containing a list of
           extensions to add to a certificate generated when the --xx550099 switch
           is used.  It can be overridden by the --eexxtteennssiioonnss command line
           switch.

RREEQQ DDIISSTTIINNGGUUIISSHHEEDD NNAAMMEE AANNDD AATTTTRRIIBBUUTTEE SSEECCTTIIOONN FFOORRMMAATT
     There are two separate formats for the distinguished name and attribute
     sections.  If the --pprroommpptt option is set to _n_o, then these sections just
     consist of field names and values: for example,

           CN=My Name
           OU=My Organization
           emailAddress=someone@somewhere.org

     This allows external programs (e.g. GUI based) to generate a template
     file with all the field names and values and just pass it to rreeqq.  An
     example of this kind of configuration file is contained in the _R_E_Q
     _E_X_A_M_P_L_E_S section.

     Alternatively if the --pprroommpptt option is absent or not set to _n_o, then the
     file contains field prompting information.  It consists of lines of the
     form:

           fieldName="prompt"
           fieldName_default="default field value"
           fieldName_min= 2
           fieldName_max= 4

     "fieldName" is the field name being used, for example _c_o_m_m_o_n_N_a_m_e (or CN).
     The "prompt" string is used to ask the user to enter the relevant
     details.  If the user enters nothing, the default value is used; if no
     default value is present, the field is omitted.  A field can still be
     omitted if a default value is present, if the user just enters the `.'
     character.

     The number of characters entered must be between the _f_i_e_l_d_N_a_m_e___m_i_n and
     _f_i_e_l_d_N_a_m_e___m_a_x limits: there may be additional restrictions based on the
     field being used (for example _c_o_u_n_t_r_y_N_a_m_e can only ever be two characters
     long and must fit in a _P_r_i_n_t_a_b_l_e_S_t_r_i_n_g).

     Some fields (such as _o_r_g_a_n_i_z_a_t_i_o_n_N_a_m_e) can be used more than once in a
     DN.  This presents a problem because configuration files will not
     recognize the same name occurring twice.  To avoid this problem, if the
     _f_i_e_l_d_N_a_m_e contains some characters followed by a full stop, they will be
     ignored.  So, for example, a second _o_r_g_a_n_i_z_a_t_i_o_n_N_a_m_e can be input by
     calling it "1.organizationName".

     The actual permitted field names are any object identifier short or long
     names.  These are compiled into OOppeennSSSSLL and include the usual values such
     as _c_o_m_m_o_n_N_a_m_e, _c_o_u_n_t_r_y_N_a_m_e, _l_o_c_a_l_i_t_y_N_a_m_e, _o_r_g_a_n_i_z_a_t_i_o_n_N_a_m_e,
     _o_r_g_a_n_i_z_a_t_i_o_n_U_n_i_t_N_a_m_e, _s_t_a_t_e_O_r_P_r_o_v_i_n_c_e_N_a_m_e.  Additionally, _e_m_a_i_l_A_d_d_r_e_s_s is
     included as well as _n_a_m_e, _s_u_r_n_a_m_e, _g_i_v_e_n_N_a_m_e _i_n_i_t_i_a_l_s and _d_n_Q_u_a_l_i_f_i_e_r.

     Additional object identifiers can be defined with the _o_i_d___f_i_l_e or
     _o_i_d___s_e_c_t_i_o_n options in the configuration file.  Any additional fields
     will be treated as though they were a _D_i_r_e_c_t_o_r_y_S_t_r_i_n_g.

RREEQQ EEXXAAMMPPLLEESS
     Examine and verify a certificate request:

           $ openssl req -in req.pem -text -verify -noout

     Create a private key and then generate a certificate request from it:

           $ openssl genrsa -out key.pem 2048
           $ openssl req -new -key key.pem -out req.pem

     The same but just using req:

           $ openssl req -newkey rsa:2048 -keyout key.pem -out req.pem

     Generate a self-signed root certificate:

           $ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem

     Example of a file pointed to by the _o_i_d___f_i_l_e option:

           1.2.3.4        shortName       A longer Name
           1.2.3.6        otherName       Other longer Name

     Example of a section pointed to by _o_i_d___s_e_c_t_i_o_n making use of variable
     expansion:

           testoid1=1.2.3.5
           testoid2=${testoid1}.6

     Sample configuration file prompting for field values:

      [ req ]
      default_bits           = 1024
      default_keyfile        = privkey.pem
      distinguished_name     = req_distinguished_name
      attributes             = req_attributes
      x509_extensions        = v3_ca

      dirstring_type = nobmp

      [ req_distinguished_name ]
      countryName                    = Country Name (2 letter code)
      countryName_default            = AU
      countryName_min                = 2
      countryName_max                = 2

      localityName                   = Locality Name (eg, city)

      organizationalUnitName         = Organizational Unit Name (eg, section)

      commonName                     = Common Name (eg, YOUR name)
      commonName_max                 = 64

      emailAddress                   = Email Address
      emailAddress_max               = 40

      [ req_attributes ]
      challengePassword              = A challenge password
      challengePassword_min          = 4
      challengePassword_max          = 20

      [ v3_ca ]

      subjectKeyIdentifier=hash
      authorityKeyIdentifier=keyid:always,issuer:always
      basicConstraints = CA:true

     Sample configuration containing all field values:


      [ req ]
      default_bits           = 1024
      default_keyfile        = keyfile.pem
      distinguished_name     = req_distinguished_name
      attributes             = req_attributes
      prompt                 = no
      output_password        = mypass

      [ req_distinguished_name ]
      C                      = GB
      ST                     = Test State or Province
      L                      = Test Locality
      O                      = Organization Name
      OU                     = Organizational Unit Name
      CN                     = Common Name
      emailAddress           = test@email.address

      [ req_attributes ]
      challengePassword              = A challenge password

RREEQQ NNOOTTEESS
     The header and footer lines in the PEM format are normally:

           -----BEGIN CERTIFICATE REQUEST-----
           -----END CERTIFICATE REQUEST-----

     Some software (some versions of Netscape certificate server) instead
     needs:

           -----BEGIN NEW CERTIFICATE REQUEST-----
           -----END NEW CERTIFICATE REQUEST-----

     which is produced with the --nneewwhhddrr option but is otherwise compatible.
     Either form is accepted transparently on input.

     The certificate requests generated by Xenroll with MSIE have extensions
     added.  It includes the _k_e_y_U_s_a_g_e extension which determines the type of
     key (signature only or general purpose) and any additional OIDs entered
     by the script in an _e_x_t_e_n_d_e_d_K_e_y_U_s_a_g_e extension.

RREEQQ DDIIAAGGNNOOSSTTIICCSS
     The following messages are frequently asked about:

           Using configuration from /some/path/openssl.cnf
           Unable to load config info

     This is followed some time later by...

           unable to find 'distinguished_name' in config
           problems making Certificate Request

     The first error message is the clue: it can't find the configuration
     file!  Certain operations (like examining a certificate request) don't
     need a configuration file so its use isn't enforced.  Generation of
     certificates or requests, however, do need a configuration file.  This
     could be regarded as a bug.

     Another puzzling message is this:

           Attributes:
               a0:00

     This is displayed when no attributes are present and the request includes
     the correct empty SET OF structure (the DER encoding of which is 0xa0
     0x00).  If you just see:

           Attributes:

     then the SET OF is missing and the encoding is technically invalid (but
     it is tolerated).  See the description of the command line option
     --aassnn11--kklluuddggee for more information.

RREEQQ EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
     The variable OPENSSL_CONF, if defined, allows an alternative
     configuration file location to be specified; it will be overridden by the
     --ccoonnffiigg command line switch if it is present.

RREEQQ BBUUGGSS
     OOppeennSSSSLL's handling of T61Strings (aka TeletexStrings) is broken: it
     effectively treats them as ISO 8859-1 (Latin 1); Netscape and MSIE have
     similar behaviour.  This can cause problems if you need characters that
     aren't available in _P_r_i_n_t_a_b_l_e_S_t_r_i_n_g_s and you don't want to or can't use
     _B_M_P_S_t_r_i_n_g_s.

     As a consequence of the T61String handling, the only correct way to
     represent accented characters in OOppeennSSSSLL is to use a _B_M_P_S_t_r_i_n_g:
     unfortunately Netscape currently chokes on these.  If you have to use
     accented characters with Netscape and MSIE then you currently need to use
     the invalid T61String form.

     The current prompting is not very friendly.  It doesn't allow you to
     confirm what you've just entered.  Other things, like extensions in
     certificate requests, are statically defined in the configuration file.
     Some of these, like an email address in _s_u_b_j_e_c_t_A_l_t_N_a_m_e, should be input
     by the user.

RRSSAA
     ooppeennssssll rrssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--cchheecckk]
                 [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _N_E_T | _P_E_M] [--mmoodduulluuss] [--nnoooouutt]
                 [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _N_E_T | _P_E_M] [--ppaassssiinn _a_r_g]
                 [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt] [--ssggcckkeeyy] [--tteexxtt]

     The rrssaa command processes RSA keys.  They can be converted between
     various forms and their components printed out.

     NNoottee: this command uses the traditional SSSSLLeeaayy compatible format for
     private key encryption: newer applications should use the more secure
     PKCS#8 format using the ppkkccss88 utility.

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options are specified,
             the key is written in plain text.  This means that using the rrssaa
             utility to read in an encrypted key with no encryption option can
             be used to remove the pass phrase from a key, or by setting the
             encryption options it can be used to add or change the pass
             phrase.  These options can only be used with PEM format output
             files.

     --cchheecckk  This option checks the consistency of an RSA private key.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read a key from, or standard
             input if this option is not specified.  If the key is encrypted,
             a pass phrase will be prompted for.

     --iinnffoorrmm _D_E_R | _N_E_T | _P_E_M
             This specifies the input format.  The _D_E_R argument uses an ASN1
             DER-encoded form compatible with the PKCS#1 RSAPrivateKey or
             SubjectPublicKeyInfo format.  The _P_E_M form is the default format:
             it consists of the DER format base64-encoded with additional
             header and footer lines.  On input PKCS#8 format private keys are
             also accepted.  The _N_E_T form is a format described in the _R_S_A
             _N_O_T_E_S section.

     --nnoooouutt  This option prevents output of the encoded version of the key.

     --mmoodduulluuss
             This option prints out the value of the modulus of the key.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write a key to, or standard
             output if this option is not specified.  If any encryption
             options are set, a pass phrase will be prompted for.  The output
             filename should _n_o_t be the same as the input filename.

     --oouuttffoorrmm _D_E_R | _N_E_T | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  By default, a private key is read from the input file; with this
             option a public key is read instead.

     --ppuubboouutt
             By default, a private key is output; with this option a public
             key will be output instead.  This option is automatically set if
             the input is a public key.

     --ssggcckkeeyy
             Use the modified _N_E_T algorithm used with some versions of
             Microsoft IIS and SGC keys.

     --tteexxtt   Prints out the various public or private key components in plain
             text, in addition to the encoded version.

RRSSAA NNOOTTEESS
     The PEM private key format uses the header and footer lines:

           -----BEGIN RSA PRIVATE KEY-----
           -----END RSA PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

     The _N_E_T form is a format compatible with older Netscape servers and
     Microsoft IIS .key files; this uses unsalted RC4 for its encryption.  It
     is not very secure and so should only be used when necessary.

     Some newer version of IIS have additional data in the exported .key
     files.  To use these with the rrssaa utility, view the file with a binary
     editor and look for the string "private-key", then trace back to the byte
     sequence 0x30, 0x82 (this is an ASN1 SEQUENCE).  Copy all the data from
     this point onwards to another file and use that as the input to the rrssaa
     utility with the --iinnffoorrmm _N_E_T option.  If there is an error after entering
     the password, try the --ssggcckkeeyy option.

RRSSAA EEXXAAMMPPLLEESS
     To remove the pass phrase on an RSA private key:

           $ openssl rsa -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl rsa -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl rsa -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl rsa -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl rsa -in key.pem -pubout -out pubkey.pem

RRSSAA BBUUGGSS
     The command line password arguments don't currently work with _N_E_T format.

     There should be an option that automatically handles .key files, without
     having to manually edit them.

RRSSAAUUTTLL
     ooppeennssssll rrssaauuttll [--aassnn11ppaarrssee] [--cceerrttiinn] [--ddeeccrryypptt] [--eennccrryypptt] [--hheexxdduummpp]
                    [--iinn _f_i_l_e] [--iinnkkeeyy _f_i_l_e] [--kkeeyyffoorrmm _D_E_R | _P_E_M]
                    [--ooaaeepp | --ppkkccss | --rraaww | --ssssll] [--oouutt _f_i_l_e] [--ppuubbiinn] [--ssiiggnn]
                    [--vveerriiffyy]

     The rrssaauuttll command can be used to sign, verify, encrypt and decrypt data
     using the RSA algorithm.

     The options are as follows:

     --aassnn11ppaarrssee
             Asn1parse the output data; this is useful when combined with the
             --vveerriiffyy option.

     --cceerrttiinn
             The input is a certificate containing an RSA public key.

     --ddeeccrryypptt
             Decrypt the input data using an RSA private key.

     --eennccrryypptt
             Encrypt the input data using an RSA public key.

     --hheexxdduummpp
             Hex dump the output data.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read data from, or standard
             input if this option is not specified.

     --iinnkkeeyy _f_i_l_e
             The input key file, by default it should be an RSA private key.

     --kkeeyyffoorrmm _D_E_R | _P_E_M
             Private ket format.  Default is _P_E_M.

     --ooaaeepp | --ppkkccss | --rraaww | --ssssll
             The padding to use: PKCS#1 OAEP, PKCS#1 v1.5 (the default), or no
             padding, respectively.  For signatures, only --ppkkccss and --rraaww can
             be used.

     --oouutt _f_i_l_e
             Specifies the output _f_i_l_e to write to, or standard output by
             default.

     --ppuubbiinn  The input file is an RSA public key.

     --ssiiggnn   Sign the input data and output the signed result.  This requires
             an RSA private key.

     --vveerriiffyy
             Verify the input data and output the recovered data.

RRSSAAUUTTLL NNOOTTEESS
     rrssaauuttll, because it uses the RSA algorithm directly, can only be used to
     sign or verify small pieces of data.

RRSSAAUUTTLL EEXXAAMMPPLLEESS
     Sign some data using a private key:

           $ openssl rsautl -sign -in file -inkey key.pem -out sig

     Recover the signed data:

           $ openssl rsautl -verify -in sig -inkey key.pem

     Examine the raw signed data:

      $ openssl rsautl -verify -in file -inkey key.pem -raw -hexdump

      0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world

     The PKCS#1 block formatting is evident from this.  If this was done using
     encrypt and decrypt, the block would have been of type 2 (the second
     byte) and random padding data visible instead of the 0xff bytes.

     It is possible to analyse the signature of certificates using this
     utility in conjunction with aassnn11ppaarrssee.  Consider the self-signed example
     in _c_e_r_t_s_/_p_c_a_-_c_e_r_t_._p_e_m: running aassnn11ppaarrssee as follows yields:

      $ openssl asn1parse -in pca-cert.pem

         0:d=0  hl=4 l= 742 cons: SEQUENCE
         4:d=1  hl=4 l= 591 cons:  SEQUENCE
         8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
        10:d=3  hl=2 l=   1 prim:    INTEGER           :02
        13:d=2  hl=2 l=   1 prim:   INTEGER           :00
        16:d=2  hl=2 l=  13 cons:   SEQUENCE
        18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption
        29:d=3  hl=2 l=   0 prim:    NULL
        31:d=2  hl=2 l=  92 cons:   SEQUENCE
        33:d=3  hl=2 l=  11 cons:    SET
        35:d=4  hl=2 l=   9 cons:     SEQUENCE
        37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName
        42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU
       ....
       599:d=1  hl=2 l=  13 cons:  SEQUENCE
       601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption
       612:d=2  hl=2 l=   0 prim:   NULL
       614:d=1  hl=3 l= 129 prim:  BIT STRING

     The final BIT STRING contains the actual signature.  It can be extracted
     with:

           $ openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614

     The certificate public key can be extracted with:

           $ openssl x509 -in test/testx509.pem -pubkey -noout >pubkey.pem

     The signature can be analysed with:

      $ openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin

         0:d=0  hl=2 l=  32 cons: SEQUENCE
         2:d=1  hl=2 l=  12 cons:  SEQUENCE
         4:d=2  hl=2 l=   8 prim:   OBJECT            :md5
        14:d=2  hl=2 l=   0 prim:   NULL
        16:d=1  hl=2 l=  16 prim:  OCTET STRING
        0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5  .F...Js.7...H%..

     This is the parsed version of an ASN1 _D_i_g_e_s_t_I_n_f_o structure.  It can be
     seen that the digest used was MD5.  The actual part of the certificate
     that was signed can be extracted with:

           $ openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4

     and its digest computed with:

           $ openssl md5 -c tbs
           MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5

     which it can be seen agrees with the recovered value above.

SS__CCLLIIEENNTT
     ooppeennssssll ss__cclliieenntt [--44 | --66] [--bbuuggss] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y]
                      [--cceerrtt _f_i_l_e] [--cchheecckk__ssss__ssiigg] [--cciipphheerr _c_i_p_h_e_r_l_i_s_t]
                      [--ccoonnnneecctt _h_o_s_t:_p_o_r_t | _h_o_s_t/_p_o_r_t] [--ccrrll__cchheecckk]
                      [--ccrrll__cchheecckk__aallll] [--ccrrllff] [--ddeebbuugg] [--eexxtteennddeedd__ccrrll]
                      [--iiggnn__eeooff] [--iiggnnoorree__ccrriittiiccaall] [--iissssuueerr__cchheecckkss]
                      [--kkeeyy _k_e_y_f_i_l_e] [--mmssgg] [--nnbbiioo] [--nnbbiioo__tteesstt] [--nnoo__ttiicckkeett]
                      [--nnoo__ttllss11] [--nnoo__ttllss11__11] [--nnoo__ttllss11__22] [--ppaauussee]
                      [--ppoolliiccyy__cchheecckk] [--pprreexxiitt] [--pprrooxxyy _h_o_s_t:_p_o_r_t] [--ppsskk _k_e_y]
                      [--ppsskk__iiddeennttiittyy _i_d_e_n_t_i_t_y] [--qquuiieett] [--rreeccoonnnneecctt]
                      [--sseerrvveerrnnaammee _n_a_m_e] [--sshhoowwcceerrttss] [--ssttaarrttttllss _p_r_o_t_o_c_o_l]
                      [--ssttaattee] [--ttllss11] [--ttllss11__11] [--ttllss11__22] [--ttllsseexxttddeebbuugg]
                      [--vveerriiffyy _d_e_p_t_h] [--xx550099__ssttrriicctt] [--xxmmpppphhoosstt _h_o_s_t]

     The ss__cclliieenntt command implements a generic SSL/TLS client which connects
     to a remote host using SSL/TLS.  It is a _v_e_r_y useful diagnostic tool for
     SSL servers.

     The options are as follows:

     --44      Specify that ss__cclliieenntt should attempt connections using IPv4 only.

     --66      Specify that ss__cclliieenntt should attempt connections using IPv6 only.

     --bbuuggss   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e containing trusted certificates to use during server
             authentication and to use when attempting to build the client
             certificate chain.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The _d_i_r_e_c_t_o_r_y to use for server certificate verification.  This
             directory must be in "hash format"; see --vveerriiffyy for more
             information.  These are also used when building the client
             certificate chain.

     --cceerrtt _f_i_l_e
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.

     --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll, --eexxtteennddeedd__ccrrll,
             --iiggnnoorree__ccrriittiiccaall, --iissssuueerr__cchheecckkss, --ppoolliiccyy__cchheecckk, --xx550099__ssttrriicctt
             Set various certificate chain validation options.  See the VVEERRIIFFYY
             command for details.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             This allows the cipher list sent by the client to be modified.
             Although the server determines which cipher suite is used, it
             should take the first supported cipher in the list sent by the
             client.  See the _C_I_P_H_E_R_S section above for more information.

     --ccoonnnneecctt _h_o_s_t:_p_o_r_t | _h_o_s_t/_p_o_r_t
             This specifies the _h_o_s_t and optional _p_o_r_t to connect to.  If not
             specified, an attempt is made to connect to the local host on
             port 4433.  Alternatively, the host and port pair may be
             separated using a forward-slash character.  This form is useful
             for numeric IPv6 addresses.

     --ccrrllff   This option translates a line feed from the terminal into CR+LF
             as required by some servers.

     --ddeebbuugg  Print extensive debugging information including a hex dump of all
             traffic.

     --iiggnn__eeooff
             Inhibit shutting down the connection when end of file is reached
             in the input.

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.

     --mmssgg    Show all protocol messages with hex dump.

     --nnbbiioo   Turns on non-blocking I/O.

     --nnbbiioo__tteesstt
             Tests non-blocking I/O.

     --nnoo__ttllss11 | --nnoo__ttllss11__11 | --nnoo__ttllss11__22
             By default, the initial handshake uses a method which should be
             compatible with servers supporting any version of TLS.  These
             options disable the use of TLS1.0, 1.1, and 1.2, respectively.

             Unfortunately there are a lot of ancient and broken servers in
             use which cannot handle this technique and will fail to connect.

     --nnoo__ttiicckkeett
             Disable RFC 4507 session ticket support.

     --ppaauussee  Pauses 1 second between each read and write call.

     --pprreexxiitt
             Print session information when the program exits.  This will
             always attempt to print out information even if the connection
             fails.  Normally, information will only be printed out once if
             the connection succeeds.  This option is useful because the
             cipher in use may be renegotiated or the connection may fail
             because a client certificate is required or is requested only
             after an attempt is made to access a certain URL.  NNoottee: the
             output produced by this option is not always accurate because a
             connection might never have been established.

     --pprrooxxyy _h_o_s_t:_p_o_r_t
             Use the HTTP proxy at _h_o_s_t and _p_o_r_t.  The connection to the proxy
             is done in cleartext and the --ccoonnnneecctt argument is given to the
             proxy.  If not specified, localhost is used as final destination.
             After that, switch the connection through the proxy to the
             destination to TLS.

     --ppsskk _k_e_y
             Use the PSK key _k_e_y when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     --ppsskk__iiddeennttiittyy _i_d_e_n_t_i_t_y
             Use the PSK identity _i_d_e_n_t_i_t_y when using a PSK cipher suite.

     --qquuiieett  Inhibit printing of session and certificate information.  This
             implicitly turns on --iiggnn__eeooff as well.

     --rreeccoonnnneecctt
             Reconnects to the same server 5 times using the same session ID;
             this can be used as a test that session caching is working.

     --sseerrvveerrnnaammee _n_a_m_e
             Include the TLS Server Name Indication (SNI) extension in the
             ClientHello message, using the specified server _n_a_m_e.

     --sshhoowwcceerrttss
             Display the whole server certificate chain: normally only the
             server certificate itself is displayed.

     --ssttaarrttttllss _p_r_o_t_o_c_o_l
             Send the protocol-specific message(s) to switch to TLS for
             communication.  _p_r_o_t_o_c_o_l is a keyword for the intended protocol.
             Currently, the supported keywords are "ftp", "imap", "smtp",
             "pop3", and "xmpp".

     --ssttaattee  Prints out the SSL session states.

     --ttllss11 | --ttllss11__11 | --ttllss11__22
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     --ttllsseexxttddeebbuugg
             Print out a hex dump of any TLS extensions received from the
             server.

     --vveerriiffyy _d_e_p_t_h
             The verify _d_e_p_t_h to use.  This specifies the maximum length of
             the server certificate chain and turns on server certificate
             verification.  Currently the verify operation continues after
             errors so all the problems with a certificate chain can be seen.
             As a side effect the connection will never fail due to a server
             certificate verify failure.

     --xxmmpppphhoosstt _h_o_s_t_n_a_m_e
             This option, when used with --ssttaarrttttllss _x_m_p_p, specifies the host
             for the "to" attribute of the stream element.  If this option is
             not specified then the host specified with --ccoonnnneecctt will be used.

SS__CCLLIIEENNTT CCOONNNNEECCTTEEDD CCOOMMMMAANNDDSS
     If a connection is established with an SSL server, any data received from
     the server is displayed and any key presses will be sent to the server.
     When used interactively (which means neither --qquuiieett nor --iiggnn__eeooff have
     been given), the session will be renegotiated if the line begins with an
     _R; if the line begins with a _Q or if end of file is reached, the
     connection will be closed down.

SS__CCLLIIEENNTT NNOOTTEESS
     ss__cclliieenntt can be used to debug SSL servers.  To connect to an SSL HTTP
     server the command:

           $ openssl s_client -connect servername:443

     would typically be used (HTTPS uses port 443).  If the connection
     succeeds, an HTTP command can be given such as "GET" to retrieve a web
     page.

     If the handshake fails, there are several possible causes; if it is
     nothing obvious like no client certificate, then the --bbuuggss, --ttllss11,
     --ttllss11__11,, --ttllss11__22, --nnoo__ttllss11, --nnoo__ttllss11__11, and --nnoo__ttllss11__22 options can be
     tried in case it is a buggy server.

     A frequent problem when attempting to get client certificates working is
     that a web client complains it has no certificates or gives an empty list
     to choose from.  This is normally because the server is not sending the
     client's certificate authority in its "acceptable CA list" when it
     requests a certificate.  By using ss__cclliieenntt the CA list can be viewed and
     checked.  However some servers only request client authentication after a
     specific URL is requested.  To obtain the list in this case it is
     necessary to use the --pprreexxiitt option and send an HTTP request for an
     appropriate page.

     If a certificate is specified on the command line using the --cceerrtt option,
     it will not be used unless the server specifically requests a client
     certificate.  Therefore merely including a client certificate on the
     command line is no guarantee that the certificate works.

     If there are problems verifying a server certificate, the --sshhoowwcceerrttss
     option can be used to show the whole chain.

     Compression methods are only supported for --ttllss11.

SS__CCLLIIEENNTT BBUUGGSS
     Because this program has a lot of options and also because some of the
     techniques used are rather old, the C source of ss__cclliieenntt is rather hard
     to read and not a model of how things should be done.  A typical SSL
     client program would be much simpler.

     The --vveerriiffyy option should really exit if the server verification fails.

     The --pprreexxiitt option is a bit of a hack.  We should really report
     information whenever a session is renegotiated.

SS__SSEERRVVEERR
     ooppeennssssll ss__sseerrvveerr [--aacccceepptt _p_o_r_t] [--bbuuggss] [--CCAAffiillee _f_i_l_e]
                      [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e] [--cciipphheerr _c_i_p_h_e_r_l_i_s_t]
                      [--ccoonntteexxtt _i_d] [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--ccrrllff]
                      [--ddcceerrtt _f_i_l_e] [--ddeebbuugg] [--ddhhppaarraamm _f_i_l_e] [--ddkkeeyy _f_i_l_e]
                      [--hhaacckk] [--HHTTTTPP] [--iidd__pprreeffiixx _a_r_g] [--kkeeyy _k_e_y_f_i_l_e] [--mmssgg]
                      [--nnbbiioo] [--nnbbiioo__tteesstt] [--nnoo__ddhhee] [--nnoo__ttllss11] [--nnoo__ttllss11__11]
                      [--nnoo__ttllss11__22] [--nnoo__ttmmpp__rrssaa] [--nnoocceerrtt] [--ppsskk _k_e_y]
                      [--ppsskk__hhiinntt _h_i_n_t] [--qquuiieett] [--sseerrvveerrpprreeff] [--ssttaattee] [--ttllss11]
                      [--ttllss11__11] [--ttllss11__22] [--VVeerriiffyy _d_e_p_t_h] [--vveerriiffyy _d_e_p_t_h]
                      [--WWWWWW] [--wwwwww]

     The ss__sseerrvveerr command implements a generic SSL/TLS server which listens
     for connections on a given port using SSL/TLS.

     The options are as follows:

     --aacccceepptt _p_o_r_t
             The TCP _p_o_r_t to listen on for connections.  If not specified,
             4433 is used.

     --bbuuggss   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     --CCAAffiillee _f_i_l_e
             A file containing trusted certificates to use during client
             authentication and to use when attempting to build the server
             certificate chain.  The list is also used in the list of
             acceptable client CAs passed to the client when a certificate is
             requested.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The _d_i_r_e_c_t_o_r_y to use for client certificate verification.  This
             directory must be in "hash format"; see --vveerriiffyy for more
             information.  These are also used when building the server
             certificate chain.

     --cceerrtt _f_i_l_e
             The certificate to use; most server's cipher suites require the
             use of a certificate and some require a certificate with a
             certain public key type: for example the DSS cipher suites
             require a certificate containing a DSS (DSA) key.  If not
             specified, the file _s_e_r_v_e_r_._p_e_m will be used.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             This allows the cipher list used by the server to be modified.
             When the client sends a list of supported ciphers, the first
             client cipher also included in the server list is used.  Because
             the client specifies the preference order, the order of the
             server cipherlist is irrelevant.  See the _C_I_P_H_E_R_S section for
             more information.

     --ccoonntteexxtt _i_d
             Sets the SSL context ID.  It can be given any string value.  If
             this option is not present, a default value will be used.

     --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll
             Check the peer certificate has not been revoked by its CA.  The
             CRLs are appended to the certificate file.  With the
             --ccrrll__cchheecckk__aallll option, all CRLs of all CAs in the chain are
             checked.

     --ccrrllff   This option translates a line feed from the terminal into CR+LF.

     --ddcceerrtt _f_i_l_e, --ddkkeeyy _f_i_l_e
             Specify an additional certificate and private key; these behave
             in the same manner as the --cceerrtt and --kkeeyy options except there is
             no default if they are not specified (no additional certificate
             or key is used).  As noted above some cipher suites require a
             certificate containing a key of a certain type.  Some cipher
             suites need a certificate carrying an RSA key and some a DSS
             (DSA) key.  By using RSA and DSS certificates and keys, a server
             can support clients which only support RSA or DSS cipher suites
             by using an appropriate certificate.

     --ddeebbuugg  Print extensive debugging information including a hex dump of all
             traffic.

     --ddhhppaarraamm _f_i_l_e
             The DH parameter file to use.  The ephemeral DH cipher suites
             generate keys using a set of DH parameters.  If not specified, an
             attempt is made to load the parameters from the server
             certificate file.  If this fails, a static set of parameters hard
             coded into the ss__sseerrvveerr program will be used.

     --hhaacckk   This option enables a further workaround for some early Netscape
             SSL code (?).

     --HHTTTTPP   Emulates a simple web server.  Pages will be resolved relative to
             the current directory; for example if the URL
             _h_t_t_p_s_:_/_/_m_y_h_o_s_t_/_p_a_g_e_._h_t_m_l is requested, the file _._/_p_a_g_e_._h_t_m_l will
             be loaded.  The files loaded are assumed to contain a complete
             and correct HTTP response (lines that are part of the HTTP
             response line and headers must end with CRLF).

     --iidd__pprreeffiixx _a_r_g
             Generate SSL/TLS session IDs prefixed by _a_r_g.  This is mostly
             useful for testing any SSL/TLS code (e.g. proxies) that wish to
             deal with multiple servers, when each of which might be
             generating a unique range of session IDs (e.g. with a certain
             prefix).

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.

     --mmssgg    Show all protocol messages with hex dump.

     --nnbbiioo   Turns on non-blocking I/O.

     --nnbbiioo__tteesstt
             Tests non-blocking I/O.

     --nnoo__ddhhee
             If this option is set, no DH parameters will be loaded,
             effectively disabling the ephemeral DH cipher suites.

     --nnoo__ttllss11 | --nnoo__ttllss11__11 | --nnoo__ttllss11__22
             By default, the initial handshake uses a method which should be
             compatible with clients supporting any version of TLS.  These
             options disable the use of TLS1.0, 1.1, and 1.2, respectively.

     --nnoo__ttmmpp__rrssaa
             Certain export cipher suites sometimes use a temporary RSA key;
             this option disables temporary RSA key generation.

     --nnoocceerrtt
             If this option is set, no certificate is used.  This restricts
             the cipher suites available to the anonymous ones (currently just
             anonymous DH).

     --ppsskk _k_e_y
             Use the PSK key _k_e_y when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     --ppsskk__hhiinntt _h_i_n_t
             Use the PSK identity hint _h_i_n_t when using a PSK cipher suite.

     --qquuiieett  Inhibit printing of session and certificate information.

     --sseerrvveerrpprreeff
             Use server's cipher preferences.

     --ssttaattee  Prints out the SSL session states.

     --ttllss11 | --ttllss11__11 | --ttllss11__22
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     --WWWWWW    Emulates a simple web server.  Pages will be resolved relative to
             the current directory; for example if the URL
             _h_t_t_p_s_:_/_/_m_y_h_o_s_t_/_p_a_g_e_._h_t_m_l is requested, the file _._/_p_a_g_e_._h_t_m_l will
             be loaded.

     --wwwwww    Sends a status message back to the client when it connects.  This
             includes lots of information about the ciphers used and various
             session parameters.  The output is in HTML format so this option
             will normally be used with a web browser.

     --VVeerriiffyy _d_e_p_t_h, --vveerriiffyy _d_e_p_t_h
             The verify _d_e_p_t_h to use.  This specifies the maximum length of
             the client certificate chain and makes the server request a
             certificate from the client.  With the --VVeerriiffyy option, the client
             must supply a certificate or an error occurs.  With the --vveerriiffyy
             option, a certificate is requested but the client does not have
             to send one.

SS__SSEERRVVEERR CCOONNNNEECCTTEEDD CCOOMMMMAANNDDSS
     If a connection request is established with an SSL client and neither the
     --wwwwww nor the --WWWWWW option has been used, then normally any data received
     from the client is displayed and any key presses will be sent to the
     client.

     Certain single letter commands are also recognized which perform special
     operations: these are listed below.

     _P     Send some plain text down the underlying TCP connection: this
           should cause the client to disconnect due to a protocol violation.

     _Q     End the current SSL connection and exit.

     _q     End the current SSL connection, but still accept new connections.

     _R     Renegotiate the SSL session and request a client certificate.

     _r     Renegotiate the SSL session.

     _S     Print out some session cache status information.

SS__SSEERRVVEERR NNOOTTEESS
     ss__sseerrvveerr can be used to debug SSL clients.  To accept connections from a
     web browser the command:

           $ openssl s_server -accept 443 -www

     can be used, for example.

     Most web browsers (in particular Netscape and MSIE) only support RSA
     cipher suites, so they cannot connect to servers which don't use a
     certificate carrying an RSA key or a version of OOppeennSSSSLL with RSA
     disabled.

     Although specifying an empty list of CAs when requesting a client
     certificate is strictly speaking a protocol violation, some SSL clients
     interpret this to mean any CA is acceptable.  This is useful for
     debugging purposes.

     The session parameters can printed out using the sseessss__iidd program.

SS__SSEERRVVEERR BBUUGGSS
     Because this program has a lot of options and also because some of the
     techniques used are rather old, the C source of ss__sseerrvveerr is rather hard
     to read and not a model of how things should be done.  A typical SSL
     server program would be much simpler.

     The output of common ciphers is wrong: it just gives the list of ciphers
     that OOppeennSSSSLL recognizes and the client supports.

     There should be a way for the ss__sseerrvveerr program to print out details of
     any unknown cipher suites a client says it supports.

SS__TTIIMMEE
     ooppeennssssll ss__ttiimmee [--bbuuggss] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e]
                    [--cciipphheerr _c_i_p_h_e_r_l_i_s_t] [--ccoonnnneecctt _h_o_s_t:_p_o_r_t] [--kkeeyy _k_e_y_f_i_l_e]
                    [--nnbbiioo] [--nneeww] [--nnoo__sshhuuttddoowwnn] [--rreeuussee] [--ttiimmee _s_e_c_o_n_d_s]
                    [--vveerriiffyy _d_e_p_t_h] [--wwwwww _p_a_g_e]

     The ss__cclliieenntt command implements a generic SSL/TLS client which connects
     to a remote host using SSL/TLS.  It can request a page from the server
     and includes the time to transfer the payload data in its timing
     measurements.  It measures the number of connections within a given
     timeframe, the amount of data transferred (if any), and calculates the
     average time spent for one connection.

     The options are as follows:

     --bbuuggss   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     --CCAAffiillee _f_i_l_e
             A file containing trusted certificates to use during server
             authentication and to use when attempting to build the client
             certificate chain.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The directory to use for server certificate verification.  This
             directory must be in "hash format"; see vveerriiffyy for more
             information.  These are also used when building the client
             certificate chain.

     --cceerrtt _f_i_l_e
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.  The file is in PEM format.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             This allows the cipher list sent by the client to be modified.
             Although the server determines which cipher suite is used, it
             should take the first supported cipher in the list sent by the
             client.  See the cciipphheerrss command for more information.

     --ccoonnnneecctt _h_o_s_t:_p_o_r_t
             This specifies the host and optional port to connect to.

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.  The file is in PEM format.

     --nnbbiioo   Turns on non-blocking I/O.

     --nneeww    Performs the timing test using a new session ID for each
             connection.  If neither --nneeww nor --rreeuussee are specified, they are
             both on by default and executed in sequence.

     --nnoo__sshhuuttddoowwnn
             Shut down the connection without sending a ``close notify''
             shutdown alert to the server.

     --rreeuussee  Performs the timing test using the same session ID; this can be
             used as a test that session caching is working.  If neither --nneeww
             nor --rreeuussee are specified, they are both on by default and
             executed in sequence.

     --ttiimmee _s_e_c_o_n_d_s
             Specifies how long (in seconds) ss__ttiimmee should establish
             connections and optionally transfer payload data from a server.
             The default is 30 seconds.  Server and client performance and the
             link speed determine how many connections ss__ttiimmee can establish.

     --vveerriiffyy _d_e_p_t_h
             The verify depth to use.  This specifies the maximum length of
             the server certificate chain and turns on server certificate
             verification.  Currently the verify operation continues after
             errors, so all the problems with a certificate chain can be seen.
             As a side effect, the connection will never fail due to a server
             certificate verify failure.

     --wwwwww _p_a_g_e
             This specifies the page to GET from the server.  A value of `/'
             gets the index.htm[l] page.  If this parameter is not specified,
             ss__ttiimmee will only perform the handshake to establish SSL
             connections but not transfer any payload data.

SS__TTIIMMEE NNOOTTEESS
     ss__cclliieenntt can be used to measure the performance of an SSL connection.  To
     connect to an SSL HTTP server and get the default page the command

           $ openssl s_time -connect servername:443 -www / -CApath yourdir \
                   -CAfile yourfile.pem -cipher commoncipher

     would typically be used (HTTPS uses port 443).  ``commoncipher'' is a
     cipher to which both client and server can agree; see the cciipphheerrss command
     for details.

     If the handshake fails, there are several possible causes: if it is
     nothing obvious like no client certificate, the --bbuuggss option can be tried
     in case it is a buggy server.

     A frequent problem when attempting to get client certificates working is
     that a web client complains it has no certificates or gives an empty list
     to choose from.  This is normally because the server is not sending the
     clients certificate authority in its "acceptable CA list" when it
     requests a certificate.  By using ss__cclliieenntt, the CA list can be viewed and
     checked.  However some servers only request client authentication after a
     specific URL is requested.  To obtain the list in this case, it is
     necessary to use the --pprreexxiitt option of ss__cclliieenntt and send an HTTP request
     for an appropriate page.

     If a certificate is specified on the command line using the --cceerrtt option,
     it will not be used unless the server specifically requests a client
     certificate.  Therefore merely including a client certificate on the
     command line is no guarantee that the certificate works.

SS__TTIIMMEE BBUUGGSS
     Because this program does not have all the options of the ss__cclliieenntt
     program to turn protocols on and off, you may not be able to measure the
     performance of all protocols with all servers.

     The --vveerriiffyy option should really exit if the server verification fails.

SSEESSSS__IIDD
     ooppeennssssll sseessss__iidd [--cceerrtt] [--ccoonntteexxtt _I_D] [--iinn _f_i_l_e] [--iinnffoorrmm _D_E_R | _P_E_M]
                     [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M] [--tteexxtt]

     The sseessss__iidd program processes the encoded version of the SSL session
     structure and optionally prints out SSL session details (for example the
     SSL session master key) in human readable format.  Since this is a
     diagnostic tool that needs some knowledge of the SSL protocol to use
     properly, most users will not need to use it.

     The options are as follows:

     --cceerrtt   If a certificate is present in the session, it will be output
             using this option; if the --tteexxtt option is also present, then it
             will be printed out in text form.

     --ccoonntteexxtt _I_D
             This option can set the session ID so the output session
             information uses the supplied _I_D.  The _I_D can be any string of
             characters.  This option won't normally be used.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read session information from,
             or standard input by default.

     --iinnffoorrmm _D_E_R | _P_E_M
             This specifies the input format.  The _D_E_R argument uses an ASN1
             DER-encoded format containing session details.  The precise
             format can vary from one version to the next.  The _P_E_M form is
             the default format: it consists of the DER format base64-encoded
             with additional header and footer lines.

     --nnoooouutt  This option prevents output of the encoded version of the
             session.

     --oouutt _f_i_l_e
             This specifies the output _f_i_l_e to write session information to,
             or standard output if this option is not specified.

     --oouuttffoorrmm _D_E_R | _P_E_M
             This specifies the output format; the options have the same
             meaning as the --iinnffoorrmm option.

     --tteexxtt   Prints out the various public or private key components in plain
             text in addition to the encoded version.

SSEESSSS__IIDD OOUUTTPPUUTT
     Typical output:

     SSL-Session:
         Protocol  : TLSv1
         Cipher    : 0016
         Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
         Session-ID-ctx: 01000000
         Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
         Key-Arg   : None
         Start Time: 948459261
         Timeout   : 300 (sec)
         Verify return code 0 (ok)

     These are described below in more detail.

     _P_r_o_t_o_c_o_l             This is the protocol in use.
     _C_i_p_h_e_r               The cipher used is the actual raw SSL or TLS cipher
                          code; see the SSL or TLS specifications for more
                          information.
     _S_e_s_s_i_o_n_-_I_D           The SSL session ID in hex format.
     _S_e_s_s_i_o_n_-_I_D_-_c_t_x       The session ID context in hex format.
     _M_a_s_t_e_r_-_K_e_y           This is the SSL session master key.
     _K_e_y_-_A_r_g              The key argument; this is only used in SSL v2.
     _S_t_a_r_t _T_i_m_e           This is the session start time, represented as an
                          integer in standard UNIX format.
     _T_i_m_e_o_u_t              The timeout in seconds.
     _V_e_r_i_f_y _r_e_t_u_r_n _c_o_d_e   This is the return code when an SSL client
                          certificate is verified.

SSEESSSS__IIDD NNOOTTEESS
     The PEM-encoded session format uses the header and footer lines:

           -----BEGIN SSL SESSION PARAMETERS-----
           -----END SSL SESSION PARAMETERS-----

     Since the SSL session output contains the master key, it is possible to
     read the contents of an encrypted session using this information.
     Therefore appropriate security precautions should be taken if the
     information is being output by a "real" application.  This is, however,
     strongly discouraged and should only be used for debugging purposes.

SSEESSSS__IIDD BBUUGGSS
     The cipher and start time should be printed out in human readable form.

SSMMIIMMEE
     ooppeennssssll ssmmiimmee [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess |
                   --ddeess33 | --rrcc22--4400 | --rrcc22--6644 | --rrcc22--112288] [--bbiinnaarryy]
                   [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrttffiillee _f_i_l_e]
                   [--cchheecckk__ssss__ssiigg] [--ccoonntteenntt _f_i_l_e] [--ccrrll__cchheecckk]
                   [--ccrrll__cchheecckk__aallll] [--ddeeccrryypptt] [--eennccrryypptt] [--eexxtteennddeedd__ccrrll]
                   [--ffrroomm _a_d_d_r] [--iiggnnoorree__ccrriittiiccaall] [--iinn _f_i_l_e] [--iinnddeeff]
                   [--iinnffoorrmm _D_E_R | _P_E_M | _S_M_I_M_E] [--iinnkkeeyy _f_i_l_e] [--iissssuueerr__cchheecckkss]
                   [--kkeeyyffoorrmm _P_E_M] [--mmdd _d_i_g_e_s_t] [--nnooaattttrr] [--nnoocceerrttss] [--nnoocchhaaiinn]
                   [--nnooddeettaacchh] [--nnooiinnddeeff] [--nnooiinntteerrnn] [--nnoossiiggss] [--nnoovveerriiffyy]
                   [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _P_E_M | _S_M_I_M_E] [--ppaassssiinn _a_r_g]
                   [--ppkk77oouutt] [--ppoolliiccyy__cchheecckk] [--rreecciipp _f_i_l_e] [--rreessiiggnn] [--ssiiggnn]
                   [--ssiiggnneerr _f_i_l_e] [--ssttrreeaamm] [--ssuubbjjeecctt _s] [--tteexxtt] [--ttoo _a_d_d_r]
                   [--vveerriiffyy] [--xx550099__ssttrriicctt] [_c_e_r_t_._p_e_m _._._.]

     The ssmmiimmee command handles _S_/_M_I_M_E mail.  It can encrypt, decrypt, sign,
     and verify _S_/_M_I_M_E messages.

     There are six operation options that set the type of operation to be
     performed.  The meaning of the other options varies according to the
     operation type.

     The six operation options are as follows:

     --ddeeccrryypptt
           Decrypt mail using the supplied certificate and private key.
           Expects an encrypted mail message in _M_I_M_E format for the input
           file.  The decrypted mail is written to the output file.

     --eennccrryypptt
           Encrypt mail for the given recipient certificates.  Input file is
           the message to be encrypted.  The output file is the encrypted mail
           in _M_I_M_E format.

     --ppkk77oouutt
           Takes an input message and writes out a PEM-encoded PKCS#7
           structure.

     --rreessiiggnn
           Resign a message: take an existing message and one or more new
           signers.

     --ssiiggnn
           Sign mail using the supplied certificate and private key.  Input
           file is the message to be signed.  The signed message in _M_I_M_E
           format is written to the output file.

     --vveerriiffyy
           Verify signed mail.  Expects a signed mail message on input and
           outputs the signed data.  Both clear text and opaque signing is
           supported.

     The remaining options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33 | --rrcc22--4400 | --rrcc22--6644 | --rrcc22--112288
           The encryption algorithm to use.  128-, 192-, or 256-bit AES, DES
           (56 bits), triple DES (168 bits), or 40-, 64-, or 128-bit RC2,
           respectively; if not specified, 40-bit RC2 is used.  Only used with
           --eennccrryypptt.

     --bbiinnaarryy
           Normally, the input message is converted to "canonical" format
           which is effectively using CR and LF as end of line - as required
           by the _S_/_M_I_M_E specification.  When this option is present no
           translation occurs.  This is useful when handling binary data which
           may not be in _M_I_M_E format.

     --CCAAffiillee _f_i_l_e
           A _f_i_l_e containing trusted CA certificates; only used with --vveerriiffyy.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
           A _d_i_r_e_c_t_o_r_y containing trusted CA certificates; only used with
           --vveerriiffyy.  This directory must be a standard certificate directory:
           that is, a hash of each subject name (using xx550099 --hhaasshh) should be
           linked to each certificate.

     _c_e_r_t_._p_e_m _._._.
           One or more certificates of message recipients: used when
           encrypting a message.

     --cceerrttffiillee _f_i_l_e
           Allows additional certificates to be specified.  When signing,
           these will be included with the message.  When verifying, these
           will be searched for the signers' certificates.  The certificates
           should be in PEM format.

     --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll, --eexxtteennddeedd__ccrrll,
           --iiggnnoorree__ccrriittiiccaall, --iissssuueerr__cchheecckkss, --ppoolliiccyy__cchheecckk, --xx550099__ssttrriicctt
           Set various certificate chain validation options.  See the VVEERRIIFFYY
           command for details.

     --ccoonntteenntt _f_i_l_e
           This specifies a file containing the detached content.  This is
           only useful with the --vveerriiffyy command.  This is only usable if the
           PKCS#7 structure is using the detached signature form where the
           content is not included.  This option will override any content if
           the input format is _S_/_M_I_M_E and it uses the multipart/signed _M_I_M_E
           content type.

     --ffrroomm _a_d_d_r, --ssuubbjjeecctt _s, --ttoo _a_d_d_r
           The relevant mail headers.  These are included outside the signed
           portion of a message so they may be included manually.  When
           signing, many _S_/_M_I_M_E mail clients check that the signer's
           certificate email address matches the From: address.

     --iinn _f_i_l_e
           The input message to be encrypted or signed or the _M_I_M_E message to
           be decrypted or verified.

     --iinnddeeff
           Enable streaming I/O for encoding operations.  This permits single
           pass processing of data without the need to hold the entire
           contents in memory, potentially supporting very large files.
           Streaming is automatically set for S/MIME signing with detached
           data if the output format is SMIME; it is currently off by default
           for all other operations.

     --iinnffoorrmm _D_E_R | _P_E_M | _S_M_I_M_E
           This specifies the input format for the PKCS#7 structure.  The
           default is _S_M_I_M_E, which reads an _S_/_M_I_M_E format message.  _P_E_M and
           _D_E_R format change this to expect PEM and DER format PKCS#7
           structures instead.  This currently only affects the input format
           of the PKCS#7 structure; if no PKCS#7 structure is being input (for
           example with --eennccrryypptt or --ssiiggnn), this option has no effect.

     --iinnkkeeyy _f_i_l_e
           The private key to use when signing or decrypting.  This must match
           the corresponding certificate.  If this option is not specified,
           the private key must be included in the certificate file specified
           with the --rreecciipp or --ssiiggnneerr file.  When signing, this option can be
           used multiple times to specify successive keys.

     --kkeeyyffoorrmm _P_E_M
           Input private key format.

     --mmdd _d_i_g_e_s_t
           The digest algorithm to use when signing or resigning.  If not
           present then the default digest algorithm for the signing key is
           used (usually SHA1).

     --nnooaattttrr
           Normally, when a message is signed a set of attributes are included
           which include the signing time and supported symmetric algorithms.
           With this option they are not included.

     --nnoocceerrttss
           When signing a message, the signer's certificate is normally
           included; with this option it is excluded.  This will reduce the
           size of the signed message but the verifier must have a copy of the
           signer's certificate available locally (passed using the --cceerrttffiillee
           option, for example).

     --nnoocchhaaiinn
           Do not do chain verification of signers' certificates: that is,
           don't use the certificates in the signed message as untrusted CAs.

     --nnooddeettaacchh
           When signing a message use opaque signing: this form is more
           resistant to translation by mail relays but it cannot be read by
           mail agents that do not support _S_/_M_I_M_E.  Without this option
           cleartext signing with the _M_I_M_E type multipart/signed is used.

     --nnooiinnddeeff
           Disable streaming I/O where it would produce an encoding of
           indefinite length.  This option currently has no effect.  In future
           streaming will be enabled by default on all relevant operations and
           this option will disable it.

     --nnooiinntteerrnn
           When verifying a message, normally certificates (if any) included
           in the message are searched for the signing certificate.  With this
           option, only the certificates specified in the --cceerrttffiillee option are
           used.  The supplied certificates can still be used as untrusted CAs
           however.

     --nnoossiiggss
           Don't try to verify the signatures on the message.

     --nnoovveerriiffyy
           Do not verify the signer's certificate of a signed message.

     --oouutt _f_i_l_e
           The message text that has been decrypted or verified, or the output
           _M_I_M_E format message that has been signed or verified.

     --oouuttffoorrmm _D_E_R | _P_E_M | _S_M_I_M_E
           This specifies the output format for the PKCS#7 structure.  The
           default is _S_M_I_M_E, which writes an _S_/_M_I_M_E format message.  _P_E_M and
           _D_E_R format change this to write PEM and DER format PKCS#7
           structures instead.  This currently only affects the output format
           of the PKCS#7 structure; if no PKCS#7 structure is being output
           (for example with --vveerriiffyy or --ddeeccrryypptt) this option has no effect.

     --ppaassssiinn _a_r_g
           The key password source.

     --rreecciipp _f_i_l_e
           The recipients certificate when decrypting a message.  This
           certificate must match one of the recipients of the message or an
           error occurs.

     --ssiiggnneerr _f_i_l_e
           A signing certificate when signing or resigning a message; this
           option can be used multiple times if more than one signer is
           required.  If a message is being verified, the signer's
           certificates will be written to this file if the verification was
           successful.

     --ssttrreeaamm
           The same as --iinnddeeff.

     --tteexxtt
           This option adds plain text (text/plain) _M_I_M_E headers to the
           supplied message if encrypting or signing.  If decrypting or
           verifying, it strips off text headers: if the decrypted or verified
           message is not of _M_I_M_E type text/plain then an error occurs.

SSMMIIMMEE NNOOTTEESS
     The _M_I_M_E message must be sent without any blank lines between the headers
     and the output.  Some mail programs will automatically add a blank line.
     Piping the mail directly to an MTA is one way to achieve the correct
     format.

     The supplied message to be signed or encrypted must include the necessary
     _M_I_M_E headers or many _S_/_M_I_M_E clients won't display it properly (if at
     all).  You can use the --tteexxtt option to automatically add plain text
     headers.

     A "signed and encrypted" message is one where a signed message is then
     encrypted.  This can be produced by encrypting an already signed message:
     see the _S_M_I_M_E _E_X_A_M_P_L_E_S section.

     This version of the program only allows one signer per message, but it
     will verify multiple signers on received messages.  Some _S_/_M_I_M_E clients
     choke if a message contains multiple signers.  It is possible to sign
     messages "in parallel" by signing an already signed message.

     The options --eennccrryypptt and --ddeeccrryypptt reflect common usage in _S_/_M_I_M_E clients.
     Strictly speaking these process PKCS#7 enveloped data: PKCS#7 encrypted
     data is used for other purposes.

     The --rreessiiggnn option uses an existing message digest when adding a new
     signer.  This means that attributes must be present in at least one
     existing signer using the same message digest or this operation will
     fail.

     The --ssttrreeaamm and --iinnddeeff options enable experimental streaming I/O support.
     As a result the encoding is BER using indefinite length constructed
     encoding and no longer DER.  Streaming is supported for the --eennccrryypptt and
     --ssiiggnn operations if the content is not detached.

     Streaming is always used for the --ssiiggnn operation with detached data but
     since the content is no longer part of the PKCS#7 structure the encoding
     remains DER.

SSMMIIMMEE EEXXIITT CCOODDEESS
     _0     The operation was completely successful.

     _1     An error occurred parsing the command options.

     _2     One of the input files could not be read.

     _3     An error occurred creating the PKCS#7 file or when reading the _M_I_M_E
           message.

     _4     An error occurred decrypting or verifying the message.

     _5     The message was verified correctly, but an error occurred writing
           out the signer's certificates.

SSMMIIMMEE EEXXAAMMPPLLEESS
     Create a cleartext signed message:

           $ openssl smime -sign -in message.txt -text -out mail.msg \
                   -signer mycert.pem

     Create an opaque signed message:

           $ openssl smime -sign -in message.txt -text -out mail.msg \
                   -nodetach -signer mycert.pem

     Create a signed message, include some additional certificates and read
     the private key from another file:

           $ openssl smime -sign -in in.txt -text -out mail.msg \
                   -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem

     Create a signed message with two signers:

           openssl smime -sign -in message.txt -text -out mail.msg \
                   -signer mycert.pem -signer othercert.pem

     Send a signed message under UNIX directly to sendmail(8), including
     headers:

           $ openssl smime -sign -in in.txt -text -signer mycert.pem \
                   -from steve@openssl.org -to someone@somewhere \
                   -subject "Signed message" | sendmail someone@somewhere

     Verify a message and extract the signer's certificate if successful:

           $ openssl smime -verify -in mail.msg -signer user.pem \
                   -out signedtext.txt

     Send encrypted mail using triple DES:

           $ openssl smime -encrypt -in in.txt -from steve@openssl.org \
                   -to someone@somewhere -subject "Encrypted message" \
                   -des3 -out mail.msg user.pem

     Sign and encrypt mail:

           $ openssl smime -sign -in ml.txt -signer my.pem -text | \
                   openssl smime -encrypt -out mail.msg \
                   -from steve@openssl.org -to someone@somewhere \
                   -subject "Signed and Encrypted message" -des3 user.pem

     NNoottee: The encryption command does not include the --tteexxtt option because
     the message being encrypted already has _M_I_M_E headers.

     Decrypt mail:

           $ openssl smime -decrypt -in mail.msg -recip mycert.pem \
                   -inkey key.pem"

     The output from Netscape form signing is a PKCS#7 structure with the
     detached signature format.  You can use this program to verify the
     signature by line wrapping the base64-encoded structure and surrounding
     it with:

           -----BEGIN PKCS7-----
           -----END PKCS7-----

     and using the command:

           $ openssl smime -verify -inform PEM -in signature.pem \
                   -content content.txt

     Alternatively, you can base64 decode the signature and use:

           $ openssl smime -verify -inform DER -in signature.der \
                   -content content.txt

     Create an encrypted message using 128-bit AES:

           openssl smime -encrypt -in plain.txt -aes128 \
                   -out mail.msg cert.pem

     Add a signer to an existing message:

           openssl smime -resign -in mail.msg -signer newsign.pem \
                   -out mail2.msg

SSMMIIMMEE BBUUGGSS
     The _M_I_M_E parser isn't very clever: it seems to handle most messages that
     I've thrown at it, but it may choke on others.

     The code currently will only write out the signer's certificate to a
     file: if the signer has a separate encryption certificate this must be
     manually extracted.  There should be some heuristic that determines the
     correct encryption certificate.

     Ideally, a database should be maintained of a certificate for each email
     address.

     The code doesn't currently take note of the permitted symmetric
     encryption algorithms as supplied in the _S_M_I_M_E_C_a_p_a_b_i_l_i_t_i_e_s signed
     attribute.  This means the user has to manually include the correct
     encryption algorithm.  It should store the list of permitted ciphers in a
     database and only use those.

     No revocation checking is done on the signer's certificate.

     The current code can only handle _S_/_M_I_M_E v2 messages; the more complex
     _S_/_M_I_M_E v3 structures may cause parsing errors.

SSMMIIMMEE HHIISSTTOORRYY
     The use of multiple --ssiiggnneerr options and the --rreessiiggnn command were first
     added in OOppeennSSSSLL 1.0.0.

SSPPEEEEDD
     ooppeennssssll ssppeeeedd [aaeess] [aaeess--112288--ccbbcc] [aaeess--119922--ccbbcc] [aaeess--225566--ccbbcc]
                   [aaeess--112288--ggccmm] [aaeess--225566--ggccmm] [bblloowwffiisshh] [bbff--ccbbcc] [ccaasstt]
                   [ccaasstt--ccbbcc] [cchhaacchhaa2200--ppoollyy11330055] [ddeess] [ddeess--ccbbcc] [ddeess--eeddee33]
                   [ddssaa] [ddssaa551122] [ddssaa11002244] [ddssaa22004488] [hhmmaacc] [mmdd44] [mmdd55] [rrcc22]
                   [rrcc22--ccbbcc] [rrcc44] [rrmmdd116600] [rrssaa] [rrssaa551122] [rrssaa11002244] [rrssaa22004488]
                   [rrssaa44009966] [sshhaa11] [--ddeeccrryypptt] [--eellaappsseedd] [--eevvpp _e] [--mmrr]
                   [--mmuullttii _n_u_m_b_e_r]

     The ssppeeeedd command is used to test the performance of cryptographic
     algorithms.

     [zzeerroo oorr mmoorree tteesstt aallggoorriitthhmmss]
           If any options are given, ssppeeeedd tests those algorithms, otherwise
           all of the above are tested.

     --ddeeccrryypptt
           Time decryption instead of encryption (only EVP).

     --eellaappsseedd
           Measure time in real time instead of CPU user time.

     --eevvpp _e
           Use EVP _e.

     --mmrr   Produce machine readable output.

     --mmuullttii _n_u_m_b_e_r
           Run _n_u_m_b_e_r benchmarks in parallel.

TTSS
     ooppeennssssll ttss --qquueerryy [--mmdd44 | --mmdd55 | --rriippeemmdd116600 | --sshhaa11] [--cceerrtt]
                [--ccoonnffiigg _c_o_n_f_i_g_f_i_l_e] [--ddaattaa _f_i_l_e___t_o___h_a_s_h]
                [--ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s] [--iinn _r_e_q_u_e_s_t_._t_s_q] [--nnoo__nnoonnccee]
                [--oouutt _r_e_q_u_e_s_t_._t_s_q] [--ppoolliiccyy _o_b_j_e_c_t___i_d] [--tteexxtt]

     ooppeennssssll ttss --rreeppllyy [--cchhaaiinn _c_e_r_t_s___f_i_l_e_._p_e_m] [--ccoonnffiigg _c_o_n_f_i_g_f_i_l_e]
                [--iinn _r_e_s_p_o_n_s_e_._t_s_r] [--iinnkkeeyy _p_r_i_v_a_t_e_._p_e_m] [--oouutt _r_e_s_p_o_n_s_e_._t_s_r]
                [--ppaassssiinn _a_r_g] [--ppoolliiccyy _o_b_j_e_c_t___i_d] [--qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q]
                [--sseeccttiioonn _t_s_a___s_e_c_t_i_o_n] [--ssiiggnneerr _t_s_a___c_e_r_t_._p_e_m] [--tteexxtt]
                [--ttookkeenn__iinn] [--ttookkeenn__oouutt]

     ooppeennssssll ttss --vveerriiffyy [--CCAAffiillee _t_r_u_s_t_e_d___c_e_r_t_s_._p_e_m]
                [--CCAAppaatthh _t_r_u_s_t_e_d___c_e_r_t___p_a_t_h] [--ddaattaa _f_i_l_e___t_o___h_a_s_h]
                [--ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s] [--iinn _r_e_s_p_o_n_s_e_._t_s_r]
                [--qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q] [--ttookkeenn__iinn]
                [--uunnttrruusstteedd _c_e_r_t___f_i_l_e_._p_e_m]

     The ttss command is a basic Time Stamping Authority (TSA) client and server
     application as specified in RFC 3161 (Time-Stamp Protocol, TSP).  A TSA
     can be part of a PKI deployment and its role is to provide long term
     proof of the existence of a certain datum before a particular time.  Here
     is a brief description of the protocol:

     1.   The TSA client computes a one-way hash value for a data file and
          sends the hash to the TSA.

     2.   The TSA attaches the current date and time to the received hash
          value, signs them and sends the time stamp token back to the client.
          By creating this token the TSA certifies the existence of the
          original data file at the time of response generation.

     3.   The TSA client receives the time stamp token and verifies the
          signature on it.  It also checks if the token contains the same hash
          value that it had sent to the TSA.

     There is one DER-encoded protocol data unit defined for transporting a
     time stamp request to the TSA and one for sending the time stamp response
     back to the client.  The ttss command has three main functions: creating a
     time stamp request based on a data file; creating a time stamp response
     based on a request; and verifying if a response corresponds to a
     particular request or a data file.

     There is no support for sending the requests/responses automatically over
     HTTP or TCP yet as suggested in RFC 3161.  Users must send the requests
     either by FTP or email.

     The --qquueerryy switch can be used for creating and printing a time stamp
     request with the following options:

     --cceerrtt   The TSA is expected to include its signing certificate in the
             response.

     --ccoonnffiigg _c_o_n_f_i_g_f_i_l_e
             The configuration file to use.  This option overrides the
             OPENSSL_CONF environment variable.  Only the OID section of the
             config file is used with the --qquueerryy command.

     --ddaattaa _f_i_l_e___t_o___h_a_s_h
             The data file for which the time stamp request needs to be
             created.  stdin is the default if neither the --ddaattaa nor the
             --ddiiggeesstt option is specified.

     --ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s
             It is possible to specify the message imprint explicitly without
             the data file.  The imprint must be specified in a hexadecimal
             format, two characters per byte, the bytes optionally separated
             by colons (e.g. 1A:F6:01:... or 1AF601...).  The number of bytes
             must match the message digest algorithm in use.

     --iinn _r_e_q_u_e_s_t_._t_s_q
             This option specifies a previously created time stamp request in
             DER format that will be printed into the output file.  Useful
             when you need to examine the content of a request in human-
             readable format.

     --mmdd44||mmdd55||rriippeemmdd116600||sshhaa||sshhaa11
             The message digest to apply to the data file.  It supports all
             the message digest algorithms that are supported by the ddggsstt
             command.  The default is SHA-1.

     --nnoo__nnoonnccee
             No nonce is specified in the request if this option is given.
             Otherwise a 64-bit long pseudo-random none is included in the
             request.  It is recommended to use nonce to protect against
             replay-attacks.

     --oouutt _r_e_q_u_e_s_t_._t_s_q
             Name of the output file to which the request will be written.
             The default is stdout.

     --ppoolliiccyy _o_b_j_e_c_t___i_d
             The policy that the client expects the TSA to use for creating
             the time stamp token.  Either the dotted OID notation or OID
             names defined in the config file can be used.  If no policy is
             requested the TSA will use its own default policy.

     --tteexxtt   If this option is specified the output is in human-readable text
             format instead of DER.

     A time stamp response (TimeStampResp) consists of a response status and
     the time stamp token itself (ContentInfo), if the token generation was
     successful.  The --rreeppllyy command is for creating a time stamp response or
     time stamp token based on a request and printing the response/token in
     human-readable format.  If --ttookkeenn__oouutt is not specified the output is
     always a time stamp response (TimeStampResp), otherwise it is a time
     stamp token (ContentInfo).

     --cchhaaiinn _c_e_r_t_s___f_i_l_e_._p_e_m
             The collection of certificates, in PEM format, that will be
             included in the response in addition to the signer certificate if
             the --cceerrtt option was used for the request.  This file is supposed
             to contain the certificate chain for the signer certificate from
             its issuer upwards.  The --rreeppllyy command does not build a
             certificate chain automatically.

     --ccoonnffiigg _c_o_n_f_i_g_f_i_l_e
             The configuration file to use.  This option overrides the
             OPENSSL_CONF environment variable.  See _T_S _C_O_N_F_I_G_U_R_A_T_I_O_N _F_I_L_E
             _O_P_T_I_O_N_S for configurable variables.

     --iinn _r_e_s_p_o_n_s_e_._t_s_r
             Specifies a previously created time stamp response or time stamp
             token, if --ttookkeenn__iinn is also specified, in DER format that will be
             written to the output file.  This option does not require a
             request; it is useful, for example, when you need to examine the
             content of a response or token or you want to extract the time
             stamp token from a response.  If the input is a token and the
             output is a time stamp response a default ``granted'' status info
             is added to the token.

     --iinnkkeeyy _p_r_i_v_a_t_e_._p_e_m
             The signer private key of the TSA in PEM format.  Overrides the
             ssiiggnneerr__kkeeyy config file option.

     --oouutt _r_e_s_p_o_n_s_e_._t_s_r
             The response is written to this file.  The format and content of
             the file depends on other options (see --tteexxtt and --ttookkeenn__oouutt).
             The default is stdout.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppoolliiccyy _o_b_j_e_c_t___i_d
             The default policy to use for the response unless the client
             explicitly requires a particular TSA policy.  The OID can be
             specified either in dotted notation or with its name.  Overrides
             the ddeeffaauulltt__ppoolliiccyy config file option.

     --qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q
             The name of the file containing a DER-encoded time stamp request.

     --sseeccttiioonn _t_s_a___s_e_c_t_i_o_n
             The name of the config file section containing the settings for
             the response generation.  If not specified the default TSA
             section is used; see _T_S _C_O_N_F_I_G_U_R_A_T_I_O_N _F_I_L_E _O_P_T_I_O_N_S for details.

     --ssiiggnneerr _t_s_a___c_e_r_t_._p_e_m
             The signer certificate of the TSA in PEM format.  The TSA signing
             certificate must have exactly one extended key usage assigned to
             it: timeStamping.  The extended key usage must also be critical,
             otherwise the certificate is going to be refused.  Overrides the
             ssiiggnneerr__cceerrtt variable of the config file.

     --tteexxtt   If this option is specified the output is human-readable text
             format instead of DER.

     --ttookkeenn__iinn
             This flag can be used together with the --iinn option and indicates
             that the input is a DER-encoded time stamp token (ContentInfo)
             instead of a time stamp response (TimeStampResp).

     --ttookkeenn__oouutt
             The output is a time stamp token (ContentInfo) instead of time
             stamp response (TimeStampResp).

     The --vveerriiffyy command is for verifying if a time stamp response or time
     stamp token is valid and matches a particular time stamp request or data
     file.  The --vveerriiffyy command does not use the configuration file.

     --CCAAffiillee _t_r_u_s_t_e_d___c_e_r_t_s_._p_e_m
             The name of the file containing a set of trusted self-signed CA
             certificates in PEM format.  See the similar option of vveerriiffyy for
             additional details.  Either this option or --CCAAppaatthh must be
             specified.

     --CCAAppaatthh _t_r_u_s_t_e_d___c_e_r_t___p_a_t_h
             The name of the directory containing the trused CA certificates
             of the client.  See the similar option of vveerriiffyy for additional
             details.  Either this option or --CCAAffiillee must be specified.

     --ddaattaa _f_i_l_e___t_o___h_a_s_h
             The response or token must be verified against _f_i_l_e___t_o___h_a_s_h.  The
             file is hashed with the message digest algorithm specified in the
             token.  The --ddiiggeesstt and --qquueerryyffiillee options must not be specified
             with this one.

     --ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s
             The response or token must be verified against the message digest
             specified with this option.  The number of bytes must match the
             message digest algorithm specified in the token.  The --ddaattaa and
             --qquueerryyffiillee options must not be specified with this one.

     --iinn _r_e_s_p_o_n_s_e_._t_s_r
             The time stamp response that needs to be verified, in DER format.
             This option in mandatory.

     --qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q
             The original time stamp request, in DER format.  The --ddaattaa and
             --ddiiggeesstt options must not be specified with this one.

     --ttookkeenn__iinn
             This flag can be used together with the --iinn option and indicates
             that the input is a DER-encoded time stamp token (ContentInfo)
             instead of a time stamp response (TimeStampResp).

     --uunnttrruusstteedd _c_e_r_t___f_i_l_e_._p_e_m
             Set of additional untrusted certificates in PEM format which may
             be needed when building the certificate chain for the TSA's
             signing certificate.  This file must contain the TSA signing
             certificate and all intermediate CA certificates unless the
             response includes them.

TTSS CCOONNFFIIGGUURRAATTIIOONN FFIILLEE OOPPTTIIOONNSS
     The --qquueerryy and --rreeppllyy options make use of a configuration file defined by
     the OPENSSL_CONF environment variable.  The --qquueerryy option uses only the
     symbolic OID names section and it can work without it.  However, the
     --rreeppllyy option needs the config file for its operation.

     When there is a command line switch equivalent of a variable the switch
     always overrides the settings in the config file.

     ttssaa _s_e_c_t_i_o_n, ddeeffaauulltt__ttssaa
             This is the main section and it specifies the name of another
             section that contains all the options for the --rreeppllyy option.
             This default section can be overridden with the --sseeccttiioonn command
             line switch.

     ooiidd__ffiillee
             See ccaa for a description.

     ooiidd__sseeccttiioonn
             See ccaa for a description.

     sseerriiaall  The name of the file containing the hexadecimal serial number of
             the last time stamp response created.  This number is incremented
             by 1 for each response.  If the file does not exist at the time
             of response generation a new file is created with serial number
             1.  This parameter is mandatory.

     ssiiggnneerr__cceerrtt
             TSA signing certificate, in PEM format.  The same as the --ssiiggnneerr
             command line option.

     cceerrttss   A file containing a set of PEM-encoded certificates that need to
             be included in the response.  The same as the --cchhaaiinn command line
             option.

     ssiiggnneerr__kkeeyy
             The private key of the TSA, in PEM format.  The same as the
             --iinnkkeeyy command line option.

     ddeeffaauulltt__ppoolliiccyy
             The default policy to use when the request does not mandate any
             policy.  The same as the --ppoolliiccyy command line option.

     ootthheerr__ppoolliicciieess
             Comma separated list of policies that are also acceptable by the
             TSA and used only if the request explicitly specifies one of
             them.

     ddiiggeessttss
             The list of message digest algorithms that the TSA accepts.  At
             least one algorithm must be specified.  This parameter is
             mandatory.

     aaccccuurraaccyy
             The accuracy of the time source of the TSA in seconds,
             milliseconds and microseconds.  For example, secs:1,
             millisecs:500, microsecs:100.  If any of the components is
             missing, zero is assumed for that field.

     cclloocckk__pprreecciissiioonn__ddiiggiittss
             Specifies the maximum number of digits, which represent the
             fraction of seconds, that need to be included in the time field.
             The trailing zeroes must be removed from the time, so there might
             actually be fewer digits, or no fraction of seconds at all.  The
             maximum value is 6; the default is 0.

     oorrddeerriinngg
             If this option is yes, the responses generated by this TSA can
             always be ordered, even if the time difference between two
             responses is less than the sum of their accuracies.  The default
             is no.

     ttssaa__nnaammee
             Set this option to yes if the subject name of the TSA must be
             included in the TSA name field of the response.  The default is
             no.

     eessss__cceerrtt__iidd__cchhaaiinn
             The SignedData objects created by the TSA always contain the
             certificate identifier of the signing certificate in a signed
             attribute (see RFC 2634, Enhanced Security Services).  If this
             option is set to yes and either the cceerrttss variable or the --cchhaaiinn
             option is specified then the certificate identifiers of the chain
             will also be included in the SigningCertificate signed attribute.
             If this variable is set to no, only the signing certificate
             identifier is included.  The default is no.

TTSS EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
     OPENSSL_CONF contains the path of the configuration file and can be
     overridden by the --ccoonnffiigg command line option.

TTSS EEXXAAMMPPLLEESS
     All the examples below presume that OPENSSL_CONF is set to a proper
     configuration file, e.g. the example configuration file
     _o_p_e_n_s_s_l_/_a_p_p_s_/_o_p_e_n_s_s_l_._c_n_f will do.

     To create a time stamp request for design1.txt with SHA-1 without nonce
     and policy and no certificate is required in the response:

           $ openssl ts -query -data design1.txt -no_nonce \
                   -out design1.tsq

     To create a similar time stamp request but specifying the message imprint
     explicitly:

           $ openssl ts -query \
                   -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \
                   -no_nonce -out design1.tsq

     To print the content of the previous request in human readable format:

           $ openssl ts -query -in design1.tsq -text

     To create a time stamp request which includes the MD5 digest of
     design2.txt, requests the signer certificate and nonce, specifies a
     policy ID (assuming the tsa_policy1 name is defined in the OID section of
     the config file):

           $ openssl ts -query -data design2.txt -md5 \
                   -policy tsa_policy1 -cert -out design2.tsq

     Before generating a response, a signing certificate must be created for
     the TSA that contains the ttiimmeeSSttaammppiinngg critical extended key usage
     extension without any other key usage extensions.  You can add the
     ``extendedKeyUsage = critical,timeStamping'' line to the user certificate
     section of the config file to generate a proper certificate.  See the
     rreeqq, ccaa, and xx550099 commands for instructions.  The examples below assume
     that cacert.pem contains the certificate of the CA, tsacert.pem is the
     signing certificate issued by cacert.pem and tsakey.pem is the private
     key of the TSA.

     To create a time stamp response for a request:

           $ openssl ts -reply -queryfile design1.tsq -inkey tsakey.pem \
                   -signer tsacert.pem -out design1.tsr

     If you want to use the settings in the config file you could just write:

           $ openssl ts -reply -queryfile design1.tsq -out design1.tsr

     To print a time stamp reply to stdout in human readable format:

           $ openssl ts -reply -in design1.tsr -text

     To create a time stamp token instead of time stamp response:

           $ openssl ts -reply -queryfile design1.tsq \
                   -out design1_token.der -token_out

     To print a time stamp token to stdout in human readable format:

           $ openssl ts -reply -in design1_token.der -token_in \
                   -text -token_out

     To extract the time stamp token from a response:

           $ openssl ts -reply -in design1.tsr -out design1_token.der \
                   -token_out

     To add ``granted'' status info to a time stamp token thereby creating a
     valid response:

           $ openssl ts -reply -in design1_token.der \
                   -token_in -out design1.tsr

     To verify a time stamp reply against a request:

           $ openssl ts -verify -queryfile design1.tsq -in design1.tsr \
                   -CAfile cacert.pem -untrusted tsacert.pem

     To verify a time stamp reply that includes the certificate chain:

           $ openssl ts -verify -queryfile design2.tsq -in design2.tsr \
                   -CAfile cacert.pem

     To verify a time stamp token against the original data file:

           $ openssl ts -verify -data design2.txt -in design2.tsr \
                   -CAfile cacert.pem

     To verify a time stamp token against a message imprint:

           $ openssl ts -verify \
                   -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \
                   -in design2.tsr -CAfile cacert.pem

TTSS BBUUGGSS
     No support for time stamps over SMTP, though it is quite easy to
     implement an automatic email-based TSA with procmail and perl(1).  Pure
     TCP/IP is not supported.

     The file containing the last serial number of the TSA is not locked when
     being read or written.  This is a problem if more than one instance of
     OOppeennSSSSLL is trying to create a time stamp response at the same time.

     Look for the FIXME word in the source files.

     The source code should really be reviewed by somebody else, too.

     More testing is needed.

TTSS AAUUTTHHOORRSS
     Zoltan Glozik <_z_g_l_o_z_i_k_@_o_p_e_n_t_s_a_._o_r_g>, OpenTSA project
     (hhttttpp::////wwwwww..ooppeennttssaa..oorrgg).

SSPPKKAACC
     ooppeennssssll ssppkkaacc [--cchhaalllleennggee _s_t_r_i_n_g] [--iinn _f_i_l_e] [--kkeeyy _k_e_y_f_i_l_e] [--nnoooouutt]
                   [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g] [--ppuubbkkeeyy] [--ssppkkaacc _s_p_k_a_c_n_a_m_e]
                   [--ssppkksseecctt _s_e_c_t_i_o_n] [--vveerriiffyy]

     The ssppkkaacc command processes Netscape signed public key and challenge
     (SPKAC) files.  It can print out their contents, verify the signature,
     and produce its own SPKACs from a supplied private key.

     The options are as follows:

     --cchhaalllleennggee _s_t_r_i_n_g
             Specifies the challenge string if an SPKAC is being created.

     --iinn _f_i_l_e
             This specifies the input _f_i_l_e to read from, or standard input if
             this option is not specified.  Ignored if the --kkeeyy option is
             used.

     --kkeeyy _k_e_y_f_i_l_e
             Create an SPKAC file using the private key in _k_e_y_f_i_l_e.  The --iinn,
             --nnoooouutt, --ssppkksseecctt, and --vveerriiffyy options are ignored if present.

     --nnoooouutt  Don't output the text version of the SPKAC (not used if an SPKAC
             is being created).

     --oouutt _f_i_l_e
             Specifies the output _f_i_l_e to write to, or standard output by
             default.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppuubbkkeeyy
             Output the public key of an SPKAC (not used if an SPKAC is being
             created).

     --ssppkkaacc _s_p_k_a_c_n_a_m_e
             Allows an alternative name for the variable containing the SPKAC.
             The default is "SPKAC".  This option affects both generated and
             input SPKAC files.

     --ssppkksseecctt _s_e_c_t_i_o_n
             Allows an alternative name for the _s_e_c_t_i_o_n containing the SPKAC.
             The default is the default section.

     --vveerriiffyy
             Verifies the digital signature on the supplied SPKAC.

SSPPKKAACC EEXXAAMMPPLLEESS
     Print out the contents of an SPKAC:

           $ openssl spkac -in spkac.cnf

     Verify the signature of an SPKAC:

           $ openssl spkac -in spkac.cnf -noout -verify

     Create an SPKAC using the challenge string "hello":

           $ openssl spkac -key key.pem -challenge hello -out spkac.cnf

     Example of an SPKAC, (long lines split up for clarity):

           SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA1cCoq2Wa3Ixs47uI7F\
           PVwHVIPDx5yso105Y6zpozam135a8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03u\
           PFoQIDAQABFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJh1bEIYuc\
           2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnDdq+NQ3F+X4deMx9AaEglZtULwV\
           4=

SSPPKKAACC NNOOTTEESS
     A created SPKAC with suitable DN components appended can be fed into the
     ccaa utility.

     SPKACs are typically generated by Netscape when a form is submitted
     containing the _K_E_Y_G_E_N tag as part of the certificate enrollment process.

     The challenge string permits a primitive form of proof of possession of
     private key.  By checking the SPKAC signature and a random challenge
     string, some guarantee is given that the user knows the private key
     corresponding to the public key being certified.  This is important in
     some applications.  Without this it is possible for a previous SPKAC to
     be used in a "replay attack".

VVEERRIIFFYY
     ooppeennssssll vveerriiffyy [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cchheecckk__ssss__ssiigg]
                    [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--eexxpplliicciitt__ppoolliiccyy]
                    [--eexxtteennddeedd__ccrrll] [--hheellpp] [--iiggnnoorree__ccrriittiiccaall] [--iinnhhiibbiitt__aannyy]
                    [--iinnhhiibbiitt__mmaapp] [--iissssuueerr__cchheecckkss] [--ppoolliiccyy__cchheecckk]
                    [--ppuurrppoossee _p_u_r_p_o_s_e] [--uunnttrruusstteedd _f_i_l_e] [--vveerrbboossee]
                    [--xx550099__ssttrriicctt] [--] [_c_e_r_t_i_f_i_c_a_t_e_s]

     The vveerriiffyy command verifies certificate chains.

     The options are as follows:

     --cchheecckk__ssss__ssiigg
             Verify the signature on the self-signed root CA.  This is
             disabled by default because it doesn't add any security.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e of trusted certificates.  The _f_i_l_e should contain multiple
             certificates in PEM format, concatenated together.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             A _d_i_r_e_c_t_o_r_y of trusted certificates.  The certificates should
             have names of the form _h_a_s_h_._0, or have symbolic links to them of
             this form ("hash" is the hashed certificate subject name: see the
             --hhaasshh option of the xx550099 utility).  The cc__rreehhaasshh script
             distributed with OpenSSL will automatically create symbolic links
             to a directory of certificates.

     --ccrrll__cchheecckk
             Checks end entity certificate validity by attempting to look up a
             valid CRL.  If a valid CRL cannot be found an error occurs.

     --ccrrll__cchheecckk__aallll
             Checks the validity of all certificates in the chain by
             attempting to look up valid CRLs.

     --eexxpplliicciitt__ppoolliiccyy
             Set policy variable require-explicit-policy (see RFC 3280 et al).

     --eexxtteennddeedd__ccrrll
             Enable extended CRL features such as indirect CRLs and alternate
             CRL signing keys.

     --hheellpp   Prints out a usage message.

     --iiggnnoorree__ccrriittiiccaall
             Normally if an unhandled critical extension is present which is
             not supported by OOppeennSSSSLL, the certificate is rejected (as
             required by RFC 3280 et al).  If this option is set, critical
             extensions are ignored.

     --iinnhhiibbiitt__aannyy
             Set policy variable inhibit-any-policy (see RFC 3280 et al).

     --iinnhhiibbiitt__mmaapp
             Set policy variable inhibit-policy-mapping (see RFC 3280 et al).

     --iissssuueerr__cchheecckkss
             Print out diagnostics relating to searches for the issuer
             certificate of the current certificate.  This shows why each
             candidate issuer certificate was rejected.  However the presence
             of rejection messages does not itself imply that anything is
             wrong: during the normal verify process several rejections may
             take place.

     --ppoolliiccyy__cchheecckk
             Enables certificate policy processing.

     --ppuurrppoossee _p_u_r_p_o_s_e
             The intended use for the certificate.  Without this option no
             chain verification will be done.  Currently accepted uses are
             _s_s_l_c_l_i_e_n_t, _s_s_l_s_e_r_v_e_r, _n_s_s_s_l_s_e_r_v_e_r, _s_m_i_m_e_s_i_g_n, _s_m_i_m_e_e_n_c_r_y_p_t,
             _c_r_l_s_i_g_n, _a_n_y, and _o_c_s_p_h_e_l_p_e_r.  See the _V_E_R_I_F_Y _O_P_E_R_A_T_I_O_N section
             for more information.

     --uunnttrruusstteedd _f_i_l_e
             A _f_i_l_e of untrusted certificates.  The _f_i_l_e should contain
             multiple certificates.

     --vveerrbboossee
             Print extra information about the operations being performed.

     --xx550099__ssttrriicctt
             Disable workarounds for broken certificates which have to be
             disabled for strict X.509 compliance.

     --       Marks the last option.  All arguments following this are assumed
             to be certificate files.  This is useful if the first certificate
             filename begins with a `-'.

     _c_e_r_t_i_f_i_c_a_t_e_s
             One or more _c_e_r_t_i_f_i_c_a_t_e_s to verify.  If no certificate files are
             included, an attempt is made to read a certificate from standard
             input.  They should all be in PEM format.

VVEERRIIFFYY OOPPEERRAATTIIOONN
     The vveerriiffyy program uses the same functions as the internal SSL and S/MIME
     verification, therefore this description applies to these verify
     operations too.

     There is one crucial difference between the verify operations performed
     by the vveerriiffyy program: wherever possible an attempt is made to continue
     after an error, whereas normally the verify operation would halt on the
     first error.  This allows all the problems with a certificate chain to be
     determined.

     The verify operation consists of a number of separate steps:

     Firstly a certificate chain is built up starting from the supplied
     certificate and ending in the root CA.  It is an error if the whole chain
     cannot be built up.  The chain is built up by looking up the issuer's
     certificate of the current certificate.  If a certificate is found which
     is its own issuer, it is assumed to be the root CA.

     The process of "looking up the issuer's certificate" itself involves a
     number of steps.  In versions of OOppeennSSSSLL before 0.9.5a the first
     certificate whose subject name matched the issuer of the current
     certificate was assumed to be the issuer's certificate.  In OOppeennSSSSLL 0.9.6
     and later all certificates whose subject name matches the issuer name of
     the current certificate are subject to further tests.  The relevant
     authority key identifier components of the current certificate (if
     present) must match the subject key identifier (if present) and issuer
     and serial number of the candidate issuer; in addition the _k_e_y_U_s_a_g_e
     extension of the candidate issuer (if present) must permit certificate
     signing.

     The lookup first looks in the list of untrusted certificates and if no
     match is found the remaining lookups are from the trusted certificates.
     The root CA is always looked up in the trusted certificate list: if the
     certificate to verify is a root certificate, then an exact match must be
     found in the trusted list.

     The second operation is to check every untrusted certificate's extensions
     for consistency with the supplied purpose.  If the --ppuurrppoossee option is not
     included, then no checks are done.  The supplied or "leaf" certificate
     must have extensions compatible with the supplied purpose and all other
     certificates must also be valid CA certificates.  The precise extensions
     required are described in more detail in the _X_._5_0_9 _C_E_R_T_I_F_I_C_A_T_E _E_X_T_E_N_S_I_O_N_S
     section below.

     The third operation is to check the trust settings on the root CA.  The
     root CA should be trusted for the supplied purpose.  For compatibility
     with previous versions of SSSSLLeeaayy and OOppeennSSSSLL, a certificate with no trust
     settings is considered to be valid for all purposes.

     The final operation is to check the validity of the certificate chain.
     The validity period is checked against the current system time and the
     _n_o_t_B_e_f_o_r_e and _n_o_t_A_f_t_e_r dates in the certificate.  The certificate
     signatures are also checked at this point.

     If all operations complete successfully, the certificate is considered
     valid.  If any operation fails then the certificate is not valid.

VVEERRIIFFYY DDIIAAGGNNOOSSTTIICCSS
     When a verify operation fails, the output messages can be somewhat
     cryptic.  The general form of the error message is:

      server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
      error 24 at 1 depth lookup:invalid CA certificate

     The first line contains the name of the certificate being verified,
     followed by the subject name of the certificate.  The second line
     contains the error number and the depth.  The depth is the number of the
     certificate being verified when a problem was detected starting with zero
     for the certificate being verified itself, then 1 for the CA that signed
     the certificate and so on.  Finally a text version of the error number is
     presented.

     An exhaustive list of the error codes and messages is shown below; this
     also includes the name of the error code as defined in the header file
     <_o_p_e_n_s_s_l_/_x_5_0_9___v_f_y_._h>.  Some of the error codes are defined but never
     returned: these are described as "unused".

     _0 _X_5_0_9___V___O_K_: _o_k
           The operation was successful.

     _2 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___G_E_T___I_S_S_U_E_R___C_E_R_T_: _u_n_a_b_l_e _t_o _g_e_t _i_s_s_u_e_r _c_e_r_t_i_f_i_c_a_t_e
           The issuer certificate could not be found: this occurs if the
           issuer certificate of an untrusted certificate cannot be found.

     _3 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___G_E_T___C_R_L_: _u_n_a_b_l_e _t_o _g_e_t _c_e_r_t_i_f_i_c_a_t_e _C_R_L
           The CRL of a certificate could not be found.

     _4 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___D_E_C_R_Y_P_T___C_E_R_T___S_I_G_N_A_T_U_R_E_: _u_n_a_b_l_e _t_o _d_e_c_r_y_p_t
           _c_e_r_t_i_f_i_c_a_t_e_'_s _s_i_g_n_a_t_u_r_e
           The certificate signature could not be decrypted.  This means that
           the actual signature value could not be determined rather than it
           not matching the expected value.  This is only meaningful for RSA
           keys.

     _5 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___D_E_C_R_Y_P_T___C_R_L___S_I_G_N_A_T_U_R_E_: _u_n_a_b_l_e _t_o _d_e_c_r_y_p_t _C_R_L_'_s
           _s_i_g_n_a_t_u_r_e
           The CRL signature could not be decrypted: this means that the
           actual signature value could not be determined rather than it not
           matching the expected value.  Unused.

     _6 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___D_E_C_O_D_E___I_S_S_U_E_R___P_U_B_L_I_C___K_E_Y_: _u_n_a_b_l_e _t_o _d_e_c_o_d_e _i_s_s_u_e_r
           _p_u_b_l_i_c _k_e_y
           The public key in the certificate _S_u_b_j_e_c_t_P_u_b_l_i_c_K_e_y_I_n_f_o could not be
           read.

     _7 _X_5_0_9___V___E_R_R___C_E_R_T___S_I_G_N_A_T_U_R_E___F_A_I_L_U_R_E_: _c_e_r_t_i_f_i_c_a_t_e _s_i_g_n_a_t_u_r_e _f_a_i_l_u_r_e
           The signature of the certificate is invalid.

     _8 _X_5_0_9___V___E_R_R___C_R_L___S_I_G_N_A_T_U_R_E___F_A_I_L_U_R_E_: _C_R_L _s_i_g_n_a_t_u_r_e _f_a_i_l_u_r_e
           The signature of the certificate is invalid.

     _9 _X_5_0_9___V___E_R_R___C_E_R_T___N_O_T___Y_E_T___V_A_L_I_D_: _c_e_r_t_i_f_i_c_a_t_e _i_s _n_o_t _y_e_t _v_a_l_i_d
           The certificate is not yet valid: the _n_o_t_B_e_f_o_r_e date is after the
           current time.

     _1_0 _X_5_0_9___V___E_R_R___C_E_R_T___H_A_S___E_X_P_I_R_E_D_: _c_e_r_t_i_f_i_c_a_t_e _h_a_s _e_x_p_i_r_e_d
           The certificate has expired; that is, the _n_o_t_A_f_t_e_r date is before
           the current time.

     _1_1 _X_5_0_9___V___E_R_R___C_R_L___N_O_T___Y_E_T___V_A_L_I_D_: _C_R_L _i_s _n_o_t _y_e_t _v_a_l_i_d
           The CRL is not yet valid.

     _1_2 _X_5_0_9___V___E_R_R___C_R_L___H_A_S___E_X_P_I_R_E_D_: _C_R_L _h_a_s _e_x_p_i_r_e_d
           The CRL has expired.

     _1_3 _X_5_0_9___V___E_R_R___E_R_R_O_R___I_N___C_E_R_T___N_O_T___B_E_F_O_R_E___F_I_E_L_D_: _f_o_r_m_a_t _e_r_r_o_r _i_n
           _c_e_r_t_i_f_i_c_a_t_e_'_s _n_o_t_B_e_f_o_r_e _f_i_e_l_d
           The certificate _n_o_t_B_e_f_o_r_e field contains an invalid time.

     _1_4 _X_5_0_9___V___E_R_R___E_R_R_O_R___I_N___C_E_R_T___N_O_T___A_F_T_E_R___F_I_E_L_D_: _f_o_r_m_a_t _e_r_r_o_r _i_n
           _c_e_r_t_i_f_i_c_a_t_e_'_s _n_o_t_A_f_t_e_r _f_i_e_l_d
           The certificate _n_o_t_A_f_t_e_r field contains an invalid time.

     _1_5 _X_5_0_9___V___E_R_R___E_R_R_O_R___I_N___C_R_L___L_A_S_T___U_P_D_A_T_E___F_I_E_L_D_: _f_o_r_m_a_t _e_r_r_o_r _i_n _C_R_L_'_s
           _l_a_s_t_U_p_d_a_t_e _f_i_e_l_d
           The CRL _l_a_s_t_U_p_d_a_t_e field contains an invalid time.

     _1_6 _X_5_0_9___V___E_R_R___E_R_R_O_R___I_N___C_R_L___N_E_X_T___U_P_D_A_T_E___F_I_E_L_D_: _f_o_r_m_a_t _e_r_r_o_r _i_n _C_R_L_'_s
           _n_e_x_t_U_p_d_a_t_e _f_i_e_l_d
           The CRL _n_e_x_t_U_p_d_a_t_e field contains an invalid time.

     _1_7 _X_5_0_9___V___E_R_R___O_U_T___O_F___M_E_M_: _o_u_t _o_f _m_e_m_o_r_y
           An error occurred trying to allocate memory.  This should never
           happen.

     _1_8 _X_5_0_9___V___E_R_R___D_E_P_T_H___Z_E_R_O___S_E_L_F___S_I_G_N_E_D___C_E_R_T_: _s_e_l_f _s_i_g_n_e_d _c_e_r_t_i_f_i_c_a_t_e
           The passed certificate is self-signed and the same certificate
           cannot be found in the list of trusted certificates.

     _1_9 _X_5_0_9___V___E_R_R___S_E_L_F___S_I_G_N_E_D___C_E_R_T___I_N___C_H_A_I_N_: _s_e_l_f _s_i_g_n_e_d _c_e_r_t_i_f_i_c_a_t_e _i_n
           _c_e_r_t_i_f_i_c_a_t_e _c_h_a_i_n
           The certificate chain could be built up using the untrusted
           certificates but the root could not be found locally.

     _2_0 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___G_E_T___I_S_S_U_E_R___C_E_R_T___L_O_C_A_L_L_Y_: _u_n_a_b_l_e _t_o _g_e_t _l_o_c_a_l
           _i_s_s_u_e_r _c_e_r_t_i_f_i_c_a_t_e
           The issuer certificate of a locally looked up certificate could not
           be found.  This normally means the list of trusted certificates is
           not complete.

     _2_1 _X_5_0_9___V___E_R_R___U_N_A_B_L_E___T_O___V_E_R_I_F_Y___L_E_A_F___S_I_G_N_A_T_U_R_E_: _u_n_a_b_l_e _t_o _v_e_r_i_f_y _t_h_e _f_i_r_s_t
           _c_e_r_t_i_f_i_c_a_t_e
           No signatures could be verified because the chain contains only one
           certificate and it is not self-signed.

     _2_2 _X_5_0_9___V___E_R_R___C_E_R_T___C_H_A_I_N___T_O_O___L_O_N_G_: _c_e_r_t_i_f_i_c_a_t_e _c_h_a_i_n _t_o_o _l_o_n_g
           The certificate chain length is greater than the supplied maximum
           depth.  Unused.

     _2_3 _X_5_0_9___V___E_R_R___C_E_R_T___R_E_V_O_K_E_D_: _c_e_r_t_i_f_i_c_a_t_e _r_e_v_o_k_e_d
           The certificate has been revoked.

     _2_4 _X_5_0_9___V___E_R_R___I_N_V_A_L_I_D___C_A_: _i_n_v_a_l_i_d _C_A _c_e_r_t_i_f_i_c_a_t_e
           A CA certificate is invalid.  Either it is not a CA or its
           extensions are not consistent with the supplied purpose.

     _2_5 _X_5_0_9___V___E_R_R___P_A_T_H___L_E_N_G_T_H___E_X_C_E_E_D_E_D_: _p_a_t_h _l_e_n_g_t_h _c_o_n_s_t_r_a_i_n_t _e_x_c_e_e_d_e_d
           The _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s pathlength parameter has been exceeded.

     _2_6 _X_5_0_9___V___E_R_R___I_N_V_A_L_I_D___P_U_R_P_O_S_E_: _u_n_s_u_p_p_o_r_t_e_d _c_e_r_t_i_f_i_c_a_t_e _p_u_r_p_o_s_e
           The supplied certificate cannot be used for the specified purpose.

     _2_7 _X_5_0_9___V___E_R_R___C_E_R_T___U_N_T_R_U_S_T_E_D_: _c_e_r_t_i_f_i_c_a_t_e _n_o_t _t_r_u_s_t_e_d
           The root CA is not marked as trusted for the specified purpose.

     _2_8 _X_5_0_9___V___E_R_R___C_E_R_T___R_E_J_E_C_T_E_D_: _c_e_r_t_i_f_i_c_a_t_e _r_e_j_e_c_t_e_d
           The root CA is marked to reject the specified purpose.

     _2_9 _X_5_0_9___V___E_R_R___S_U_B_J_E_C_T___I_S_S_U_E_R___M_I_S_M_A_T_C_H_: _s_u_b_j_e_c_t _i_s_s_u_e_r _m_i_s_m_a_t_c_h
           The current candidate issuer certificate was rejected because its
           subject name did not match the issuer name of the current
           certificate.  Only displayed when the --iissssuueerr__cchheecckkss option is set.

     _3_0 _X_5_0_9___V___E_R_R___A_K_I_D___S_K_I_D___M_I_S_M_A_T_C_H_: _a_u_t_h_o_r_i_t_y _a_n_d _s_u_b_j_e_c_t _k_e_y _i_d_e_n_t_i_f_i_e_r
           _m_i_s_m_a_t_c_h
           The current candidate issuer certificate was rejected because its
           subject key identifier was present and did not match the authority
           key identifier current certificate.  Only displayed when the
           --iissssuueerr__cchheecckkss option is set.

     _3_1 _X_5_0_9___V___E_R_R___A_K_I_D___I_S_S_U_E_R___S_E_R_I_A_L___M_I_S_M_A_T_C_H_: _a_u_t_h_o_r_i_t_y _a_n_d _i_s_s_u_e_r _s_e_r_i_a_l
           _n_u_m_b_e_r _m_i_s_m_a_t_c_h
           The current candidate issuer certificate was rejected because its
           issuer name and serial number were present and did not match the
           authority key identifier of the current certificate.  Only
           displayed when the --iissssuueerr__cchheecckkss option is set.

     _3_2 _X_5_0_9___V___E_R_R___K_E_Y_U_S_A_G_E___N_O___C_E_R_T_S_I_G_N_:_k_e_y _u_s_a_g_e _d_o_e_s _n_o_t _i_n_c_l_u_d_e _c_e_r_t_i_f_i_c_a_t_e
           _s_i_g_n_i_n_g
           The current candidate issuer certificate was rejected because its
           _k_e_y_U_s_a_g_e extension does not permit certificate signing.

     _5_0 _X_5_0_9___V___E_R_R___A_P_P_L_I_C_A_T_I_O_N___V_E_R_I_F_I_C_A_T_I_O_N_: _a_p_p_l_i_c_a_t_i_o_n _v_e_r_i_f_i_c_a_t_i_o_n _f_a_i_l_u_r_e
           An application specific error.  Unused.

VVEERRIIFFYY BBUUGGSS
     Although the issuer checks are a considerable improvement over the old
     technique, they still suffer from limitations in the underlying
     X509_LOOKUP API.  One consequence of this is that trusted certificates
     with matching subject name must either appear in a file (as specified by
     the --CCAAffiillee option) or a directory (as specified by --CCAAppaatthh).  If they
     occur in both, only the certificates in the file will be recognised.

     Previous versions of OOppeennSSSSLL assumed certificates with matching subject
     name were identical and mishandled them.

VVEERRSSIIOONN
     ooppeennssssll vveerrssiioonn [--aabbddffooppvv]

     The vveerrssiioonn command is used to print out version information about
     OOppeennSSSSLL.

     The options are as follows:

     --aa      All information: this is the same as setting all the other flags.

     --bb      The date the current version of OOppeennSSSSLL was built.

     --dd      OPENSSLDIR setting.

     --ff      Compilation flags.

     --oo      Option information: various options set when the library was
             built.

     --pp      Platform setting.

     --vv      The current OOppeennSSSSLL version.

VVEERRSSIIOONN NNOOTTEESS
     The output of ooppeennssssll vveerrssiioonn --aa would typically be used when sending in
     a bug report.

VVEERRSSIIOONN HHIISSTTOORRYY
     The --dd option was added in OOppeennSSSSLL 0.9.7.

XX550099
     ooppeennssssll xx550099 [--CC] [--aaddddrreejjeecctt _a_r_g] [--aaddddttrruusstt _a_r_g] [--aalliiaass] [--CCAA _f_i_l_e]
                  [--CCAAccrreeaatteesseerriiaall] [--CCAAffoorrmm _D_E_R | _P_E_M] [--CCAAkkeeyy _f_i_l_e]
                  [--CCAAkkeeyyffoorrmm _D_E_R | _P_E_M] [--CCAAsseerriiaall _f_i_l_e] [--cceerrttoopptt _o_p_t_i_o_n]
                  [--cchheecckkeenndd _a_r_g] [--ccllrreexxtt] [--ccllrrrreejjeecctt] [--ccllrrttrruusstt] [--ddaatteess]
                  [--ddaayyss _a_r_g] [--eemmaaiill] [--eennddddaattee] [--eexxtteennssiioonnss _s_e_c_t_i_o_n]
                  [--eexxttffiillee _f_i_l_e] [--ffiinnggeerrpprriinntt] [--hhaasshh] [--iinn _f_i_l_e]
                  [--iinnffoorrmm _D_E_R | _N_E_T | _P_E_M] [--iissssuueerr] [--iissssuueerr__hhaasshh]
                  [--iissssuueerr__hhaasshh__oolldd] [--kkeeyyffoorrmm _D_E_R | _P_E_M] [--mmdd55 | --sshhaa11]
                  [--mmoodduulluuss] [--nnaammeeoopptt _o_p_t_i_o_n] [--nnoooouutt] [--ooccsspp__uurrii] [--ooccssppiidd]
                  [--oouutt _f_i_l_e] [--oouuttffoorrmm _D_E_R | _N_E_T | _P_E_M] [--ppaassssiinn _a_r_g]
                  [--ppuubbkkeeyy] [--ppuurrppoossee] [--rreeqq] [--sseerriiaall] [--sseett__sseerriiaall _n]
                  [--sseettaalliiaass _a_r_g] [--ssiiggnnkkeeyy _f_i_l_e] [--ssttaarrttddaattee] [--ssuubbjjeecctt]
                  [--ssuubbjjeecctt__hhaasshh] [--ssuubbjjeecctt__hhaasshh__oolldd] [--tteexxtt] [--ttrruussttoouutt]
                  [--xx550099ttoorreeqq]

     The xx550099 command is a multi-purpose certificate utility.  It can be used
     to display certificate information, convert certificates to various
     forms, sign certificate requests like a "mini CA", or edit certificate
     trust settings.

     Since there are a large number of options, they are split up into various
     sections.

XX550099 IINNPPUUTT,, OOUUTTPPUUTT,, AANNDD GGEENNEERRAALL PPUURRPPOOSSEE OOPPTTIIOONNSS
     --iinn _f_i_l_e
           This specifies the input _f_i_l_e to read a certificate from, or
           standard input if this option is not specified.

     --iinnffoorrmm _D_E_R | _N_E_T | _P_E_M
           This specifies the input format.  Normally, the command will expect
           an X.509 certificate, but this can change if other options such as
           --rreeqq are present.  The _D_E_R format is the DER encoding of the
           certificate and _P_E_M is the base64 encoding of the DER encoding with
           header and footer lines added.  The _N_E_T option is an obscure
           Netscape server format that is now obsolete.

     --mmdd55 | --sshhaa11
           The digest to use.  This affects any signing or display option that
           uses a message digest, such as the --ffiinnggeerrpprriinntt, --ssiiggnnkkeeyy, and --CCAA
           options.  If not specified, MD5 is used.  If the key being used to
           sign with is a DSA key, this option has no effect: SHA1 is always
           used with DSA keys.

     --oouutt _f_i_l_e
           This specifies the output _f_i_l_e to write to, or standard output by
           default.

     --oouuttffoorrmm _D_E_R | _N_E_T | _P_E_M
           This specifies the output format; the options have the same meaning
           as the --iinnffoorrmm option.

     --ppaassssiinn _a_r_g
           The key password source.

XX550099 DDIISSPPLLAAYY OOPPTTIIOONNSS
     NNoottee: The --aalliiaass and --ppuurrppoossee options are also display options but are
     described in the _X_5_0_9 _T_R_U_S_T _S_E_T_T_I_N_G_S section.

     --CC    This outputs the certificate in the form of a C source file.

     --cceerrttoopptt _o_p_t_i_o_n
           Customise the output format used with --tteexxtt.  The _o_p_t_i_o_n argument
           can be a single option or multiple options separated by commas.
           The --cceerrttoopptt switch may also be used more than once to set multiple
           options.  See the _X_5_0_9 _T_E_X_T _O_P_T_I_O_N_S section for more information.

     --ddaatteess
           Prints out the start and expiry dates of a certificate.

     --eemmaaiill
           Outputs the email address(es), if any.

     --eennddddaattee
           Prints out the expiry date of the certificate; that is, the
           _n_o_t_A_f_t_e_r date.

     --ffiinnggeerrpprriinntt
           Prints out the digest of the DER-encoded version of the whole
           certificate (see _D_I_G_E_S_T _O_P_T_I_O_N_S).

     --hhaasshh
           A synonym for --ssuubbjjeecctt__hhaasshh, for backwards compatibility.

     --iissssuueerr
           Outputs the issuer name.

     --iissssuueerr__hhaasshh
           Outputs the "hash" of the certificate issuer name.

     --iissssuueerr__hhaasshh__oolldd
           Outputs the "hash" of the certificate issuer name using the older
           algorithm as used by OOppeennSSSSLL versions before 1.0.0.

     --mmoodduulluuss
           This option prints out the value of the modulus of the public key
           contained in the certificate.

     --nnaammeeoopptt _o_p_t_i_o_n
           Option which determines how the subject or issuer names are
           displayed.  The _o_p_t_i_o_n argument can be a single option or multiple
           options separated by commas.  Alternatively, the --nnaammeeoopptt switch
           may be used more than once to set multiple options.  See the _X_5_0_9
           _N_A_M_E _O_P_T_I_O_N_S section for more information.

     --nnoooouutt
           This option prevents output of the encoded version of the request.

     --ooccsspp__uurrii
           Outputs the OCSP responder addresses, if any.

     --ooccssppiidd
           Print OCSP hash values for the subject name and public key.

     --ppuubbkkeeyy
           Output the public key.

     --sseerriiaall
           Outputs the certificate serial number.

     --ssttaarrttddaattee
           Prints out the start date of the certificate; that is, the
           _n_o_t_B_e_f_o_r_e date.

     --ssuubbjjeecctt
           Outputs the subject name.

     --ssuubbjjeecctt__hhaasshh
           Outputs the "hash" of the certificate subject name.  This is used
           in OOppeennSSSSLL to form an index to allow certificates in a directory to
           be looked up by subject name.

     --ssuubbjjeecctt__hhaasshh__oolldd
           Outputs the "hash" of the certificate subject name using the older
           algorithm as used by OOppeennSSSSLL versions before 1.0.0.

     --tteexxtt
           Prints out the certificate in text form.  Full details are output
           including the public key, signature algorithms, issuer and subject
           names, serial number, any extensions present, and any trust
           settings.

XX550099 TTRRUUSSTT SSEETTTTIINNGGSS
     Please note these options are currently experimental and may well change.

     A _t_r_u_s_t_e_d _c_e_r_t_i_f_i_c_a_t_e is an ordinary certificate which has several
     additional pieces of information attached to it such as the permitted and
     prohibited uses of the certificate and an "alias".

     Normally, when a certificate is being verified at least one certificate
     must be "trusted".  By default, a trusted certificate must be stored
     locally and must be a root CA: any certificate chain ending in this CA is
     then usable for any purpose.

     Trust settings currently are only used with a root CA.  They allow a
     finer control over the purposes the root CA can be used for.  For
     example, a CA may be trusted for an SSL client but not for SSL server
     use.

     See the description of the vveerriiffyy utility for more information on the
     meaning of trust settings.

     Future versions of OOppeennSSSSLL will recognize trust settings on any
     certificate: not just root CAs.

     --aaddddrreejjeecctt _a_r_g
           Adds a prohibited use.  It accepts the same values as the --aaddddttrruusstt
           option.

     --aaddddttrruusstt _a_r_g
           Adds a trusted certificate use.  Any object name can be used here,
           but currently only _c_l_i_e_n_t_A_u_t_h (SSL client use), _s_e_r_v_e_r_A_u_t_h (SSL
           server use), and _e_m_a_i_l_P_r_o_t_e_c_t_i_o_n (S/MIME email) are used.  Other
           OOppeennSSSSLL applications may define additional uses.

     --aalliiaass
           Outputs the certificate alias, if any.

     --ccllrrrreejjeecctt
           Clears all the prohibited or rejected uses of the certificate.

     --ccllrrttrruusstt
           Clears all the permitted or trusted uses of the certificate.

     --ppuurrppoossee
           This option performs tests on the certificate extensions and
           outputs the results.  For a more complete description, see the
           _X_._5_0_9 _C_E_R_T_I_F_I_C_A_T_E _E_X_T_E_N_S_I_O_N_S section.

     --sseettaalliiaass _a_r_g
           Sets the alias of the certificate.  This will allow the certificate
           to be referred to using a nickname, for example "Steve's
           Certificate".

     --ttrruussttoouutt
           This causes xx550099 to output a _t_r_u_s_t_e_d _c_e_r_t_i_f_i_c_a_t_e.  An ordinary or
           trusted certificate can be input, but by default an ordinary
           certificate is output and any trust settings are discarded.  With
           the --ttrruussttoouutt option a trusted certificate is output.  A trusted
           certificate is automatically output if any trust settings are
           modified.

XX550099 SSIIGGNNIINNGG OOPPTTIIOONNSS
     The xx550099 utility can be used to sign certificates and requests: it can
     thus behave like a "mini CA".

     --CCAA _f_i_l_e
           Specifies the CA certificate to be used for signing.  When this
           option is present, xx550099 behaves like a "mini CA".  The input file
           is signed by the CA using this option; that is, its issuer name is
           set to the subject name of the CA and it is digitally signed using
           the CA's private key.

           This option is normally combined with the --rreeqq option.  Without the
           --rreeqq option, the input is a certificate which must be self-signed.

     --CCAAccrreeaatteesseerriiaall
           With this option the CA serial number file is created if it does
           not exist: it will contain the serial number `02' and the
           certificate being signed will have `1' as its serial number.
           Normally, if the --CCAA option is specified and the serial number file
           does not exist, it is an error.

     --CCAAffoorrmm _D_E_R | _P_E_M
           The format of the CA certificate file.  The default is _P_E_M.

     --CCAAkkeeyy _f_i_l_e
           Sets the CA private key to sign a certificate with.  If this option
           is not specified, it is assumed that the CA private key is present
           in the CA certificate file.

     --CCAAkkeeyyffoorrmm _D_E_R | _P_E_M
           The format of the CA private key.  The default is _P_E_M.

     --CCAAsseerriiaall _f_i_l_e
           Sets the CA serial number file to use.

           When the --CCAA option is used to sign a certificate, it uses a serial
           number specified in a file.  This file consists of one line
           containing an even number of hex digits with the serial number to
           use.  After each use the serial number is incremented and written
           out to the file again.

           The default filename consists of the CA certificate file base name
           with _._s_r_l appended.  For example, if the CA certificate file is
           called _m_y_c_a_c_e_r_t_._p_e_m, it expects to find a serial number file called
           _m_y_c_a_c_e_r_t_._s_r_l.

     --cchheecckkeenndd _a_r_g
           Check whether the certificate expires in the next _a_r_g seconds.  If
           so, exit with return value 1; otherwise exit with return value 0.

     --ccllrreexxtt
           Delete any extensions from a certificate.  This option is used when
           a certificate is being created from another certificate (for
           example with the --ssiiggnnkkeeyy or the --CCAA options).  Normally, all
           extensions are retained.

     --ddaayyss _a_r_g
           Specifies the number of days to make a certificate valid for.  The
           default is 30 days.

     --eexxtteennssiioonnss _s_e_c_t_i_o_n
           The section to add certificate extensions from.  If this option is
           not specified, the extensions should either be contained in the
           unnamed (default) section or the default section should contain a
           variable called "extensions" which contains the section to use.

     --eexxttffiillee _f_i_l_e
           File containing certificate extensions to use.  If not specified,
           no extensions are added to the certificate.

     --kkeeyyffoorrmm _D_E_R | _P_E_M
           Specifies the format (DER or PEM) of the private key file used in
           the --ssiiggnnkkeeyy option.

     --rreeqq  By default, a certificate is expected on input.  With this option a
           certificate request is expected instead.

     --sseett__sseerriiaall _n
           Specifies the serial number to use.  This option can be used with
           either the --ssiiggnnkkeeyy or --CCAA options.  If used in conjunction with
           the --CCAA option, the serial number file (as specified by the
           --CCAAsseerriiaall or --CCAAccrreeaatteesseerriiaall options) is not used.

           The serial number can be decimal or hex (if preceded by `0x').
           Negative serial numbers can also be specified but their use is not
           recommended.

     --ssiiggnnkkeeyy _f_i_l_e
           This option causes the input file to be self-signed using the
           supplied private key.

           If the input file is a certificate, it sets the issuer name to the
           subject name (i.e. makes it self-signed), changes the public key to
           the supplied value, and changes the start and end dates.  The start
           date is set to the current time and the end date is set to a value
           determined by the --ddaayyss option.  Any certificate extensions are
           retained unless the --ccllrreexxtt option is supplied.

           If the input is a certificate request, a self-signed certificate is
           created using the supplied private key using the subject name in
           the request.

     --xx550099ttoorreeqq
           Converts a certificate into a certificate request.  The --ssiiggnnkkeeyy
           option is used to pass the required private key.

XX550099 NNAAMMEE OOPPTTIIOONNSS
     The --nnaammeeoopptt command line switch determines how the subject and issuer
     names are displayed.  If no --nnaammeeoopptt switch is present, the default
     "oneline" format is used which is compatible with previous versions of
     OOppeennSSSSLL.  Each option is described in detail below; all options can be
     preceded by a `-' to turn the option off.  Only _c_o_m_p_a_t, _R_F_C_2_2_5_3, _o_n_e_l_i_n_e,
     and _m_u_l_t_i_l_i_n_e will normally be used.

     _a_l_i_g_n
           Align field values for a more readable output.  Only usable with
           _s_e_p___m_u_l_t_i_l_i_n_e.

     _c_o_m_p_a_t
           Use the old format.  This is equivalent to specifying no name
           options at all.

     _d_n___r_e_v
           Reverse the fields of the DN.  This is required by RFC 2253.  As a
           side effect, this also reverses the order of multiple AVAs but this
           is permissible.

     _d_u_m_p___a_l_l
           Dump all fields.  This option, when used with _d_u_m_p___d_e_r, allows the
           DER encoding of the structure to be unambiguously determined.

     _d_u_m_p___d_e_r
           When this option is set, any fields that need to be hexdumped will
           be dumped using the DER encoding of the field.  Otherwise just the
           content octets will be displayed.  Both options use the RFC 2253
           #XXXX... format.

     _d_u_m_p___n_o_s_t_r
           Dump non-character string types (for example OCTET STRING); if this
           option is not set, non-character string types will be displayed as
           though each content octet represents a single character.

     _d_u_m_p___u_n_k_n_o_w_n
           Dump any field whose OID is not recognised by OOppeennSSSSLL.

     _e_s_c___2_2_5_3
           Escape the "special" characters required by RFC 2253 in a field
           that is `` ,+"<>;''.  Additionally, `#' is escaped at the beginning
           of a string and a space character at the beginning or end of a
           string.

     _e_s_c___c_t_r_l
           Escape control characters.  That is, those with ASCII values less
           than 0x20 (space) and the delete (0x7f) character.  They are
           escaped using the RFC 2253 \XX notation (where XX are two hex
           digits representing the character value).

     _e_s_c___m_s_b
           Escape characters with the MSB set; that is, with ASCII values
           larger than 127.

     _m_u_l_t_i_l_i_n_e
           A multiline format.  It is equivalent to _e_s_c___c_t_r_l, _e_s_c___m_s_b,
           _s_e_p___m_u_l_t_i_l_i_n_e, _s_p_a_c_e___e_q, _l_n_a_m_e, and _a_l_i_g_n.

     _n_o___t_y_p_e
           This option does not attempt to interpret multibyte characters in
           any way.  That is, their content octets are merely dumped as though
           one octet represents each character.  This is useful for diagnostic
           purposes but will result in rather odd looking output.

     _n_o_f_n_a_m_e, _s_n_a_m_e, _l_n_a_m_e, _o_i_d
           These options alter how the field name is displayed.  _n_o_f_n_a_m_e does
           not display the field at all.  _s_n_a_m_e uses the "short name" form (CN
           for _c_o_m_m_o_n_N_a_m_e, for example).  _l_n_a_m_e uses the long form.  _o_i_d
           represents the OID in numerical form and is useful for diagnostic
           purpose.

     _o_n_e_l_i_n_e
           A oneline format which is more readable than _R_F_C_2_2_5_3.  It is
           equivalent to specifying the _e_s_c___2_2_5_3, _e_s_c___c_t_r_l, _e_s_c___m_s_b, _u_t_f_8,
           _d_u_m_p___n_o_s_t_r, _d_u_m_p___d_e_r, _u_s_e___q_u_o_t_e, _s_e_p___c_o_m_m_a___p_l_u_s___s_p_c, _s_p_a_c_e___e_q, and
           _s_n_a_m_e options.

     _R_F_C_2_2_5_3
           Displays names compatible with RFC 2253; equivalent to _e_s_c___2_2_5_3,
           _e_s_c___c_t_r_l, _e_s_c___m_s_b, _u_t_f_8, _d_u_m_p___n_o_s_t_r, _d_u_m_p___u_n_k_n_o_w_n, _d_u_m_p___d_e_r,
           _s_e_p___c_o_m_m_a___p_l_u_s, _d_n___r_e_v, and _s_n_a_m_e.

     _s_e_p___c_o_m_m_a___p_l_u_s, _s_e_p___c_o_m_m_a___p_l_u_s___s_p_a_c_e, _s_e_p___s_e_m_i___p_l_u_s___s_p_a_c_e, _s_e_p___m_u_l_t_i_l_i_n_e
           These options determine the field separators.  The first character
           is between RDNs and the second between multiple AVAs (multiple AVAs
           are very rare and their use is discouraged).  The options ending in
           "space" additionally place a space after the separator to make it
           more readable.  The _s_e_p___m_u_l_t_i_l_i_n_e uses a linefeed character for the
           RDN separator and a spaced `+' for the AVA separator.  It also
           indents the fields by four characters.

     _s_h_o_w___t_y_p_e
           Show the type of the ASN1 character string.  The type precedes the
           field contents.  For example "BMPSTRING: Hello World".

     _s_p_a_c_e___e_q
           Places spaces round the `=' character which follows the field name.

     _u_s_e___q_u_o_t_e
           Escapes some characters by surrounding the whole string with `"'
           characters.  Without the option, all escaping is done with the `\'
           character.

     _u_t_f_8  Convert all strings to UTF8 format first.  This is required by RFC
           2253.  If you are lucky enough to have a UTF8 compatible terminal,
           the use of this option (and _n_o_t setting _e_s_c___m_s_b) may result in the
           correct display of multibyte (international) characters.  If this
           option is not present, multibyte characters larger than 0xff will
           be represented using the format \UXXXX for 16 bits and \WXXXXXXXX
           for 32 bits.  Also, if this option is off, any UTF8Strings will be
           converted to their character form first.

XX550099 TTEEXXTT OOPPTTIIOONNSS
     As well as customising the name output format, it is also possible to
     customise the actual fields printed using the --cceerrttoopptt options when the
     --tteexxtt option is present.  The default behaviour is to print all fields.

     _c_a___d_e_f_a_u_l_t
           The value used by the ccaa utility; equivalent to _n_o___i_s_s_u_e_r,
           _n_o___p_u_b_k_e_y, _n_o___h_e_a_d_e_r, _n_o___v_e_r_s_i_o_n, _n_o___s_i_g_d_u_m_p, and _n_o___s_i_g_n_a_m_e.

     _c_o_m_p_a_t_i_b_l_e
           Use the old format.  This is equivalent to specifying no output
           options at all.

     _e_x_t___d_e_f_a_u_l_t
           Retain default extension behaviour: attempt to print out
           unsupported certificate extensions.

     _e_x_t___d_u_m_p
           Hex dump unsupported extensions.

     _e_x_t___e_r_r_o_r
           Print an error message for unsupported certificate extensions.

     _e_x_t___p_a_r_s_e
           ASN1 parse unsupported extensions.

     _n_o___a_u_x
           Don't print out certificate trust information.

     _n_o___e_x_t_e_n_s_i_o_n_s
           Don't print out any X509V3 extensions.

     _n_o___h_e_a_d_e_r
           Don't print header information: that is, the lines saying
           "Certificate" and "Data".

     _n_o___i_s_s_u_e_r
           Don't print out the issuer name.

     _n_o___p_u_b_k_e_y
           Don't print out the public key.

     _n_o___s_e_r_i_a_l
           Don't print out the serial number.

     _n_o___s_i_g_d_u_m_p
           Don't give a hexadecimal dump of the certificate signature.

     _n_o___s_i_g_n_a_m_e
           Don't print out the signature algorithm used.

     _n_o___s_u_b_j_e_c_t
           Don't print out the subject name.

     _n_o___v_a_l_i_d_i_t_y
           Don't print the validity; that is, the _n_o_t_B_e_f_o_r_e and _n_o_t_A_f_t_e_r
           fields.

     _n_o___v_e_r_s_i_o_n
           Don't print out the version number.

XX550099 EEXXAAMMPPLLEESS
     Display the contents of a certificate:

           $ openssl x509 -in cert.pem -noout -text

     Display the certificate serial number:

           $ openssl x509 -in cert.pem -noout -serial

     Display the certificate subject name:

           $ openssl x509 -in cert.pem -noout -subject

     Display the certificate subject name in RFC 2253 form:

           $ openssl x509 -in cert.pem -noout -subject -nameopt RFC2253

     Display the certificate subject name in oneline form on a terminal
     supporting UTF8:

           $ openssl x509 -in cert.pem -noout -subject \
                   -nameopt oneline,-esc_msb

     Display the certificate MD5 fingerprint:

           $ openssl x509 -in cert.pem -noout -fingerprint

     Display the certificate SHA1 fingerprint:

           $ openssl x509 -sha1 -in cert.pem -noout -fingerprint

     Convert a certificate from PEM to DER format:

           $ openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER

     Convert a certificate to a certificate request:

           $ openssl x509 -x509toreq -in cert.pem -out req.pem \
                   -signkey key.pem

     Convert a certificate request into a self-signed certificate using
     extensions for a CA:

           $ openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions \
                   v3_ca -signkey key.pem -out cacert.pem

     Sign a certificate request using the CA certificate above and add user
     certificate extensions:

           $ openssl x509 -req -in req.pem -extfile openssl.cnf -extensions \
                   v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial

     Set a certificate to be trusted for SSL client use and set its alias to
     "Steve's Class 1 CA":

           $ openssl x509 -in cert.pem -addtrust clientAuth \
                   -setalias "Steve's Class 1 CA" -out trust.pem

XX550099 NNOOTTEESS
     The PEM format uses the header and footer lines:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

     It will also handle files containing:

           -----BEGIN X509 CERTIFICATE-----
           -----END X509 CERTIFICATE-----

     Trusted certificates have the lines:

           -----BEGIN TRUSTED CERTIFICATE-----
           -----END TRUSTED CERTIFICATE-----

     The conversion to UTF8 format used with the name options assumes that
     T61Strings use the ISO 8859-1 character set.  This is wrong, but Netscape
     and MSIE do this, as do many certificates.  So although this is incorrect
     it is more likely to display the majority of certificates correctly.

     The --ffiinnggeerrpprriinntt option takes the digest of the DER-encoded certificate.
     This is commonly called a "fingerprint".  Because of the nature of
     message digests, the fingerprint of a certificate is unique to that
     certificate and two certificates with the same fingerprint can be
     considered to be the same.

     The Netscape fingerprint uses MD5, whereas MSIE uses SHA1.

     The --eemmaaiill option searches the subject name and the subject alternative
     name extension.  Only unique email addresses will be printed out: it will
     not print the same address more than once.

XX..550099 CCEERRTTIIFFIICCAATTEE EEXXTTEENNSSIIOONNSS
     The --ppuurrppoossee option checks the certificate extensions and determines what
     the certificate can be used for.  The actual checks done are rather
     complex and include various hacks and workarounds to handle broken
     certificates and software.

     The same code is used when verifying untrusted certificates in chains, so
     this section is useful if a chain is rejected by the verify code.

     The _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension CA flag is used to determine whether the
     certificate can be used as a CA.  If the CA flag is true, it is a CA; if
     the CA flag is false, it is not a CA.  _A_l_l CAs should have the CA flag
     set to true.

     If the _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension is absent, then the certificate is
     considered to be a "possible CA"; other extensions are checked according
     to the intended use of the certificate.  A warning is given in this case
     because the certificate should really not be regarded as a CA: however,
     it is allowed to be a CA to work around some broken software.

     If the certificate is a V1 certificate (and thus has no extensions) and
     it is self-signed, it is also assumed to be a CA but a warning is again
     given: this is to work around the problem of Verisign roots which are V1
     self-signed certificates.

     If the _k_e_y_U_s_a_g_e extension is present, then additional restraints are made
     on the uses of the certificate.  A CA certificate _m_u_s_t have the
     _k_e_y_C_e_r_t_S_i_g_n bit set if the _k_e_y_U_s_a_g_e extension is present.

     The extended key usage extension places additional restrictions on the
     certificate uses.  If this extension is present (whether critical or
     not), the key can only be used for the purposes specified.

     A complete description of each test is given below.  The comments about
     _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s and _k_e_y_U_s_a_g_e and V1 certificates above apply to _a_l_l CA
     certificates.

     _S_S_L _C_l_i_e_n_t
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  _k_e_y_U_s_a_g_e must be absent or it must
           have the _d_i_g_i_t_a_l_S_i_g_n_a_t_u_r_e bit set.  Netscape certificate type must
           be absent or it must have the SSL client bit set.

     _S_S_L _C_l_i_e_n_t _C_A
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  Netscape certificate type must be
           absent or it must have the SSL CA bit set: this is used as a work
           around if the _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension is absent.

     _S_S_L _S_e_r_v_e_r
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  _k_e_y_U_s_a_g_e must
           be absent or it must have the _d_i_g_i_t_a_l_S_i_g_n_a_t_u_r_e set, the
           _k_e_y_E_n_c_i_p_h_e_r_m_e_n_t set, or both bits set.  Netscape certificate type
           must be absent or have the SSL server bit set.

     _S_S_L _S_e_r_v_e_r _C_A
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  Netscape
           certificate type must be absent or the SSL CA bit must be set: this
           is used as a work around if the _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension is
           absent.

     _N_e_t_s_c_a_p_e _S_S_L _S_e_r_v_e_r
           For Netscape SSL clients to connect to an SSL server; it must have
           the _k_e_y_E_n_c_i_p_h_e_r_m_e_n_t bit set if the _k_e_y_U_s_a_g_e extension is present.
           This isn't always valid because some cipher suites use the key for
           digital signing.  Otherwise it is the same as a normal SSL server.

     _C_o_m_m_o_n _S_/_M_I_M_E _C_l_i_e_n_t _T_e_s_t_s
           The extended key usage extension must be absent or include the
           "email protection" OID.  Netscape certificate type must be absent
           or should have the _S_/_M_I_M_E bit set.  If the _S_/_M_I_M_E bit is not set in
           Netscape certificate type, then the SSL client bit is tolerated as
           an alternative but a warning is shown: this is because some
           Verisign certificates don't set the _S_/_M_I_M_E bit.

     _S_/_M_I_M_E _S_i_g_n_i_n_g
           In addition to the common _S_/_M_I_M_E client tests, the _d_i_g_i_t_a_l_S_i_g_n_a_t_u_r_e
           bit must be set if the _k_e_y_U_s_a_g_e extension is present.

     _S_/_M_I_M_E _E_n_c_r_y_p_t_i_o_n
           In addition to the common _S_/_M_I_M_E tests, the _k_e_y_E_n_c_i_p_h_e_r_m_e_n_t bit
           must be set if the _k_e_y_U_s_a_g_e extension is present.

     _S_/_M_I_M_E _C_A
           The extended key usage extension must be absent or include the
           "email protection" OID.  Netscape certificate type must be absent
           or must have the _S_/_M_I_M_E _C_A bit set: this is used as a work around
           if the _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension is absent.

     _C_R_L _S_i_g_n_i_n_g
           The _k_e_y_U_s_a_g_e extension must be absent or it must have the _C_R_L
           signing bit set.

     _C_R_L _S_i_g_n_i_n_g _C_A
           The normal CA tests apply.  Except in this case the
           _b_a_s_i_c_C_o_n_s_t_r_a_i_n_t_s extension must be present.

XX550099 BBUUGGSS
     Extensions in certificates are not transferred to certificate requests
     and vice versa.

     It is possible to produce invalid certificates or requests by specifying
     the wrong private key or using inconsistent options in some cases: these
     should be checked.

     There should be options to explicitly set such things as start and end
     dates, rather than an offset from the current time.

     The code to implement the verify behaviour described in the _X_5_0_9 _T_R_U_S_T
     _S_E_T_T_I_N_G_S is currently being developed.  It thus describes the intended
     behaviour rather than the current behaviour.  It is hoped that it will
     represent reality in OOppeennSSSSLL 0.9.5 and later.

XX550099 HHIISSTTOORRYY
     Before OOppeennSSSSLL 0.9.8, the default digest for RSA keys was MD5.

     The hash algorithm used in the --ssuubbjjeecctt__hhaasshh and --iissssuueerr__hhaasshh options
     before OOppeennSSSSLL 1.0.0 was based on the deprecated MD5 algorithm and the
     encoding of the distinguished name.  In OOppeennSSSSLL 1.0.0 and later it is
     based on a canonical version of the DN using SHA1.  This means that any
     directories using the old form must have their links rebuilt using
     _c___r_e_h_a_s_h or similar.

CCOOMMMMOONN NNOOTTAATTIIOONN
     Several commands share a common syntax, as detailed below.

     Password arguments, typically specified using --ppaassssiinn and --ppaassssoouutt for
     input and output passwords, allow passwords to be obtained from a variety
     of sources.  Both of these options take a single argument, described
     below.  If no password argument is given and a password is required, then
     the user is prompted to enter one: this will typically be read from the
     current terminal with echoing turned off.

           ppaassss:_p_a_s_s_w_o_r_d  The actual password is _p_a_s_s_w_o_r_d.  Since the password
                          is visible to utilities, this form should only be
                          used where security is not important.

           eennvv:_v_a_r        Obtain the password from the environment variable
                          _v_a_r.  Since the environment of other processes is
                          visible, this option should be used with caution.

           ffiillee:_p_a_t_h      The first line of _p_a_t_h is the password.  If the same
                          _p_a_t_h argument is supplied to --ppaassssiinn and --ppaassssoouutt,
                          then the first line will be used for the input
                          password and the next line for the output password.
                          _p_a_t_h need not refer to a regular file: it could, for
                          example, refer to a device or named pipe.

           ffdd:_n_u_m_b_e_r      Read the password from the file descriptor _n_u_m_b_e_r.
                          This can be used to send the data via a pipe, for
                          example.

           ssttddiinn          Read the password from standard input.

     File formats, typically specified using --iinnffoorrmm and --oouuttffoorrmm, indicate
     the type of file being read from or the file format to write.  The
     argument is case insensitive.

           ddeerr     Distinguished Encoding Rules (DER) is a binary format.
           ppeemm     Privacy Enhanced Mail (PEM) is base64-encoded.
           ttxxtt     Plain ASCII text.

EENNVVIIRROONNMMEENNTT
     The following environment variables affect the execution of ooppeennssssll:

     OPENSSL_CONF          The location of the master configuration file.

FFIILLEESS
     _/_e_t_c_/_s_s_l_/             Default config directory for ooppeennssssll.
     _/_e_t_c_/_s_s_l_/_l_i_b_/         Unused.
     _/_e_t_c_/_s_s_l_/_p_r_i_v_a_t_e_/     Default private key directory.
     _/_e_t_c_/_s_s_l_/_o_p_e_n_s_s_l_._c_n_f  Default configuration file for ooppeennssssll.
     _/_e_t_c_/_s_s_l_/_x_5_0_9_v_3_._c_n_f   Default configuration file for xx550099 certificates.

SSEEEE AALLSSOO
     nc(1), ssl(8), starttls(8)

SSTTAANNDDAARRDDSS
     _T_h_e _S_S_L _P_r_o_t_o_c_o_l, Netscape Communications Corp., February 1995.

     _T_h_e _S_S_L _3_._0 _P_r_o_t_o_c_o_l, Netscape Communications Corp., November 1996.

     T. Dierks and C. Allen, _T_h_e _T_L_S _P_r_o_t_o_c_o_l _V_e_r_s_i_o_n _1_._0, RFC 2246, January
     1999.

     M. Wahl, S. Killie, and T. Howes, _L_i_g_h_t_w_e_i_g_h_t _D_i_r_e_c_t_o_r_y _A_c_c_e_s_s _P_r_o_t_o_c_o_l
     _(_v_3_)_: _U_T_F_-_8 _S_t_r_i_n_g _R_e_p_r_e_s_e_n_t_a_t_i_o_n _o_f _D_i_s_t_i_n_g_u_i_s_h_e_d _N_a_m_e_s, RFC 2253,
     December 1997.

     B. Kaliski, _P_K_C_S _#_7_: _C_r_y_p_t_o_g_r_a_p_h_i_c _M_e_s_s_a_g_e _S_y_n_t_a_x _V_e_r_s_i_o_n _1_._5, RFC 2315,
     March 1998.

     R. Housley, W. Ford, W. Polk, and D. Solo, _I_n_t_e_r_n_e_t _X_._5_0_9 _P_u_b_l_i_c _K_e_y
     _I_n_f_r_a_s_t_r_u_c_t_u_r_e _C_e_r_t_i_f_i_c_a_t_e _a_n_d _C_R_L _P_r_o_f_i_l_e, RFC 2459, January 1999.

     M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams, _X_._5_0_9
     _I_n_t_e_r_n_e_t _P_u_b_l_i_c _K_e_y _I_n_f_r_a_s_t_r_u_c_t_u_r_e _O_n_l_i_n_e _C_e_r_t_i_f_i_c_a_t_e _S_t_a_t_u_s _P_r_o_t_o_c_o_l _-
     _O_C_S_P, RFC 2560, June 1999.

     R. Housley, _C_r_y_p_t_o_g_r_a_p_h_i_c _M_e_s_s_a_g_e _S_y_n_t_a_x, RFC 2630, June 1999.

     P. Chown, _A_d_v_a_n_c_e_d _E_n_c_r_y_p_t_i_o_n _S_t_a_n_d_a_r_d _(_A_E_S_) _C_i_p_h_e_r_s_u_i_t_e_s _f_o_r _T_r_a_n_s_p_o_r_t
     _L_a_y_e_r _S_e_c_u_r_i_t_y _(_T_L_S_), RFC 3268, June 2002.

HHIISSTTOORRYY
     The openssl(1) document appeared in OOppeennSSSSLL 0.9.2.  The lliisstt--XXX--ccoommmmaannddss
     pseudo-commands were added in OOppeennSSSSLL 0.9.3; the nnoo--XXX pseudo-commands
     were added in OOppeennSSSSLL 0.9.5a; the lliisstt--XXX--aallggoorriitthhmmss pseudo-commands
     were added in OOppeennSSSSLL 1.0.0.

OpenBSD 6.0                      July 23, 2016                     OpenBSD 6.0
